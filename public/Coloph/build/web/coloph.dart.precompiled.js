// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
init.mangledNames = {$add: "+:1:0", $and: "&:1:0", $div: "/:1:0", $ge: ">=:1:0", $gt: ">:1:0", $index: "[]:1:0", $indexSet: "[]=:2:0", $le: "<=:1:0", $lt: "<:1:0", $mul: "*:1:0", $negate: "unary-:0:0", $not: "~:0:0", $shl: "<<:1:0", $shr: ">>:1:0", $sub: "-:1:0", $tdiv: "~/:1:0", $xor: "^:1:0", __isolate_helper$_add$1: "_add:1:0", _addError$2: "_addError:2:0", _addPending$1: "_addPending:1:0", _async$_add$1: "_add:1:0", _completeError$2: "_completeError:2:0", _completeWithValue$1: "_completeWithValue:1:0", _expectsEvent$1: "_expectsEvent:1:0", _removeListeners$0: "_removeListeners:0:0", _replaceChild$2: "_replaceChild:2:0", _setError$2: "_setError:2:0", _setRemoveAfterFiring$0: "_setRemoveAfterFiring:0:0", _setValue$1: "_setValue:1:0", _toggleEventId$0: "_toggleEventId:0:0", abs$0: "abs:0:0", add$1: "add:1:0", addBorderConnection$1: "addBorderConnection:1:0", addBorderUtilization$1: "addBorderUtilization:1:0", addEventListener$3: "addEventListener:3:0", addSpecializedTable$1: "addSpecializedTable:1:0", arc$6: "arc:6:0", areBorderPointsDefined$0: "areBorderPointsDefined:0:0", arePointsNull$0: "arePointsNull:0:0", beginPath$0: "beginPath:0:0", bezierCurveTo$6: "bezierCurveTo:6:0", bindCallback$2$runGuarded: "bindCallback:2:0:runGuarded", bindUnaryCallback$2$runGuarded: "bindUnaryCallback:2:0:runGuarded", calcSizeProperties$0: "calcSizeProperties:0:0", calculateConnectionsLocation$0: "calculateConnectionsLocation:0:0", call$0: "call:0:0", call$1: "call:1:0", call$2: "call:2:0", call$2$onError: "call:2:0:onError", call$2$runGuarded: "call:2:0:runGuarded", call$3: "call:3:0", call$3$async: "call:3:0:async", call$3$onDone$onError: "call:3:0:onDone:onError", call$4: "call:4:0", call$4$cancelOnError$onDone$onError: "call:4:0:cancelOnError:onDone:onError", call$6: "call:6:0", callMethod$2: "callMethod:2:0", callback$0: "callback:0:0", cancel$0: "cancel:0:0", cancelSchedule$0: "cancelSchedule:0:0", clear$0: "clear:0:0", clearBorderPointsAndAngle$0: "clearBorderPointsAndAngle:0:0", clearRect$4: "clearRect:4:0", clone$0: "clone:0:0", closePath$0: "closePath:0:0", codeUnitAt$1: "codeUnitAt:1:0", compareTo$1: "compareTo:1:0", createBorderConnection$2: "createBorderConnection:2:0", createLinearGradient$4: "createLinearGradient:4:0", createNameDiamond$1: "createNameDiamond:1:0", createTimer$2: "createTimer:2:0", css$2: "css:2:0", deleteForeignKey$1: "deleteForeignKey:1:0", deleteNonPrimaryKeyFieldsWithSameName$1: "deleteNonPrimaryKeyFieldsWithSameName:1:0", deletePrimaryKeyFieldsWithSameName$1: "deletePrimaryKeyFieldsWithSameName:1:0", draw$0: "draw:0:0", drawRelationshipName$1: "drawRelationshipName:1:0", drawToggled$0: "drawToggled:0:0", endsWith$1: "endsWith:1:0", eval$1: "eval:1:0", fill$0: "fill:0:0", fillRect$4: "fillRect:4:0", fillText$3: "fillText:3:0", forEach$1: "forEach:1:0", forceOppositeBorderForModelA$0: "forceOppositeBorderForModelA:0:0", generateBorderSegments$0: "generateBorderSegments:0:0", get$_async$_next: "_next", get$_async$_previous: "_previous", get$_collection$_element: "_element", get$_collection$_value: "_value", get$_contents: "_contents", get$_duration: "_duration", get$_error: "_error", get$_errorTest: "_errorTest", get$_errorZone: "_errorZone", get$_eventState: "_eventState", get$_hasError: "_hasError", get$_hasValue: "_hasValue", get$_id: "_id", get$_isChained: "_isChained", get$_isClosed: "_isClosed", get$_isComplete: "_isComplete", get$_isFiring: "_isFiring", get$_isInputPaused: "_isInputPaused", get$_key: "_key", get$_name: "_name", get$_next: "_next", get$_nextListener: "_nextListener", get$_onError: "_onError", get$_onValue: "_onValue", get$_previous: "_previous", get$_removeAfterFiring: "_removeAfterFiring", get$_value: "_value", get$_whenCompleteAction: "_whenCompleteAction", get$_zone: "_zone", get$angle: "angle", get$baseSubFields: "baseSubFields", get$bcnTernaryTableAndRelationship: "bcnTernaryTableAndRelationship", get$borderCode: "borderCode", get$borderCodeA: "borderCodeA", get$borderCodeB: "borderCodeB", get$borderInteractionController: "borderInteractionController", get$borderPointA: "borderPointA", get$borderPointB: "borderPointB", get$canvasModelA: "canvasModelA", get$canvasModelB: "canvasModelB", get$cells: "cells", get$checked: "checked", get$childCardinality: "childCardinality", get$childRole: "childRole", get$childTable: "childTable", get$children: "children", get$className: "className", get$classes: "classes", get$client: "client", get$composite: "composite", get$context2D: "context2D", get$controlPort: "controlPort", get$current: "current", get$dataType: "dataType", get$delayedEvents: "delayedEvents", get$derived: "derived", get$disabled: "disabled", get$end: "end", get$enforcedOppositeBorderForModelA: "enforcedOppositeBorderForModelA", get$error: "error", get$fillStyle: "fillStyle", get$font: "font", get$foreignKey: "foreignKey", get$foreignTableId: "foreignTableId", get$height: "height", get$highlighted: "highlighted", get$id: "id", get$identifying: "identifying", get$inMilliseconds: "inMilliseconds", get$isEmpty: "isEmpty", get$isGetter: "isGetter", get$isNotEmpty: "isNotEmpty", get$isPaused: "isPaused", get$isSetter: "isSetter", get$isolateStatics: "isolateStatics", get$iterator: "iterator", get$keys: "keys", get$length: "length", get$lineDashOffset: "lineDashOffset", get$lineWidth: "lineWidth", get$memberName: "memberName", get$millisecondsSinceEpoch: "millisecondsSinceEpoch", get$multivalued: "multivalued", get$name: "name", get$nameDiamond: "nameDiamond", get$nameDiamondMiddlePoint: "nameDiamondMiddlePoint", get$namedArguments: "namedArguments", get$next: "next", get$nullAllowed: "nullAllowed", get$nulls: "nulls", get$onChange: "onChange", get$onClick: "onClick", get$parentCardinality: "parentCardinality", get$parentRole: "parentRole", get$parentTable: "parentTable", get$placeholder: "placeholder", get$point: "point", get$pointsUpdated: "pointsUpdated", get$positionalArguments: "positionalArguments", get$primaryKey: "primaryKey", get$relationship: "relationship", get$relationshipFields: "relationshipFields", get$relationshipLines: "relationshipLines", get$rows: "rows", get$specialRelation: "specialRelation", get$specialization: "specialization", get$specializedTables: "specializedTables", get$src: "src", get$stackTrace: "stackTrace", get$start: "start", get$strokeStyle: "strokeStyle", get$table: "table", get$tableController: "tableController", get$tableFieldGlues: "tableFieldGlues", get$tableFieldPoint: "tableFieldPoint", get$tableFields: "tableFields", get$tablePoint: "tablePoint", get$tagName: "tagName", get$ternaryCardinality: "ternaryCardinality", get$ternaryConnection: "ternaryConnection", get$ternaryTable: "ternaryTable", get$toggled: "toggled", get$toggledRelationshipField: "toggledRelationshipField", get$toggledTableField: "toggledTableField", get$type: "type", get$value: "value", get$varData: "varData", get$which: "which", get$width: "width", get$x: "x", get$y: "y", getCentralBorderPoints$0: "getCentralBorderPoints:0:0", getConnectionPointsFromBorder$1: "getConnectionPointsFromBorder:1:0", getContext$1: "getContext:1:0", getFields$0: "getFields:0:0", glueRelationshipFields$0: "glueRelationshipFields:0:0", handleControlMessage$1: "handleControlMessage:1:0", handleUncaughtError$2: "handleUncaughtError:2:0", hasAPosition$0: "hasAPosition:0:0", hasField$1: "hasField:1:0", hasProperty$1: "hasProperty:1:0", height$0: "height:0:0", inSameErrorZone$1: "inSameErrorZone:1:0", indexOf$1: "indexOf:1:0", indexOf$2: "indexOf:2:0", insert$2: "insert:2:0", intersectsBaseCanvasModel$1: "intersectsBaseCanvasModel:1:0", isForeignKey$0: "isForeignKey:0:0", isIntersecting$1: "isIntersecting:1:0", isPositionEmpty$0: "isPositionEmpty:0:0", isWeakEntity$0: "isWeakEntity:0:0", lineTo$2: "lineTo:2:0", listen$1: "listen:1:0", listen$3$onDone$onError: "listen:3:0:onDone:onError", lookup$1: "lookup:1:0", map$1: "map:1:0", matchAsPrefix$2: "matchAsPrefix:2:0", measureText$1: "measureText:1:0", modal$1: "modal:1:0", moveNext$0: "moveNext:0:0", moveTo$2: "moveTo:2:0", noConflict$0: "noConflict:0:0", pause$0: "pause:0:0", perform$1: "perform:1:0", popover$1: "popover:1:0", preventDefault$0: "preventDefault:0:0", process$0: "process:0:0", rect$4: "rect:4:0", registerBinaryCallback$1: "registerBinaryCallback:1:0", registerCallback$1: "registerCallback:1:0", registerUnaryCallback$1: "registerUnaryCallback:1:0", remove$0: "remove:0:0", remove$1: "remove:1:0", removeAt$1: "removeAt:1:0", removeBorderConnection$1: "removeBorderConnection:1:0", removeEventListener$3: "removeEventListener:3:0", replaceAll$2: "replaceAll:2:0", replaceWith$1: "replaceWith:1:0", resume$0: "resume:0:0", round$0: "round:0:0", run$1: "run:1:0", runBinary$3: "runBinary:3:0", runBinaryGuarded$3: "runBinaryGuarded:3:0", runGuarded$1: "runGuarded:1:0", runUnary$2: "runUnary:2:0", runUnaryGuarded$2: "runUnaryGuarded:2:0", schedule$1: "schedule:1:0", scheduleMicrotask$1: "scheduleMicrotask:1:0", send$1: "send:1:0", set$_async$_next: "_next=", set$_async$_previous: "_previous=", set$_collection$_value: "_value=", set$_eventState: "_eventState=", set$_isChained: "_isChained=", set$_next: "_next=", set$_nextListener: "_nextListener=", set$_previous: "_previous=", set$bcnTernaryTableAndRelationship: "bcnTernaryTableAndRelationship=", set$canvasModelA: "canvasModelA=", set$canvasModelB: "canvasModelB=", set$checked: "checked=", set$childCardinality: "childCardinality=", set$childRole: "childRole=", set$childTable: "childTable=", set$className: "className=", set$classes: "classes=", set$dataType: "dataType=", set$disabled: "disabled=", set$fillStyle: "fillStyle=", set$font: "font=", set$foreignKey: "foreignKey=", set$height: "height=", set$highlighted: "highlighted=", set$id: "id=", set$identifying: "identifying=", set$lineDashOffset: "lineDashOffset=", set$lineWidth: "lineWidth=", set$name: "name=", set$next: "next=", set$nullAllowed: "nullAllowed=", set$parentCardinality: "parentCardinality=", set$parentRole: "parentRole=", set$parentTable: "parentTable=", set$placeholder: "placeholder=", set$primaryKey: "primaryKey=", set$specialRelation: "specialRelation=", set$src: "src=", set$strokeStyle: "strokeStyle=", set$ternaryCardinality: "ternaryCardinality=", set$ternaryConnection: "ternaryConnection=", set$ternaryTable: "ternaryTable=", set$toggled: "toggled=", set$toggledRelationshipField: "toggledRelationshipField=", set$toggledTableField: "toggledTableField=", set$type: "type=", set$value: "value=", set$varData: "varData=", set$width: "width=", set$x: "x=", set$y: "y=", setBorderCodes$2: "setBorderCodes:2:0", setBorderConnections$2: "setBorderConnections:2:0", setControllerFactory$1: "setControllerFactory:1:0", setLineDash$1: "setLineDash:1:0", setPhysical$1: "setPhysical:1:0", setRelationshipPointsAndAngle$3: "setRelationshipPointsAndAngle:3:0", setRequiredControllers$0: "setRequiredControllers:0:0", skip$1: "skip:1:0", split$1: "split:1:0", startsWith$1: "startsWith:1:0", stroke$0: "stroke:0:0", strokeRect$4: "strokeRect:4:0", substring$1: "substring:1:0", substring$2: "substring:2:0", tableDnD$0: "tableDnD:0:0", then$2$onError: "then:2:0:onError", toInt$0: "toInt:0:0", toJson$0: "toJson:0:0", toJson$1: "toJson:1:0", toList$0: "toList:0:0", toMap$0: "toMap:0:0", toMap$1: "toMap:1:0", toMap$2: "toMap:2:0", toRti$0: "toRti:0:0", toggle$1: "toggle:1:0", triggerPointsUpdated$0: "triggerPointsUpdated:0:0", trim$0: "trim:0:0", updateCentralBorderPoints$0: "updateCentralBorderPoints:0:0", updateFillingColorGradient$0: "updateFillingColorGradient:0:0", updateLocation$1: "updateLocation:1:0", updateNameDiamond$1: "updateNameDiamond:1:0", updateRelationship$1: "updateRelationship:1:0", updateTable$1: "updateTable:1:0", validate$0: "validate:0:0", write$1: "write:1:0", writeAll$2: "writeAll:2:0"};
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "^") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0) descriptor[previousProperty].$reflectable = flag;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              var flag = element[prop];
              if (flag > 0) element[previousProp].$reflectable = flag;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex =  2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;

    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
    }
    if (isReflectable) {
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName + ":" + requiredParameterCount + ":" + optionalParameterCount;
      if (isGetter) {
        reflectionName = unmangledName;
      } else if (isSetter) {
        reflectionName = unmangledName + "=";
      }
      if (isStatic) {
        init.mangledGlobalNames[name] = reflectionName;
      } else {
        init.mangledNames[name] = reflectionName;
      }
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code-"
  },
  "+JS_CONST": 0
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: [function(object) {
    return void 0;
  }, "call$1", "getInterceptor$closure", 2, 0, 0, 1, "getInterceptor"],
  makeDispatchRecord: [function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  }, "call$4", "makeDispatchRecord$closure", 8, 0, 2, 3, 4, 5, 6, "makeDispatchRecord"],
  getNativeInterceptor: [function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  }, "call$1", "getNativeInterceptor$closure", 2, 0, 0, 1, "getNativeInterceptor"],
  Interceptor: {
    "^": "Object;",
    $eq: [function(receiver, other) {
      return receiver === other;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    }, null, null, 1, 0, 394, "hashCode"],
    toString$0: [function(receiver) {
      return H.Primitives_objectToString(receiver);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, 420, 421, "noSuchMethod"],
    get$runtimeType: [function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    }, null, null, 1, 0, 416, "runtimeType"],
    "%": "CSS|CanvasGradient|CanvasPattern|MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList"
  },
  "+Interceptor": 0,
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: [function(receiver) {
      return String(receiver);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$hashCode: [function(receiver) {
      return receiver ? 519018 : 218159;
    }, null, null, 1, 0, 394, "hashCode"],
    get$runtimeType: [function(receiver) {
      return C.Type_EsU;
    }, null, null, 1, 0, 416, "runtimeType"],
    $isbool: true
  },
  "+JSBool": 0,
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: [function(receiver, other) {
      return null == other;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    toString$0: [function(receiver) {
      return "null";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$hashCode: [function(receiver) {
      return 0;
    }, null, null, 1, 0, 394, "hashCode"],
    get$runtimeType: [function(receiver) {
      return C.Type_eZO;
    }, null, null, 1, 0, 416, "runtimeType"]
  },
  "+JSNull": 0,
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: [function(_) {
      return 0;
    }, null, null, 1, 0, 394, "hashCode"],
    get$runtimeType: [function(_) {
      return C.Type_XXD;
    }, null, null, 1, 0, 416, "runtimeType"]
  },
  "+JavaScriptObject": 0,
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  "+PlainJavaScriptObject": 0,
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  "+UnknownJavaScriptObject": 0,
  JSArray: {
    "^": "List/Interceptor;",
    add$1: [function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E", void: true, args: [E]};
      }, this.$receiver, "JSArray");
    }, 38, "add"],
    removeAt$1: [function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int", ret: E, args: [J.JSInt]};
      }, this.$receiver, "JSArray");
    }, 12, "removeAt"],
    insert$2: [function(receiver, index, value) {
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "JSArray");
    }, 12, 38, "insert"],
    remove$1: [function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    }, "call$1", "get$remove", 2, 0, 422, 218, "remove"],
    addAll$1: [function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0() === true;)
        this.add$1(receiver, t1.get$current());
    }, "call$1", "get$addAll", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__Iterable0", void: true, args: [[P.Iterable, E]]};
      }, this.$receiver, "JSArray");
    }, 423, "addAll"],
    clear$0: [function(receiver) {
      this.set$length(receiver, 0);
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    forEach$1: [function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E", void: true, args: [{func: "void__E", void: true, args: [E]}]};
      }, this.$receiver, "JSArray");
    }, 203, "forEach"],
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E", ret: P.Iterable, args: [{func: "dynamic__E", args: [E]}]};
      }, this.$receiver, "JSArray");
    }, 203, "map"],
    skip$1: [function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "JSArray");
    }, 293, "skip"],
    elementAt$1: [function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    }, "call$1", "get$elementAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int", ret: E, args: [J.JSInt]};
      }, this.$receiver, "JSArray");
    }, 12, "elementAt"],
    sublist$2: [function(receiver, start, end) {
      if (start == null)
        H.throwExpression(new P.ArgumentError(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(new P.ArgumentError(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    }, "call$2", "get$sublist", 2, 2, function() {
      return H.computeSignature(function(E) {
        return {func: "List__int__int", ret: [J.JSArray, E], args: [J.JSInt], opt: [J.JSInt]};
      }, this.$receiver, "JSArray");
    }, 116, 208, 209, "sublist"],
    indexOf$2: [function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    }, function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    }, "indexOf$1", "call$2", null, "get$indexOf", 2, 2, 424, 295, 218, 208, "indexOf"],
    contains$1: [function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    }, "call$1", "get$contains", 2, 0, 422, 140, "contains"],
    get$isEmpty: [function(receiver) {
      return receiver.length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(receiver) {
      return receiver.length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    toString$0: [function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    toList$1$growable: [function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "JSArray");
    }, 316, 317, "toList"],
    get$iterator: [function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_", ret: [P.Iterator, E]};
      }, this.$receiver, "JSArray");
    }, "iterator"],
    get$hashCode: [function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    }, null, null, 1, 0, 394, "hashCode"],
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    set$length: [function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(new P.ArgumentError(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    }, null, null, 3, 0, 397, 425, "length"],
    $index: [function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int", ret: E, args: [J.JSInt]};
      }, this.$receiver, "JSArray");
    }, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "JSArray");
    }, 12, 38, "[]="],
    $isList: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {JSArray_JSArray$fixed: [function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(new P.ArgumentError("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }, "call$1", null, 2, 0, function() {
        return H.computeSignature(function(E) {
          return {func: "JSArray__int", ret: [J.JSArray, E], args: [J.JSInt]};
        }, this.$receiver, "JSArray");
      }, 7, "new JSArray$fixed"]}
  },
  "+JSArray": 0,
  JSNumber: {
    "^": "num/Interceptor;",
    compareTo$1: [function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    }, "call$1", "get$compareTo", 2, 0, 426, 268, "compareTo"],
    get$isNegative: [function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    }, null, null, 1, 0, 346, "isNegative"],
    get$isNaN: [function(receiver) {
      return isNaN(receiver);
    }, null, null, 1, 0, 346, "isNaN"],
    get$isFinite: [function(receiver) {
      return isFinite(receiver);
    }, null, null, 1, 0, 346, "isFinite"],
    remainder$1: [function(receiver, b) {
      return receiver % b;
    }, "call$1", "get$remainder", 2, 0, 427, 268, "remainder"],
    abs$0: [function(receiver) {
      return Math.abs(receiver);
    }, "call$0", "get$abs", 0, 0, 428, "abs"],
    toInt$0: [function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    }, "call$0", "get$toInt", 0, 0, 394, "toInt"],
    round$0: [function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    }, "call$0", "get$round", 0, 0, 394, "round"],
    roundToDouble$0: [function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    }, "call$0", "get$roundToDouble", 0, 0, 429, "roundToDouble"],
    toString$0: [function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$hashCode: [function(receiver) {
      return receiver & 0x1FFFFFFF;
    }, null, null, 1, 0, 394, "hashCode"],
    $negate: [function(receiver) {
      return -receiver;
    }, "call$0", "get$unary-", 0, 0, 428, "unary-"],
    $add: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    }, "call$1", "get$+", 2, 0, 427, 140, "+"],
    $sub: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    }, "call$1", "get$-", 2, 0, 427, 140, "-"],
    $div: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver / other;
    }, "call$1", "get$/", 2, 0, 427, 140, "/"],
    $mul: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    }, "call$1", "get$*", 2, 0, 427, 140, "*"],
    $mod: [function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    }, "call$1", "get$%", 2, 0, 427, 140, "%"],
    $tdiv: [function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    }, "call$1", "get$~/", 2, 0, 427, 140, "~/"],
    _tdivFast$1: [function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    }, "call$1", "get$_tdivFast", 2, 0, 427, 140, "_tdivFast"],
    $shl: [function(receiver, other) {
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    }, "call$1", "get$<<", 2, 0, 427, 140, "<<"],
    $shr: [function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    }, "call$1", "get$>>", 2, 0, 427, 140, ">>"],
    _shrOtherPositive$1: [function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    }, "call$1", "get$_shrOtherPositive", 2, 0, 427, 140, "_shrOtherPositive"],
    $and: [function(receiver, other) {
      return (receiver & other) >>> 0;
    }, "call$1", "get$&", 2, 0, 427, 140, "&"],
    $xor: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver ^ other) >>> 0;
    }, "call$1", "get$^", 2, 0, 427, 140, "^"],
    $lt: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver < other;
    }, "call$1", "get$<", 2, 0, 430, 140, "<"],
    $gt: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver > other;
    }, "call$1", "get$>", 2, 0, 430, 140, ">"],
    $le: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver <= other;
    }, "call$1", "get$<=", 2, 0, 430, 140, "<="],
    $ge: [function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver >= other;
    }, "call$1", "get$>=", 2, 0, 430, 140, ">="],
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32-,JSNumber__MAX_INT32-"}
  },
  "+JSNumber": 0,
  JSInt: {
    "^": "int/JSNumber;",
    get$runtimeType: [function(receiver) {
      return C.Type_SnA;
    }, null, null, 1, 0, 416, "runtimeType"],
    $not: [function(receiver) {
      return ~receiver >>> 0;
    }, "call$0", "get$~", 0, 0, 394, "~"],
    $isnum: true,
    $isint: true
  },
  "+JSInt": 0,
  JSDouble: {
    "^": "double/JSNumber;",
    get$runtimeType: [function(receiver) {
      return C.Type_qq1;
    }, null, null, 1, 0, 416, "runtimeType"],
    $isnum: true
  },
  "+JSDouble": 0,
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: [function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    }, "call$1", "get$codeUnitAt", 2, 0, 342, 12, "codeUnitAt"],
    matchAsPrefix$2: [function(receiver, string, start) {
      var t1, t2, i, t3;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (t3 < 0)
          H.throwExpression(P.RangeError$value(t3));
        if (t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        t3 = string.charCodeAt(t3);
        if (i >= t1)
          H.throwExpression(P.RangeError$value(i));
        if (t3 !== receiver.charCodeAt(i))
          return;
      }
      return new H.StringMatch(start, string, receiver);
    }, "call$2", "get$matchAsPrefix", 2, 2, 431, 295, 11, 208, "matchAsPrefix"],
    $add: [function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    }, "call$1", "get$+", 2, 0, 97, 140, "+"],
    endsWith$1: [function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    }, "call$1", "get$endsWith", 2, 0, 432, 140, "endsWith"],
    replaceAll$2: [function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    }, "call$2", "get$replaceAll", 4, 0, 433, 141, 142, "replaceAll"],
    split$1: [function(receiver, pattern) {
      return receiver.split(pattern);
    }, "call$1", "get$split", 2, 0, 434, 435, "split"],
    startsWith$2: [function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    }, function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    }, "startsWith$1", "call$2", null, "get$startsWith", 2, 2, 436, 295, 435, 12, "startsWith"],
    substring$2: [function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(new P.ArgumentError(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    }, function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    }, "substring$1", "call$2", null, "get$substring", 2, 2, 437, 116, 121, 219, "substring"],
    trim$0: [function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    }, "call$0", "get$trim", 0, 0, 20, "trim"],
    $mul: [function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    }, "call$1", "get$*", 2, 0, 292, 438, "*"],
    indexOf$2: [function(receiver, pattern, start) {
      var t1, match, t2, i;
      if (pattern == null)
        H.throwExpression(new P.ArgumentError(null));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      t1 = J.getInterceptor(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    }, function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    }, "indexOf$1", "call$2", null, "get$indexOf", 2, 2, 439, 295, 435, 208, "indexOf"],
    contains$2: [function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    }, "call$2", "get$contains", 2, 2, 436, 295, 140, 121, "contains"],
    get$isEmpty: [function(receiver) {
      return receiver.length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(receiver) {
      return receiver.length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    compareTo$1: [function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    }, "call$1", "get$compareTo", 2, 0, 440, 140, "compareTo"],
    toString$0: [function(receiver) {
      return receiver;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$hashCode: [function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    }, null, null, 1, 0, 394, "hashCode"],
    get$runtimeType: [function(receiver) {
      return C.Type_Ejg;
    }, null, null, 1, 0, 416, "runtimeType"],
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 292, 12, "[]"],
    $isString: true,
    static: {JSString__isWhitespace: [function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, "call$1", "JSString__isWhitespace$closure", 2, 0, 8, 9, "_isWhitespace"], JSString__skipLeadingWhitespace: [function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, "call$2", "JSString__skipLeadingWhitespace$closure", 4, 0, 10, 11, 12, "_skipLeadingWhitespace"], JSString__skipTrailingWhitespace: [function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }, "call$2", "JSString__skipTrailingWhitespace$closure", 4, 0, 10, 11, 12, "_skipTrailingWhitespace"]}
  },
  "+JSString": 0
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: [function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  }, "call$2", "_callInIsolate$closure", 4, 0, 13, 14, 15, "_callInIsolate"],
  leaveJsAsync: [function() {
    var t1 = init.globalState.topEventLoop;
    t1._activeJsAsyncCount = t1._activeJsAsyncCount - 1;
  }, "call$0", "leaveJsAsync$closure", 0, 0, 16, "leaveJsAsync"],
  startRootIsolate: [function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(new P.ArgumentError("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState;
    t3 = t2.nextIsolateId;
    t2.nextIsolateId = t3 + 1;
    t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t3, t2, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  }, "call$2", "startRootIsolate$closure", 4, 0, 17, 18, 19, "startRootIsolate"],
  IsolateNatives_computeThisScript: [function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  }, "call$0", "IsolateNatives_computeThisScript$closure", 0, 0, 20, "computeThisScript"],
  IsolateNatives_computeThisScriptFromTrace: [function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  }, "call$0", "IsolateNatives_computeThisScriptFromTrace$closure", 0, 0, 20, "computeThisScriptFromTrace"],
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, uri, t5, t6, worker, t7, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t2, t1, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t6 = t1.$index(msg, "startPaused");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t7 = init.globalState;
        workerId = t7.nextManagerId;
        t7.nextManagerId = workerId + 1;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, workerId);
        init.globalState.managers.$indexSet(0, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "startPaused", t6, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, 17, 21, 22, "_processWorkerMessage"],
  IsolateNatives__log: [function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  }, "call$1", "IsolateNatives__log$closure", 2, 0, 0, 23, "_log"],
  IsolateNatives__startIsolate: [function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort.get$sendPort();
    t2 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", t1, t2, context.terminateCapability]);
    t1 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t2, t2);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t1, "start isolate"));
    } else
      t1.call$0();
  }, "call$6", "IsolateNatives__startIsolate$closure", 12, 0, 24, 25, 19, 26, 27, 28, 29, "_startIsolate"],
  _serializeMessage: [function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  }, "call$1", "_serializeMessage$closure", 2, 0, 0, 26, "_serializeMessage"],
  _deserializeMessage: [function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  }, "call$1", "_deserializeMessage$closure", 2, 0, 0, 26, "_deserializeMessage"],
  _MessageTraverser_isPrimitive: [function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  }, "call$1", "_MessageTraverser_isPrimitive$closure", 2, 0, 30, 31, "isPrimitive"],
  _Deserializer_isPrimitive: [function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  }, "call$1", "_Deserializer_isPrimitive$closure", 2, 0, 30, 31, "isPrimitive"],
  startRootIsolate_closure: {
    "^": "Closure:16;box_0-,entry_1-",
    call$0: [function() {
      this.entry_1.call$1(this.box_0.args_0);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ startRootIsolate_closure": 0,
  startRootIsolate_closure0: {
    "^": "Closure:16;box_0-,entry_2-",
    call$0: [function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ startRootIsolate_closure0": 0,
  _Manager: {
    "^": "Object;nextIsolateId-,currentManagerId-,nextManagerId-,currentContext-,rootContext-,topEventLoop-,fromCommandLine-,isWorker-,supportsWorkers-,isolates-,mainManager-,managers-,entry-",
    _Manager$1: [function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }, null, null, 2, 0, 441, 18, ""]
  },
  "+_Manager": 0,
  _IsolateContext: {
    "^": "Object;id>-,ports-,weakPorts-,isolateStatics<-,controlPort<-,pauseCapability-,terminateCapability-,isPaused<-,delayedEvents<-,pauseTokens-,doneHandlers-,errorsAreFatal-",
    addPause$2: [function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    }, "call$2", "get$addPause", 4, 0, 442, 443, 444, "addPause"],
    removePause$1: [function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          t2._modificationCount = t2._modificationCount + 1;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    }, "call$1", "get$removePause", 2, 0, 445, 444, "removePause"],
    addDoneListener$1: [function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    }, "call$1", "get$addDoneListener", 2, 0, 446, 447, "addDoneListener"],
    removeDoneListener$1: [function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    }, "call$1", "get$removeDoneListener", 2, 0, 446, 447, "removeDoneListener"],
    setErrorsFatal$2: [function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    }, "call$2", "get$setErrorsFatal", 4, 0, 448, 443, 449, "setErrorsFatal"],
    handlePing$2: [function(responsePort, pingType) {
      if (J.$eq(pingType, 2))
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, new H._IsolateContext_handlePing_closure(responsePort), "ping"));
      else
        J.send$1$x(responsePort, null);
    }, "call$2", "get$handlePing", 4, 0, 450, 447, 451, "handlePing"],
    eval$1: [function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    }, "call$1", "get$eval", 2, 0, 441, 452, "eval"],
    handleControlMessage$1: [function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        default:
          P.print("UNKNOWN MESSAGE: " + H.S(message));
      }
    }, "call$1", "get$handleControlMessage", 2, 0, 235, 26, "handleControlMessage"],
    lookup$1: [function(portId) {
      return this.ports.$index(0, portId);
    }, "call$1", "get$lookup", 2, 0, 453, 454, "lookup"],
    _addRegistration$2: [function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    }, "call$2", "get$_addRegistration", 4, 0, 455, 454, 456, "_addRegistration"],
    _updateGlobalState$0: [function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this._shutdown$0();
    }, "call$0", "get$_updateGlobalState", 0, 0, 137, "_updateGlobalState"],
    _shutdown$0: [function() {
      init.globalState.isolates.remove$1(0, this.id);
      var t1 = this.doneHandlers;
      if (t1 != null)
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
    }, "call$0", "get$_shutdown", 0, 0, 137, "_shutdown"]
  },
  "+_IsolateContext": 0,
  _IsolateContext_handlePing_closure: {
    "^": "Closure:16;responsePort_0-",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _IsolateContext_handlePing_closure": 0,
  _EventLoop: {
    "^": "Object;events-,_activeJsAsyncCount-",
    dequeue$0: [function() {
      var t1, t2, t3, t4, result;
      t1 = this.events;
      t2 = t1._head;
      if (t2 === t1._tail)
        return;
      t1._modificationCount = t1._modificationCount + 1;
      t3 = t1._table;
      t4 = t3.length;
      if (t2 >= t4)
        return H.ioore(t3, t2);
      result = t3[t2];
      t3[t2] = null;
      t1._head = (t2 + 1 & t4 - 1) >>> 0;
      return result;
    }, "call$0", "get$dequeue", 0, 0, 457, "dequeue"],
    runIteration$0: [function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    }, "call$0", "get$runIteration", 0, 0, 346, "runIteration"],
    _runHelper$0: [function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    }, "call$0", "get$_runHelper", 0, 0, 137, "_runHelper"],
    run$0: [function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }, "call$0", "get$run", 0, 0, 137, "run"]
  },
  "+_EventLoop": 0,
  _EventLoop__runHelper_next: {
    "^": "Closure:137;this_0-",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _EventLoop__runHelper_next": 0,
  _IsolateEvent: {
    "^": "Object;isolate-,fn-,message-",
    process$0: [function() {
      var t1 = this.isolate;
      if (t1.get$isPaused() === true) {
        J.add$1$ax(t1.get$delayedEvents(), this);
        return;
      }
      t1.eval$1(this.fn);
    }, "call$0", "get$process", 0, 0, 137, "process"]
  },
  "+_IsolateEvent": 0,
  _MainManagerStub: {
    "^": "Object;"
  },
  "+_MainManagerStub": 0,
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:16;entryPoint_0-,args_1-,message_2-,isSpawnUri_3-,startPaused_4-,replyTo_5-",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ IsolateNatives__processWorkerMessage_closure": 0,
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:137;topLevel_0-,args_1-,message_2-,isSpawnUri_3-",
    call$0: [function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ IsolateNatives__startIsolate_runStartFunction": 0,
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  "+_BaseSendPort": 0,
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort-,_isolateId-",
    send$1: [function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed() === true)
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (J.$eq(isolate.get$controlPort(), t3)) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    }, "call$1", "get$send", 2, 0, 235, 26, "send"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      return this._receivePort.get$_id();
    }, null, null, 1, 0, 394, "hashCode"],
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  "+_NativeJsSendPort": 0,
  _NativeJsSendPort_send_closure: {
    "^": "Closure:16;box_0-,this_1-,shouldSerialize_2-",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (t1.get$_isClosed() !== true) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _NativeJsSendPort_send_closure": 0,
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId-,_receivePortId-,_isolateId-",
    send$1: [function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    }, "call$1", "get$send", 2, 0, 235, 26, "send"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      return J.$xor$n(J.$xor$n(J.$shl$n(this._workerId, 16), J.$shl$n(this._isolateId, 8)), this._receivePortId);
    }, null, null, 1, 0, 394, "hashCode"],
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  "+_WorkerSendPort": 0,
  RawReceivePortImpl: {
    "^": "Object;_id<-,_handler-,_isClosed<-",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_add$1: [function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    }, "call$1", "get$__isolate_helper$_add", 2, 0, 235, 458, "_add"],
    get$sendPort: [function() {
      return new H._NativeJsSendPort(this, init.globalState.currentContext.id);
    }, null, null, 1, 0, 459, "sendPort"],
    static: {"^": "RawReceivePortImpl__nextFreeId-"}
  },
  "+RawReceivePortImpl": 0,
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId-,_visited-",
    visitSendPort$1: [function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }, "call$1", "get$visitSendPort", 2, 0, 460, 31, "visitSendPort"],
    visitCapability$1: [function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }, "call$1", "get$visitCapability", 2, 0, 461, 31, "visitCapability"]
  },
  "+_JsSerializer": 0,
  _JsCopier: {
    "^": "_Copier;_visited-",
    visitSendPort$1: [function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }, "call$1", "get$visitSendPort", 2, 0, 460, 31, "visitSendPort"],
    visitCapability$1: [function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }, "call$1", "get$visitCapability", 2, 0, 461, 31, "visitCapability"]
  },
  "+_JsCopier": 0,
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized-",
    deserializeSendPort$1: [function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    }, "call$1", "get$deserializeSendPort", 2, 0, 462, 101, "deserializeSendPort"],
    deserializeCapability$1: [function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }, "call$1", "get$deserializeCapability", 2, 0, 463, 101, "deserializeCapability"]
  },
  "+_JsDeserializer": 0,
  _JsVisitedMap: {
    "^": "Object;tagged-",
    $index: [function(_, object) {
      return object.__MessageTraverser__attached_info__;
    }, "call$1", "get$[]", 2, 0, 0, 1, "[]"],
    $indexSet: [function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    }, "call$2", "get$[]=", 4, 0, 17, 1, 464, "[]="],
    reset$0: [function(_) {
      this.tagged = [];
    }, "call$0", "get$reset", 0, 0, 137, "reset"],
    cleanup$0: [function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }, "call$0", "get$cleanup", 0, 0, 137, "cleanup"]
  },
  "+_JsVisitedMap": 0,
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: [function(_, object) {
      return;
    }, "call$1", "get$[]", 2, 0, 0, 1, "[]"],
    $indexSet: [function(_, object, info) {
    }, "call$2", "get$[]=", 4, 0, 17, 1, 464, "[]="],
    reset$0: [function(_) {
    }, "call$0", "get$reset", 0, 0, 137, "reset"],
    cleanup$0: [function() {
    }, "call$0", "get$cleanup", 0, 0, 137, "cleanup"]
  },
  "+_MessageTraverserVisitedMap": 0,
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: [function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    }, "call$1", "get$traverse", 2, 0, 0, 31, "traverse"],
    _dispatch$1: [function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    }, "call$1", "get$_dispatch", 2, 0, 0, 31, "_dispatch"],
    visitObject$1: [function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }, "call$1", "get$visitObject", 2, 0, 111, 31, "visitObject"]
  },
  "+_MessageTraverser": 0,
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: [function(x) {
      return x;
    }, "call$1", "get$visitPrimitive", 2, 0, 0, 31, "visitPrimitive"],
    visitList$1: [function(list) {
      var copy, t1, len, t2, i, t3;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      if (typeof len !== "number")
        return H.iae(len);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (t2 = copy.length, i = 0; i < len; ++i) {
        t3 = this._dispatch$1(t1.$index(list, i));
        if (i >= t2)
          return H.ioore(copy, i);
        copy[i] = t3;
      }
      return copy;
    }, "call$1", "get$visitList", 2, 0, 465, 101, "visitList"],
    visitMap$1: [function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    }, "call$1", "get$visitMap", 2, 0, 466, 181, "visitMap"],
    visitSendPort$1: [function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }, "call$1", "get$visitSendPort", 2, 0, 460, 31, "visitSendPort"],
    visitCapability$1: [function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }, "call$1", "get$visitCapability", 2, 0, 461, 31, "visitCapability"]
  },
  "+_Copier": 0,
  _Copier_visitMap_closure: {
    "^": "Closure:59;box_0-,this_1-",
    call$2: [function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }, "call$2", null, 4, 0, 59, 60, 467, "call"],
    $isFunction: true
  },
  "+ _Copier_visitMap_closure": 0,
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: [function(x) {
      return x;
    }, "call$1", "get$visitPrimitive", 2, 0, 0, 31, "visitPrimitive"],
    visitList$1: [function(list) {
      var copyId, id;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, list, id);
      return ["list", id, this._serializeList$1(list)];
    }, "call$1", "get$visitList", 2, 0, 468, 101, "visitList"],
    visitMap$1: [function(map) {
      var copyId, id;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, map, id);
      return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    }, "call$1", "get$visitMap", 2, 0, 191, 181, "visitMap"],
    _serializeList$1: [function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    }, "call$1", "get$_serializeList", 2, 0, 468, 101, "_serializeList"],
    visitSendPort$1: [function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }, "call$1", "get$visitSendPort", 2, 0, 460, 31, "visitSendPort"],
    visitCapability$1: [function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }, "call$1", "get$visitCapability", 2, 0, 461, 31, "visitCapability"]
  },
  "+_Serializer": 0,
  _Deserializer: {
    "^": "Object;",
    deserialize$1: [function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    }, "call$1", "get$deserialize", 2, 0, 0, 31, "deserialize"],
    _deserializeHelper$1: [function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    }, "call$1", "get$_deserializeHelper", 2, 0, 0, 31, "_deserializeHelper"],
    _deserializeList$1: [function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    }, "call$1", "get$_deserializeList", 2, 0, 465, 31, "_deserializeList"],
    _deserializeMap$1: [function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    }, "call$1", "get$_deserializeMap", 2, 0, 469, 31, "_deserializeMap"],
    deserializeObject$1: [function(x) {
      throw H.wrapException("Unexpected serialized object");
    }, "call$1", "get$deserializeObject", 2, 0, 468, 31, "deserializeObject"]
  },
  "+_Deserializer": 0,
  TimerImpl: {
    "^": "Object;_once-,_inEventLoop-,_handle-",
    cancel$0: [function() {
      if ($.get$globalThis().setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        if (this._once)
          $.get$globalThis().clearTimeout(this._handle);
        else
          $.get$globalThis().clearInterval(this._handle);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    }, "call$0", "get$cancel", 0, 0, 137, "cancel"],
    TimerImpl$2: [function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2._activeJsAsyncCount = t2._activeJsAsyncCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    }, null, null, 4, 0, 32, 33, 34, ""],
    static: {TimerImpl$: [function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, null, null, 4, 0, 32, 33, 34, "new TimerImpl"]}
  },
  "+TimerImpl": 0,
  TimerImpl_internalCallback: {
    "^": "Closure:137;this_0-,callback_1-",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ TimerImpl_internalCallback": 0,
  TimerImpl_internalCallback0: {
    "^": "Closure:137;this_2-,callback_3-",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ TimerImpl_internalCallback0": 0,
  CapabilityImpl: {
    "^": "Object;_id<-",
    get$hashCode: [function(_) {
      var hash, t1;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      hash = J.$xor$n(t1.$shr(hash, 0), t1.$tdiv(hash, 4294967296));
      t1 = J.getInterceptor$i(hash);
      hash = J.$and$n(J.$add$ns(t1.$not(hash), t1.$shl(hash, 15)), 4294967295);
      t1 = J.getInterceptor$n(hash);
      hash = J.$and$n(J.$mul$ns(t1.$xor(hash, t1.$shr(hash, 12)), 5), 4294967295);
      t1 = J.getInterceptor$n(hash);
      hash = J.$and$n(J.$mul$ns(t1.$xor(hash, t1.$shr(hash, 4)), 2057), 4294967295);
      t1 = J.getInterceptor$n(hash);
      return t1.$xor(hash, t1.$shr(hash, 16));
    }, null, null, 1, 0, 394, "hashCode"],
    $eq: [function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    }, "call$1", "get$==", 2, 0, 422, 140, "=="],
    $isCapabilityImpl: true,
    $isCapability: true
  },
  "+CapabilityImpl": 0
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: [function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  }, "call$2", "isJsIndexable$closure", 4, 0, 35, 1, 36, "isJsIndexable"],
  S: [function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  }, "call$1", "S$closure", 2, 0, 37, 38, "S"],
  createInvocationMirror: [function($name, internalName, kind, $arguments, argumentNames) {
    return new H.JSInvocationMirror($name, internalName, kind, $arguments, argumentNames, null);
  }, "call$5", "createInvocationMirror$closure", 10, 0, 39, 40, 41, 42, 43, 44, "createInvocationMirror"],
  Primitives_objectHashCode: [function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  }, "call$1", "Primitives_objectHashCode$closure", 2, 0, 47, 1, "objectHashCode"],
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 48, 11, "_throwFormatException"],
  Primitives_parseInt: [function(source, radix, handleError) {
    var match, t1;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(new P.ArgumentError(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        return H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        return H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, 10);
  }, "call$3", "Primitives_parseInt$closure", 6, 0, 49, 50, 51, 52, "parseInt"],
  Primitives_objectTypeName: [function(object) {
    var $name, decompiled, t1;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    t1 = J.getInterceptor$s($name);
    if (t1.codeUnitAt$1($name, 0) === 36)
      $name = t1.substring$1($name, 1);
    t1 = H.getRuntimeTypeInfo(object);
    return H.S($name) + H.joinArguments(t1, 0, null);
  }, "call$1", "Primitives_objectTypeName$closure", 2, 0, 53, 1, "objectTypeName"],
  Primitives_objectToString: [function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  }, "call$1", "Primitives_objectToString$closure", 2, 0, 53, 1, "objectToString"],
  Primitives__fromCharCodeApply: [function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  }, "call$1", "Primitives__fromCharCodeApply$closure", 2, 0, 54, 55, "_fromCharCodeApply"],
  Primitives_stringFromCodePoints: [function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    t1 = new H.ListIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(new P.ArgumentError(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  }, "call$1", "Primitives_stringFromCodePoints$closure", 2, 0, 37, 56, "stringFromCodePoints"],
  Primitives_stringFromCharCodes: [function(charCodes) {
    var t1, i;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(charCodes, charCodes.length, 0, null), [H.getTypeArgumentByIndex(charCodes, 0)]); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i < 0)
        throw H.wrapException(new P.ArgumentError(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  }, "call$1", "Primitives_stringFromCharCodes$closure", 2, 0, 37, 57, "stringFromCharCodes"],
  Primitives_lazyAsJsDate: [function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  }, "call$1", "Primitives_lazyAsJsDate$closure", 2, 0, 0, 58, "lazyAsJsDate"],
  Primitives_getProperty: [function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  }, "call$2", "Primitives_getProperty$closure", 4, 0, 59, 1, 60, "getProperty"],
  Primitives_setProperty: [function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  }, "call$3", "Primitives_setProperty$closure", 6, 0, 61, 1, 60, 38, "setProperty"],
  Primitives_functionNoSuchMethod: [function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList, t2;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t2 = J.get$length$asx(positionalArguments);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.argumentCount_0 = 0 + t2;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + H.S(t1.argumentCount_0) + t1.names_1, 0, $arguments, namedArgumentList, null));
  }, "call$3", "Primitives_functionNoSuchMethod$closure", 6, 0, 62, 15, 63, 64, "functionNoSuchMethod"],
  Primitives_applyFunction: [function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = positionalArguments != null ? P.List_List$from(positionalArguments, true, null) : [];
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    if (positionalArguments != null) {
      t1 = J.get$length$asx(positionalArguments);
      if (typeof t1 !== "number")
        return H.iae(t1);
      argumentCount = 0 + t1;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    } else
      argumentCount = 0;
    jsFunction = $function["call$" + H.S(argumentCount)];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  }, "call$3", "Primitives_applyFunction$closure", 6, 0, 65, 15, 63, 64, "applyFunction"],
  iae: [function(argument) {
    throw H.wrapException(new P.ArgumentError(argument));
  }, "call$1", "iae$closure", 2, 0, 0, 66, "iae"],
  ioore: [function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  }, "call$2", "ioore$closure", 4, 0, 59, 58, 12, "ioore"],
  wrapException: [function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  }, "call$1", "wrapException$closure", 2, 0, 0, 67, "wrapException"],
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, 16, "toStringWrapper"],
  throwExpression: [function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  }, "call$1", "throwExpression$closure", 2, 0, 0, 67, "throwExpression"],
  unwrapException: [function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  }, "call$1", "unwrapException$closure", 2, 0, 0, 67, "unwrapException"],
  objectHashCode: [function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  }, "call$1", "objectHashCode$closure", 2, 0, 47, 1, "objectHashCode"],
  fillLiteralMap: [function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  }, "call$2", "fillLiteralMap$closure", 4, 0, 72, 73, 74, "fillLiteralMap"],
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, 75, 76, 14, 77, 78, 79, 80, 81, "invokeClosure"],
  convertDartClosureToJS: [function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  }, "call$2", "convertDartClosureToJS$closure", 4, 0, 82, 76, 83, "convertDartClosureToJS"],
  Closure_fromTearOff: [function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = $function;
    return $constructor;
  }, "call$6", "Closure_fromTearOff$closure", 12, 0, 84, 58, 85, 86, 87, 88, 89, "fromTearOff"],
  Closure_cspForwardCall: [function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n,S){return function(){return S(this)[n]()}}(stubName,getSelf);
      case 1:
        return function(n,S){return function(a){return S(this)[n](a)}}(stubName,getSelf);
      case 2:
        return function(n,S){return function(a,b){return S(this)[n](a,b)}}(stubName,getSelf);
      case 3:
        return function(n,S){return function(a,b,c){return S(this)[n](a,b,c)}}(stubName,getSelf);
      case 4:
        return function(n,S){return function(a,b,c,d){return S(this)[n](a,b,c,d)}}(stubName,getSelf);
      case 5:
        return function(n,S){return function(a,b,c,d,e){return S(this)[n](a,b,c,d,e)}}(stubName,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  }, "call$4", "Closure_cspForwardCall$closure", 8, 0, 90, 83, 91, 92, 15, "cspForwardCall"],
  Closure_forwardCallTo: [function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  }, "call$3", "Closure_forwardCallTo$closure", 6, 0, 93, 58, 15, 94, "forwardCallTo"],
  Closure_cspForwardInterceptedCall: [function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  }, "call$4", "Closure_cspForwardInterceptedCall$closure", 8, 0, 90, 83, 91, 40, 15, "cspForwardInterceptedCall"],
  Closure_forwardInterceptedCallTo: [function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  }, "call$2", "Closure_forwardInterceptedCallTo$closure", 4, 0, 59, 58, 15, "forwardInterceptedCallTo"],
  closureFromTearOff: [function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  }, "call$6", "closureFromTearOff$closure", 12, 0, 95, 58, 85, 86, 87, 88, 40, "closureFromTearOff"],
  throwCyclicInit: [function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  }, "call$1", "throwCyclicInit$closure", 2, 0, 99, 100, "throwCyclicInit"],
  buildFunctionType: [function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  }, "call$3", "buildFunctionType$closure", 6, 0, 102, 103, 104, 105, "buildFunctionType"],
  getDynamicRuntimeType: [function() {
    return C.C_DynamicRuntimeType;
  }, "call$0", "getDynamicRuntimeType$closure", 0, 0, 106, "getDynamicRuntimeType"],
  createRuntimeType: [function($name) {
    return new H.TypeImpl($name, null);
  }, "call$1", "createRuntimeType$closure", 2, 0, 107, 40, "createRuntimeType"],
  setRuntimeTypeInfo: [function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  }, "call$2", "setRuntimeTypeInfo$closure", 4, 0, 108, 109, 110, "setRuntimeTypeInfo"],
  getRuntimeTypeInfo: [function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  }, "call$1", "getRuntimeTypeInfo$closure", 2, 0, 111, 109, "getRuntimeTypeInfo"],
  getRuntimeTypeArguments: [function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  }, "call$2", "getRuntimeTypeArguments$closure", 4, 0, 59, 109, 112, "getRuntimeTypeArguments"],
  getRuntimeTypeArgument: [function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  }, "call$3", "getRuntimeTypeArgument$closure", 6, 0, 113, 109, 112, 12, "getRuntimeTypeArgument"],
  getTypeArgumentByIndex: [function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  }, "call$2", "getTypeArgumentByIndex$closure", 4, 0, 114, 109, 12, "getTypeArgumentByIndex"],
  runtimeTypeToString: [function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  }, "call$2$onTypeVariable", "runtimeTypeToString$closure", 2, 3, 115, 116, 117, 118, "runtimeTypeToString"],
  joinArguments: [function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  }, "call$3$onTypeVariable", "joinArguments$closure", 4, 3, 119, 116, 120, 121, 118, "joinArguments"],
  getRuntimeTypeString: [function(object) {
    var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  }, "call$1", "getRuntimeTypeString$closure", 2, 0, 37, 1, "getRuntimeTypeString"],
  substitute: [function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  }, "call$2", "substitute$closure", 4, 0, 59, 122, 43, "substitute"],
  areSubtypes: [function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  }, "call$2", "areSubtypes$closure", 4, 0, 35, 123, 124, "areSubtypes"],
  computeSignature: [function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  }, "call$3", "computeSignature$closure", 6, 0, 125, 126, 127, 128, "computeSignature"],
  isSubtype: [function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  }, "call$2", "isSubtype$closure", 4, 0, 35, 123, 124, "isSubtype"],
  areAssignable: [function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  }, "call$3", "areAssignable$closure", 6, 0, 129, 123, 124, 130, "areAssignable"],
  areAssignableMaps: [function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  }, "call$2", "areAssignableMaps$closure", 4, 0, 35, 123, 124, "areAssignableMaps"],
  isFunctionSubtype: [function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  }, "call$2", "isFunctionSubtype$closure", 4, 0, 35, 123, 124, "isFunctionSubtype"],
  invokeOn: [function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  }, "call$3", "invokeOn$closure", 6, 0, 131, 15, 58, 43, "invokeOn"],
  toStringForNativeObject: [function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  }, "call$1", "toStringForNativeObject$closure", 2, 0, 37, 132, "toStringForNativeObject"],
  hashCodeForNativeObject: [function(object) {
    return H.Primitives_objectHashCode(object);
  }, "call$1", "hashCodeForNativeObject$closure", 2, 0, 47, 1, "hashCodeForNativeObject"],
  defineProperty: [function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  }, "call$3", "defineProperty$closure", 6, 0, 133, 132, 134, 38, "defineProperty"],
  lookupAndCacheInterceptor: [function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  }, "call$1", "lookupAndCacheInterceptor$closure", 2, 0, 0, 132, "lookupAndCacheInterceptor"],
  patchInteriorProto: [function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  }, "call$2", "patchInteriorProto$closure", 4, 0, 59, 132, 3, "patchInteriorProto"],
  makeLeafDispatchRecord: [function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  }, "call$1", "makeLeafDispatchRecord$closure", 2, 0, 0, 3, "makeLeafDispatchRecord"],
  makeDefaultDispatchRecord: [function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  }, "call$3", "makeDefaultDispatchRecord$closure", 6, 0, 125, 135, 136, 4, "makeDefaultDispatchRecord"],
  initNativeDispatch: [function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  }, "call$0", "initNativeDispatch$closure", 0, 0, 137, "initNativeDispatch"],
  initNativeDispatchContinue: [function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  }, "call$0", "initNativeDispatchContinue$closure", 0, 0, 137, "initNativeDispatchContinue"],
  initHooks: [function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  }, "call$0", "initHooks$closure", 0, 0, 137, "initHooks"],
  applyHooksTransformer: [function(transformer, hooks) {
    return transformer(hooks) || hooks;
  }, "call$2", "applyHooksTransformer$closure", 4, 0, 59, 138, 139, "applyHooksTransformer"],
  stringContainsUnchecked: [function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  }, "call$3", "stringContainsUnchecked$closure", 6, 0, 125, 58, 140, 121, "stringContainsUnchecked"],
  stringReplaceAllUnchecked: [function(receiver, from, to) {
    var result, $length, i, t1;
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          t1 = result._contents + t1;
          result._contents = t1;
          result._contents = t1 + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  }, "call$3", "stringReplaceAllUnchecked$closure", 6, 0, 125, 58, 141, 142, "stringReplaceAllUnchecked"],
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName-,_internalName-,_kind-,_arguments-,_namedArgumentNames-,_namedIndices-",
    get$memberName: [function() {
      var $name, unmangledName, t1;
      $name = this.__js_helper$_memberName;
      if (!!J.getInterceptor($name).$isSymbol)
        return $name;
      unmangledName = $.get$mangledNames().$index(0, $name);
      if (unmangledName != null) {
        t1 = unmangledName.split(":");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        $name = t1[0];
      }
      t1 = new H.Symbol0($name);
      this.__js_helper$_memberName = t1;
      return t1;
    }, null, null, 1, 0, 470, "memberName"],
    get$isGetter: [function() {
      return J.$eq(this._kind, 1);
    }, null, null, 1, 0, 346, "isGetter"],
    get$isSetter: [function() {
      return J.$eq(this._kind, 2);
    }, null, null, 1, 0, 346, "isSetter"],
    get$positionalArguments: [function() {
      var t1, t2, argumentCount, list, index;
      if (J.$eq(this._kind, 1))
        return C.List_empty;
      t1 = this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = J.$sub$n(t2.get$length(t1), J.get$length$asx(this._namedArgumentNames));
      if (J.$eq(argumentCount, 0))
        return C.List_empty;
      list = [];
      if (typeof argumentCount !== "number")
        return H.iae(argumentCount);
      index = 0;
      for (; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    }, null, null, 1, 0, 471, "positionalArguments"],
    get$namedArguments: [function() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, t5, i;
      if (!J.$eq(this._kind, 0))
        return H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, null]);
      t1 = this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = J.$sub$n(t4.get$length(t3), namedArgumentCount);
      if (J.$eq(namedArgumentCount, 0))
        return H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, null]);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      if (typeof namedArgumentCount !== "number")
        return H.iae(namedArgumentCount);
      t5 = J.getInterceptor$ns(namedArgumentsStartIndex);
      i = 0;
      for (; i < namedArgumentCount; ++i)
        map.$indexSet(0, new H.Symbol0(t2.$index(t1, i)), t4.$index(t3, t5.$add(namedArgumentsStartIndex, i)));
      return map;
    }, null, null, 1, 0, 472, "namedArguments"],
    static: {"^": "JSInvocationMirror_METHOD-,JSInvocationMirror_GETTER-,JSInvocationMirror_SETTER-"}
  },
  "+JSInvocationMirror": 0,
  ReflectionInfo: {
    "^": "Object;jsFunction-,data-,isAccessor-,requiredParameterCount-,optionalParameterCount-,areOptionalParametersNamed-,functionType-,cachedSortedIndices-",
    parameterName$1: [function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    }, "call$1", "get$parameterName", 2, 0, 292, 473, "parameterName"],
    defaultValue$1: [function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    }, "call$1", "get$defaultValue", 2, 0, 342, 473, "defaultValue"],
    defaultValueInOrder$1: [function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    }, "call$1", "get$defaultValueInOrder", 2, 0, 342, 473, "defaultValueInOrder"],
    parameterNameInOrder$1: [function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    }, "call$1", "get$parameterNameInOrder", 2, 0, 292, 473, "parameterNameInOrder"],
    sortedIndex$1: [function(unsortedIndex) {
      var t1, t2, positions, t3, i, index, compare;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, J.JSInt]);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys();
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        compare = P.Comparable_compare$closure();
        H.Sort__doSort(t2, 0, t2.length - 1, compare);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    }, "call$1", "get$sortedIndex", 2, 0, 342, 474, "sortedIndex"],
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO-,ReflectionInfo_OPTIONAL_PARAMETERS_INFO-,ReflectionInfo_FUNCTION_TYPE_INDEX-,ReflectionInfo_FIRST_DEFAULT_ARGUMENT-", ReflectionInfo_ReflectionInfo: [function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }, "call$1", null, 2, 0, 45, 46, "new ReflectionInfo"]}
  },
  "+ReflectionInfo": 0,
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:48;box_0-,this_1-,positions_2-",
    call$1: [function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0;
      t3 = t2.index_0;
      t2.index_0 = t3 + 1;
      t2 = this.positions_2.$index(0, $name);
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      t1[t3] = t2;
    }, "call$1", null, 2, 0, 48, 40, "call"],
    $isFunction: true
  },
  "+ ReflectionInfo_sortedIndex_closure": 0,
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:69;box_0-,arguments_1-,namedArgumentList_2-",
    call$2: [function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      t1.argumentCount_0 = t1.argumentCount_0 + 1;
    }, "call$2", null, 4, 0, 69, 40, 66, "call"],
    $isFunction: true
  },
  "+ Primitives_functionNoSuchMethod_closure": 0,
  Primitives_applyFunction_closure: {
    "^": "Closure:69;box_0-,defaultArguments_1-",
    call$2: [function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    }, "call$2", null, 4, 0, 69, 473, 38, "call"],
    $isFunction: true
  },
  "+ Primitives_applyFunction_closure": 0,
  TypeErrorDecoder: {
    "^": "Object;_pattern-,_arguments-,_argumentsExpr-,_expr-,_method-,_receiver-",
    matchTypeError$1: [function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }, "call$1", "get$matchTypeError", 2, 0, 0, 26, "matchTypeError"],
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern-,TypeErrorDecoder_notClosurePattern-,TypeErrorDecoder_nullCallPattern-,TypeErrorDecoder_nullLiteralCallPattern-,TypeErrorDecoder_undefinedCallPattern-,TypeErrorDecoder_undefinedLiteralCallPattern-,TypeErrorDecoder_nullPropertyPattern-,TypeErrorDecoder_nullLiteralPropertyPattern-,TypeErrorDecoder_undefinedPropertyPattern-,TypeErrorDecoder_undefinedLiteralPropertyPattern-", TypeErrorDecoder_extractPattern: [function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, "call$1", "TypeErrorDecoder_extractPattern$closure", 2, 0, 48, 26, "extractPattern"], TypeErrorDecoder_provokeCallErrorOn: [function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, "call$1", "TypeErrorDecoder_provokeCallErrorOn$closure", 2, 0, 37, 68, "provokeCallErrorOn"], TypeErrorDecoder_provokePropertyErrorOn: [function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }, "call$1", "TypeErrorDecoder_provokePropertyErrorOn$closure", 2, 0, 37, 68, "provokePropertyErrorOn"]}
  },
  "+TypeErrorDecoder": 0,
  NullError: {
    "^": "Error;_message-,_method-",
    toString$0: [function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isError: true
  },
  "+NullError": 0,
  JsNoSuchMethodError: {
    "^": "Error;_message-,_method-,_receiver-",
    toString$0: [function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isError: true,
    static: {JsNoSuchMethodError$: [function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }, null, null, 4, 0, 69, 70, 71, "new JsNoSuchMethodError"]}
  },
  "+JsNoSuchMethodError": 0,
  UnknownJsTypeError: {
    "^": "Error;_message-",
    toString$0: [function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }, "call$0", "get$toString", 0, 0, 20, "toString"]
  },
  "+UnknownJsTypeError": 0,
  unwrapException_saveStackTrace: {
    "^": "Closure:0;ex_0-",
    call$1: [function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }, "call$1", null, 2, 0, 0, 246, "call"],
    $isFunction: true
  },
  "+ unwrapException_saveStackTrace": 0,
  _StackTrace: {
    "^": "Object;_exception-,_trace-",
    toString$0: [function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }, "call$0", "get$toString", 0, 0, 20, "toString"]
  },
  "+_StackTrace": 0,
  invokeClosure_closure: {
    "^": "Closure:16;closure_0-",
    call$0: [function() {
      return this.closure_0.call$0();
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ invokeClosure_closure": 0,
  invokeClosure_closure0: {
    "^": "Closure:16;closure_1-,arg1_2-",
    call$0: [function() {
      return this.closure_1.call$1(this.arg1_2);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ invokeClosure_closure0": 0,
  invokeClosure_closure1: {
    "^": "Closure:16;closure_3-,arg1_4-,arg2_5-",
    call$0: [function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ invokeClosure_closure1": 0,
  invokeClosure_closure2: {
    "^": "Closure:16;closure_6-,arg1_7-,arg2_8-,arg3_9-",
    call$0: [function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ invokeClosure_closure2": 0,
  invokeClosure_closure3: {
    "^": "Closure:16;closure_10-,arg1_11-,arg2_12-,arg3_13-,arg4_14-",
    call$0: [function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ invokeClosure_closure3": 0,
  Closure: {
    "^": "Object;",
    toString$0: [function(_) {
      return "Closure";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isFunction: true
  },
  "+Closure": 0,
  TearOffClosure: {
    "^": "Closure;"
  },
  "+TearOffClosure": 0,
  BoundClosure: {
    "^": "TearOffClosure;_self-,__js_helper$_target-,_receiver-,__js_helper$_name-",
    $eq: [function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this.__js_helper$_target));
    }, null, null, 1, 0, 394, "hashCode"],
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache-,BoundClosure_receiverFieldNameCache-", BoundClosure_selfOf: [function(closure) {
        return closure._self;
      }, "call$1", "BoundClosure_selfOf$closure", 2, 0, 96, 76, "selfOf"], BoundClosure_receiverOf: [function(closure) {
        return closure._receiver;
      }, "call$1", "BoundClosure_receiverOf$closure", 2, 0, 96, 76, "receiverOf"], BoundClosure_selfFieldName: [function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, "call$0", "BoundClosure_selfFieldName$closure", 0, 0, 20, "selfFieldName"], BoundClosure_computeFieldNamed: [function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }, "call$1", "BoundClosure_computeFieldNamed$closure", 2, 0, 97, 98, "computeFieldNamed"]}
  },
  "+BoundClosure": 0,
  RuntimeError: {
    "^": "Error;message-",
    toString$0: [function(_) {
      return "RuntimeError: " + H.S(this.message);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {RuntimeError$: [function(message) {
        return new H.RuntimeError(message);
      }, null, null, 2, 0, 0, 26, "new RuntimeError"]}
  },
  "+RuntimeError": 0,
  RuntimeType: {
    "^": "Object;"
  },
  "+RuntimeType": 0,
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType-,parameterTypes-,optionalParameterTypes-,namedParameters-",
    _isTest$1: [function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    }, "call$1", "get$_isTest", 2, 0, 30, 68, "_isTest"],
    _extractFunctionTypeObjectFrom$1: [function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    }, "call$1", "get$_extractFunctionTypeObjectFrom", 2, 0, 0, 337, "_extractFunctionTypeObjectFrom"],
    toRti$0: [function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    }, "call$0", "get$toRti", 0, 0, 16, "toRti"],
    toString$0: [function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {"^": "RuntimeFunctionType_inAssert-", RuntimeFunctionType_listToRti: [function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }, "call$1", "RuntimeFunctionType_listToRti$closure", 2, 0, 0, 101, "listToRti"]}
  },
  "+RuntimeFunctionType": 0,
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: [function(_) {
      return "dynamic";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    toRti$0: [function() {
      return;
    }, "call$0", "get$toRti", 0, 0, 16, "toRti"],
    $isDynamicRuntimeType: true
  },
  "+DynamicRuntimeType": 0,
  TypeImpl: {
    "^": "Object;_typeName-,_unmangledName-",
    toString$0: [function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$hashCode: [function(_) {
      return J.get$hashCode$(this._typeName);
    }, null, null, 1, 0, 394, "hashCode"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    $isTypeImpl: true
  },
  "+TypeImpl": 0,
  initHooks_closure: {
    "^": "Closure:0;getTag_0-",
    call$1: [function(o) {
      return this.getTag_0(o);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ initHooks_closure": 0,
  initHooks_closure0: {
    "^": "Closure:475;getUnknownTag_1-",
    call$2: [function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }, "call$2", null, 4, 0, 475, 337, 135, "call"],
    $isFunction: true
  },
  "+ initHooks_closure0": 0,
  initHooks_closure1: {
    "^": "Closure:48;prototypeForTag_2-",
    call$1: [function(tag) {
      return this.prototypeForTag_2(tag);
    }, "call$1", null, 2, 0, 48, 135, "call"],
    $isFunction: true
  },
  "+ initHooks_closure1": 0,
  StringMatch: {
    "^": "Object;start>-,input-,pattern-",
    get$end: [function() {
      return this.start + this.pattern.length;
    }, null, null, 1, 0, 394, "end"],
    $index: [function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    }, "call$1", "get$[]", 2, 0, 292, 476, "[]"]
  },
  "+StringMatch": 0
}],
["coloph", "../lib/colophLib.dart", , S, {
  "^": "",
  distance2D: [function(firstPoint, secondPoint) {
    var t1, t2, t3;
    t1 = J.getInterceptor$x(secondPoint);
    t2 = J.getInterceptor$x(firstPoint);
    t3 = J.$sub$n(t1.get$x(secondPoint), t2.get$x(firstPoint));
    if (typeof t3 !== "number")
      H.throwExpression(new P.ArgumentError(t3));
    t3 = Math.pow(t3, 2);
    t2 = J.$sub$n(t1.get$y(secondPoint), t2.get$y(firstPoint));
    if (typeof t2 !== "number")
      H.throwExpression(new P.ArgumentError(t2));
    t1 = Math.pow(t2, 2);
    return Math.sqrt(t3 + t1);
  }, "call$2", "distance2D$closure", 4, 0, 143, 144, 145, "distance2D"],
  segmentLine: [function(startPoint, endPoint, numberOfSegments) {
    var segmentedPoints, t1, t2, t3, distancex, t4, distancey, i, relativeDistanceX, relativeDistanceY, p;
    segmentedPoints = H.setRuntimeTypeInfo([], [P.Point]);
    t1 = endPoint.x;
    t2 = startPoint.x;
    t3 = numberOfSegments + 1;
    distancex = J.abs$0$n(J.$div$n(J.$sub$n(t1, t2), t3));
    t1 = endPoint.y;
    t4 = startPoint.y;
    distancey = J.abs$0$n(J.$div$n(J.$sub$n(t1, t4), t3));
    for (t1 = J.getInterceptor$ns(distancex), t3 = J.getInterceptor$ns(distancey), i = 0; i < numberOfSegments;) {
      ++i;
      relativeDistanceX = t1.$mul(distancex, i);
      relativeDistanceY = t3.$mul(distancey, i);
      p = new P.Point(J.$add$ns(t2, relativeDistanceX), J.$add$ns(t4, relativeDistanceY));
      p.$builtinTypeInfo = [null];
      segmentedPoints.push(p);
    }
    return segmentedPoints;
  }, "call$3", "segmentLine$closure", 6, 0, 146, 147, 148, 149, "segmentLine"],
  calculateMiddlePoint: [function(lineStartPoint, lineEndPoint) {
    var t1, t2;
    t1 = J.getInterceptor$x(lineStartPoint);
    t2 = J.getInterceptor$x(lineEndPoint);
    return H.setRuntimeTypeInfo(new P.Point(J.$div$n(J.$add$ns(t1.get$x(lineStartPoint), t2.get$x(lineEndPoint)), 2), J.$div$n(J.$add$ns(t1.get$y(lineStartPoint), t2.get$y(lineEndPoint)), 2)), [null]);
  }, "call$2", "calculateMiddlePoint$closure", 4, 0, 150, 151, 152, "calculateMiddlePoint"],
  BaseCanvasModel: {
    "^": "BaseModel;x*-,y*-,width*-,height*-",
    height$0: function($receiver) {
      return this.height.call$0();
    },
    updateLocation$1: [function(newLocation) {
      this.x = newLocation.x;
      this.y = newLocation.y;
      this.updateCentralBorderPoints$0();
    }, "call$1", "get$updateLocation", 2, 0, 477, 478, "updateLocation"],
    updateCentralBorderPoints$0: [function() {
      var borderPoints, t1;
      borderPoints = H.setRuntimeTypeInfo([], [S.BorderPoint]);
      t1 = new S.BorderPoint(null, null);
      t1.point = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, J.$div$n(this.width, 2)), this.y), [null]);
      t1.borderCode = "NORTH";
      borderPoints.push(t1);
      t1 = new S.BorderPoint(null, null);
      t1.point = H.setRuntimeTypeInfo(new P.Point(this.x, J.$add$ns(this.y, J.$div$n(this.height, 2))), [null]);
      t1.borderCode = "WEST";
      borderPoints.push(t1);
      t1 = new S.BorderPoint(null, null);
      t1.point = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, this.width), J.$add$ns(this.y, J.$div$n(this.height, 2))), [null]);
      t1.borderCode = "EAST";
      borderPoints.push(t1);
      t1 = new S.BorderPoint(null, null);
      t1.point = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, J.$div$n(this.width, 2)), J.$add$ns(this.y, this.height)), [null]);
      t1.borderCode = "SOUTH";
      borderPoints.push(t1);
      this.centralBorderPoints = borderPoints;
    }, "call$0", "get$updateCentralBorderPoints", 0, 0, 137, "updateCentralBorderPoints"],
    getConnectionPointsFromBorder$1: [function(borderCode) {
      var conectionPointsOfBorder, t1, bp;
      conectionPointsOfBorder = [];
      for (t1 = this.borderConnectionPoints, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        bp = t1._current;
        if (J.$eq(bp.get$borderCode(), borderCode))
          conectionPointsOfBorder.push(bp);
      }
      return conectionPointsOfBorder;
    }, "call$1", "get$getConnectionPointsFromBorder", 2, 0, 479, 480, "getConnectionPointsFromBorder"],
    generateBorderSegments$0: [function() {
      var t1, numNorthPoints, numSouthPoints, numEastPoints, numWestPoints;
      this.borderConnectionPoints = [];
      for (t1 = this.borderUtilization, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), numNorthPoints = 0, numSouthPoints = 0, numEastPoints = 0, numWestPoints = 0; t1.moveNext$0();)
        switch (t1._current) {
          case "NORTH":
            ++numNorthPoints;
            break;
          case "SOUTH":
            ++numSouthPoints;
            break;
          case "WEST":
            ++numWestPoints;
            break;
          case "EAST":
            ++numEastPoints;
            break;
        }
      if (numNorthPoints !== 0)
        J.addAll$1$ax(this.borderConnectionPoints, this._getSegmentedBorderPoints$2("NORTH", numNorthPoints));
      if (numSouthPoints !== 0)
        J.addAll$1$ax(this.borderConnectionPoints, this._getSegmentedBorderPoints$2("SOUTH", numSouthPoints));
      if (numWestPoints !== 0)
        J.addAll$1$ax(this.borderConnectionPoints, this._getSegmentedBorderPoints$2("WEST", numWestPoints));
      if (numEastPoints !== 0)
        J.addAll$1$ax(this.borderConnectionPoints, this._getSegmentedBorderPoints$2("EAST", numEastPoints));
      this.borderUtilization = [];
    }, "call$0", "get$generateBorderSegments", 0, 0, 137, "generateBorderSegments"],
    getCentralBorderPoints$0: [function() {
      return this.centralBorderPoints;
    }, "call$0", "get$getCentralBorderPoints", 0, 0, 481, "getCentralBorderPoints"],
    addBorderUtilization$1: [function(borderCode) {
      this.borderUtilization.push(borderCode);
    }, "call$1", "get$addBorderUtilization", 2, 0, 99, 480, "addBorderUtilization"],
    _getSegmentedBorderPoints$2: [function(borderCode, numberOfSegments) {
      var splitedBorderPoints, startBorderPoint, endBorderPoint, segmentedPoints, t1, t2;
      if (numberOfSegments < 1)
        return;
      splitedBorderPoints = [];
      switch (borderCode) {
        case "NORTH":
          startBorderPoint = H.setRuntimeTypeInfo(new P.Point(this.x, this.y), [null]);
          endBorderPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, this.width), this.y), [null]);
          break;
        case "SOUTH":
          startBorderPoint = H.setRuntimeTypeInfo(new P.Point(this.x, J.$add$ns(this.y, this.height)), [null]);
          endBorderPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, this.width), J.$add$ns(this.y, this.height)), [null]);
          break;
        case "WEST":
          startBorderPoint = H.setRuntimeTypeInfo(new P.Point(this.x, this.y), [null]);
          endBorderPoint = H.setRuntimeTypeInfo(new P.Point(this.x, J.$add$ns(this.y, this.height)), [null]);
          break;
        case "EAST":
          startBorderPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, this.width), this.y), [null]);
          endBorderPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.x, this.width), J.$add$ns(this.y, this.height)), [null]);
          break;
        default:
          startBorderPoint = null;
          endBorderPoint = null;
      }
      segmentedPoints = S.segmentLine(startBorderPoint, endBorderPoint, numberOfSegments);
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(segmentedPoints, segmentedPoints.length, 0, null), [H.getTypeArgumentByIndex(segmentedPoints, 0)]); t1.moveNext$0();) {
        t2 = new S.BorderPoint(null, null);
        t2.point = t1._current;
        t2.borderCode = borderCode;
        splitedBorderPoints.push(t2);
      }
      return splitedBorderPoints;
    }, "call$2", "get$_getSegmentedBorderPoints", 4, 0, 482, 480, 149, "_getSegmentedBorderPoints"],
    intersectsBaseCanvasModel$1: [function(other) {
      var t1 = J.getInterceptor$x(other);
      return J.$le$n(this.x, J.$add$ns(t1.get$x(other), t1.get$width(other))) === true && J.$le$n(t1.get$x(other), J.$add$ns(this.x, this.width)) === true && J.$le$n(this.y, J.$add$ns(t1.get$y(other), t1.get$height(other))) === true && J.$le$n(t1.get$y(other), J.$add$ns(this.y, this.height)) === true;
    }, "call$1", "get$intersectsBaseCanvasModel", 2, 0, 483, 140, "intersectsBaseCanvasModel"],
    areThereFieldsWithDuplicatedNames$0: [function() {
      var t1, fieldA, t2, t3, fieldB;
      for (t1 = J.get$iterator$ax(this.getFields$0()); t1.moveNext$0() === true;) {
        fieldA = t1.get$current();
        for (t2 = J.get$iterator$ax(this.getFields$0()), t3 = J.getInterceptor(fieldA); t2.moveNext$0() === true;) {
          fieldB = t2.get$current();
          if (!t3.$eq(fieldA, fieldB))
            if (J.$eq(t3.get$name(fieldA), J.get$name$x(fieldB)))
              return true;
        }
      }
    }, "call$0", "get$areThereFieldsWithDuplicatedNames", 0, 0, 346, "areThereFieldsWithDuplicatedNames"],
    mapFields$1: [function(oldModel) {
      var mappedFields, t1, baseField, t2, t3, oldTableField;
      mappedFields = H.setRuntimeTypeInfo([], [P.Map]);
      for (t1 = J.get$iterator$ax(this.getFields$0()); t1.moveNext$0() === true;) {
        baseField = t1.get$current();
        if (J.$eq(J.get$value$x(baseField.get$foreignKey()), true))
          continue;
        t2 = oldModel == null;
        if (t2)
          mappedFields.push(baseField.toMap$0());
        if (!t2) {
          t2 = J.getInterceptor$x(baseField);
          if (oldModel.hasField$1(t2.get$name(baseField)) === true)
            for (t3 = J.get$iterator$ax(oldModel.getFields$0()); t3.moveNext$0() === true;) {
              oldTableField = t3.get$current();
              if (J.$eq(J.get$name$x(oldTableField), t2.get$name(baseField)))
                mappedFields.push(baseField.toMap$2(false, oldTableField));
            }
          else {
            t2.set$id(baseField, null);
            mappedFields.push(baseField.toMap$0());
          }
        }
      }
      if (oldModel != null)
        for (t1 = J.get$iterator$ax(oldModel.getFields$0()); t1.moveNext$0() === true;) {
          oldTableField = t1.get$current();
          if (!this.hasField$1(J.get$name$x(oldTableField)))
            mappedFields.push(oldTableField.toMap$1(true));
        }
      return mappedFields;
    }, "call$1", "get$mapFields", 0, 2, 484, 116, 485, "mapFields"],
    hasField$1: [function($name) {
      var t1;
      for (t1 = J.get$iterator$ax(this.getFields$0()); t1.moveNext$0() === true;)
        if (J.$eq(J.get$name$x(t1.get$current()), $name))
          return true;
      return false;
    }, "call$1", "get$hasField", 2, 0, 432, 40, "hasField"],
    isPositionEmpty$0: [function() {
      if (J.$eq(this.x, 0) && J.$eq(this.y, 0) && J.$eq(this.width, 0) && J.$eq(this.height, 0))
        return true;
      else
        return false;
    }, "call$0", "get$isPositionEmpty", 0, 0, 346, "isPositionEmpty"],
    BaseCanvasModel$3: [function(diagramId, x, y) {
      this.diagramId = diagramId;
      this.x = x;
      this.y = y;
      this.width = 0;
      this.height = 0;
      this.centralBorderPoints = [];
      this.updateCentralBorderPoints$0();
      this.borderUtilization = [];
    }, null, null, 6, 0, 486, 175, 31, 193, ""]
  },
  "+BaseCanvasModel": 0,
  BaseCanvasModelController: {
    "^": "BaseController;borderInteractionController<-",
    updateCanvasModel$2: [function(oldModel, newModel) {
      var t1, newBaseField, t2, t3, oldBaseField, t4, newSubField, t5, t6, oldSubField, t7, oldSubBaseField, newSubBaseField;
      for (t1 = J.get$iterator$ax(newModel.getFields$0()); t1.moveNext$0() === true;) {
        newBaseField = t1.get$current();
        for (t2 = J.get$iterator$ax(oldModel.getFields$0()), t3 = J.getInterceptor$x(newBaseField); t2.moveNext$0() === true;) {
          oldBaseField = t2.get$current();
          t4 = J.getInterceptor$x(oldBaseField);
          if (J.$eq(t3.get$name(newBaseField), t4.get$name(oldBaseField))) {
            t3.set$x(newBaseField, t4.get$x(oldBaseField));
            t3.set$y(newBaseField, t4.get$y(oldBaseField));
            t3.set$width(newBaseField, t4.get$width(oldBaseField));
            t3.set$height(newBaseField, t4.get$height(oldBaseField));
            newBaseField.set$foreignKey(oldBaseField.get$foreignKey());
            for (t4 = J.get$iterator$ax(newBaseField.getFields$0()); t4.moveNext$0() === true;) {
              newSubField = t4.get$current();
              for (t5 = J.get$iterator$ax(oldBaseField.getFields$0()), t6 = J.getInterceptor$x(newSubField); t5.moveNext$0() === true;) {
                oldSubField = t5.get$current();
                t7 = J.getInterceptor$x(oldSubField);
                if (J.$eq(t6.get$name(newSubField), t7.get$name(oldSubField))) {
                  t6.set$x(newSubField, t7.get$x(oldSubField));
                  t6.set$y(newSubField, t7.get$y(oldSubField));
                  t6.set$width(newSubField, t7.get$width(oldSubField));
                  t6.set$height(newSubField, t7.get$height(oldSubField));
                  newSubField.set$foreignKey(oldSubField.get$foreignKey());
                }
              }
            }
          }
        }
      }
      for (t1 = J.get$iterator$ax(oldModel.getFields$0()); t1.moveNext$0() === true;) {
        oldBaseField = t1.get$current();
        this.borderInteractionController.deleteCanvasModel$1(oldBaseField);
        for (t2 = J.get$iterator$ax(oldBaseField.getFields$0()); t2.moveNext$0() === true;) {
          oldSubBaseField = t2.get$current();
          this.borderInteractionController.deleteCanvasModel$1(oldSubBaseField);
        }
      }
      for (t1 = J.get$iterator$ax(newModel.getFields$0()); t1.moveNext$0() === true;) {
        newBaseField = t1.get$current();
        if (!!J.getInterceptor(newBaseField).$isTableField)
          if (newBaseField.isForeignKey$0())
            continue;
        this.borderInteractionController.canvasModels.push(newBaseField);
        for (t2 = J.get$iterator$ax(newBaseField.getFields$0()); t2.moveNext$0() === true;) {
          newSubBaseField = t2.get$current();
          this.borderInteractionController.canvasModels.push(newSubBaseField);
        }
      }
      this.borderInteractionController.updateCanvasModel$2(oldModel, newModel);
    }, "call$2", "get$updateCanvasModel", 4, 0, 487, 485, 488, "updateCanvasModel"],
    _mapFieldsIds$4: [function(baseCanvasModel, bceMap, baseAttributes, subBaseAttributes) {
      var t1, baseFieldMap, t2, t3, baseField, t4, subBaseFieldMaps, subBaseMap, t5, t6, subBaseField, t7;
      baseCanvasModel.getFields$0();
      for (t1 = J.get$iterator$ax(J.$index$asx(bceMap, baseAttributes)); t1.moveNext$0() === true;) {
        baseFieldMap = t1.get$current();
        for (t2 = J.get$iterator$ax(baseCanvasModel.getFields$0()), t3 = J.getInterceptor$asx(baseFieldMap); t2.moveNext$0() === true;) {
          baseField = t2.get$current();
          t4 = J.getInterceptor$x(baseField);
          if (J.$eq(t4.get$name(baseField), t3.$index(baseFieldMap, "name"))) {
            t4.set$id(baseField, t3.$index(baseFieldMap, "id"));
            subBaseFieldMaps = t3.$index(baseFieldMap, subBaseAttributes);
            if (subBaseFieldMaps != null)
              for (t4 = J.get$iterator$ax(subBaseFieldMaps); t4.moveNext$0() === true;) {
                subBaseMap = t4.get$current();
                for (t5 = J.get$iterator$ax(baseField.getFields$0()), t6 = J.getInterceptor$asx(subBaseMap); t5.moveNext$0() === true;) {
                  subBaseField = t5.get$current();
                  t7 = J.getInterceptor$x(subBaseField);
                  if (J.$eq(t7.get$name(subBaseField), t6.$index(subBaseMap, "name")))
                    t7.set$id(subBaseField, t6.$index(subBaseMap, "id"));
                }
              }
            continue;
          }
        }
      }
    }, "call$4", "get$_mapFieldsIds", 8, 0, 489, 159, 490, 491, 492, "_mapFieldsIds"],
    _getParentModel$2: [function(baseCanvasModel, viewModel) {
      var t1, bf, t2;
      if (J.$eq(baseCanvasModel, viewModel))
        return viewModel;
      for (t1 = J.get$iterator$ax(viewModel.getFields$0()); t1.moveNext$0() === true;) {
        bf = t1.get$current();
        if (J.$eq(bf, baseCanvasModel))
          return viewModel;
        for (t2 = J.get$iterator$ax(bf.getFields$0()); t2.moveNext$0() === true;)
          if (J.$eq(t2.get$current(), baseCanvasModel))
            return viewModel;
      }
    }, "call$2", "get$_getParentModel", 4, 0, 493, 159, 494, "_getParentModel"]
  },
  "+BaseCanvasModelController": 0,
  BaseController: {
    "^": "Object;",
    setControllerFactory$1: [function(controllerFactory) {
      this.controllerFactory = controllerFactory;
    }, "call$1", "get$setControllerFactory", 2, 0, 495, 496, "setControllerFactory"]
  },
  "+BaseController": 0,
  BaseField: {
    "^": "BaseCanvasModel;name*-,dataType@-,primaryKey@-,foreignKey@-,nulls<-,composite<-,multivalued<-,derived<-,baseSubFields<-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    toJson$0: [function() {
    }, "call$0", "get$toJson", 0, 0, 16, "toJson"],
    getFields$0: [function() {
      return this.baseSubFields;
    }, "call$0", "get$getFields", 0, 0, 497, "getFields"],
    hasAPosition$0: [function() {
      if (J.$eq(this.x, 0) && J.$eq(this.y, 0) && J.$eq(this.width, 0) && J.$eq(this.height, 0))
        return false;
      else
        return true;
    }, "call$0", "get$hasAPosition", 0, 0, 346, "hasAPosition"],
    toMap$2: [function(destroy, oldBaseField) {
    }, function() {
      return this.toMap$2(null, null);
    }, "toMap$0", function(destroy) {
      return this.toMap$2(destroy, null);
    }, "toMap$1", "call$2", null, null, "get$toMap", 0, 4, 498, 116, 116, 499, 500, "toMap"],
    BaseField$dummy$0: [function() {
      this.name = "";
      this.primaryKey = false;
      var t1 = new S.ForeignKey(null, null);
      t1.value = false;
      t1.foreignTableId = -1;
      this.foreignKey = t1;
      this.nulls = false;
      this.composite = false;
      this.multivalued = false;
      this.derived = false;
      this.baseSubFields = [];
    }, null, null, 0, 0, 16, "dummy"],
    static: {BaseField$dummy: [function() {
        var t1 = new S.BaseField(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.BaseField$dummy$0();
        return t1;
      }, null, null, 0, 0, 16, "new BaseField$dummy"]}
  },
  "+BaseField": 0,
  BaseModal: {
    "^": "Object;type'-",
    showModal$0: [function(_) {
      var t1, t2, t3, t4;
      t1 = window.pageYOffset;
      t2 = $.get$context();
      t3 = t2._jsObject;
      t4 = J.$div$n(J.height$0$x(Q._deserialize(J.$index$asx(t3, "jQuery"), t2).call$1(this._modalId)), 2);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      J.css$2$x(Q._deserialize(J.$index$asx(t3, "jQuery"), t2).call$1(this._modalId), "margin-top", t1 - t4);
      Q._deserialize(J.$index$asx(t3, "jQuery"), t2).call$1(this._modalId).modal$1("show");
    }, "call$0", "get$showModal", 0, 0, 137, "showModal"],
    waitForValidationInstance$2: [function(submitButtonId, validating) {
      var submitButton, t1, submitIcon, t2;
      submitButton = document.querySelector(submitButtonId);
      t1 = submitButtonId + "_icon";
      submitIcon = document.querySelector(t1);
      document.querySelector("#canvas");
      t1 = J.getInterceptor$x(submitButton);
      t2 = J.getInterceptor$x(submitIcon);
      if (validating) {
        t1.set$disabled(submitButton, true);
        t2.get$classes(submitIcon).remove$1(0, "icon-ok");
        t2.get$classes(submitIcon).add$1(0, "fa");
        t2.get$classes(submitIcon).add$1(0, "fa-spinner");
        t2.get$classes(submitIcon).add$1(0, "fa-spin");
        J.set$cursor$x(document.body.style, "wait");
      } else {
        t1.set$disabled(submitButton, false);
        t2.get$classes(submitIcon).remove$1(0, "fa");
        t2.get$classes(submitIcon).remove$1(0, "fa-spinner");
        t2.get$classes(submitIcon).remove$1(0, "fa-spin");
        t2.get$classes(submitIcon).add$1(0, "icon-ok");
        J.set$cursor$x(document.body.style, "default");
      }
    }, "call$2", "get$waitForValidationInstance", 4, 0, 501, 502, 503, "waitForValidationInstance"],
    _mapOldPositions$2: [function(newModel, oldModel) {
      var t1, oldBaseField, t2, t3, baseField, t4, oldBaseSubField, t5, t6, baseSubField, t7;
      for (t1 = J.get$iterator$ax(oldModel.getFields$0()); t1.moveNext$0() === true;) {
        oldBaseField = t1.get$current();
        for (t2 = J.get$iterator$ax(newModel.getFields$0()), t3 = J.getInterceptor$x(oldBaseField); t2.moveNext$0() === true;) {
          baseField = t2.get$current();
          t4 = J.getInterceptor$x(baseField);
          if (J.$eq(t4.get$name(baseField), t3.get$name(oldBaseField))) {
            t4.set$x(baseField, t3.get$x(oldBaseField));
            t4.set$y(baseField, t3.get$y(oldBaseField));
          }
          for (t4 = J.get$iterator$ax(oldBaseField.getFields$0()); t4.moveNext$0() === true;) {
            oldBaseSubField = t4.get$current();
            for (t5 = J.get$iterator$ax(baseField.getFields$0()), t6 = J.getInterceptor$x(oldBaseSubField); t5.moveNext$0() === true;) {
              baseSubField = t5.get$current();
              t7 = J.getInterceptor$x(baseSubField);
              if (J.$eq(t7.get$name(baseSubField), t6.get$name(oldBaseSubField))) {
                t7.set$x(baseSubField, t6.get$x(oldBaseSubField));
                t7.set$y(baseSubField, t6.get$y(oldBaseSubField));
              }
            }
          }
        }
      }
    }, "call$2", "get$_mapOldPositions", 4, 0, 504, 488, 485, "_mapOldPositions"]
  },
  "+BaseModal": 0,
  BaseModel: {
    "^": "Object;id*-"
  },
  "+BaseModel": 0,
  BaseView: {
    "^": "Object;toggled?-"
  },
  "+BaseView": 0,
  BorderConnection: {
    "^": "Object;canvasModelA@-,canvasModelB@-,borderCodeA<-,borderCodeB<-,borderPointA<-,borderPointB<-,angle<-,specialRelation@-,enforcedOppositeBorderForModelA<-,pointsUpdatedController-",
    setBorderCodes$2: [function(borderCodeA, borderCodeB) {
      this.borderCodeA = borderCodeA;
      this.borderCodeB = borderCodeB;
    }, "call$2", "get$setBorderCodes", 4, 0, 387, 505, 506, "setBorderCodes"],
    setRelationshipPointsAndAngle$3: [function(borderPointA, borderPointB, angle) {
      this.borderPointA = borderPointA;
      this.borderPointB = borderPointB;
      this.angle = angle;
    }, "call$3", "get$setRelationshipPointsAndAngle", 6, 0, 507, 508, 509, 510, "setRelationshipPointsAndAngle"],
    clearBorderPointsAndAngle$0: [function() {
      this.borderPointB = null;
      this.borderPointA = null;
      this.angle = null;
    }, "call$0", "get$clearBorderPointsAndAngle", 0, 0, 137, "clearBorderPointsAndAngle"],
    areBorderPointsDefined$0: [function() {
      if (this.angle != null && this.borderPointA != null && this.borderPointB != null)
        return true;
      else
        return false;
    }, "call$0", "get$areBorderPointsDefined", 0, 0, 346, "areBorderPointsDefined"],
    forceOppositeBorderForModelA$0: [function() {
      this.enforcedOppositeBorderForModelA = true;
    }, "call$0", "get$forceOppositeBorderForModelA", 0, 0, 137, "forceOppositeBorderForModelA"],
    triggerPointsUpdated$0: [function() {
      var t1, t2;
      t1 = this.pointsUpdatedController;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t2 = t1._state;
      if ((t2 & 1) !== 0)
        t1._sendData$1("Points_updated");
      else if ((t2 & 3) === 0)
        t1._ensurePendingEvents$0().add$1(0, H.setRuntimeTypeInfo(new P._DelayedData("Points_updated", null), [H.getRuntimeTypeArgument(t1, "_StreamController", 0)]));
    }, "call$0", "get$triggerPointsUpdated", 0, 0, 137, "triggerPointsUpdated"],
    get$pointsUpdated: [function() {
      return H.setRuntimeTypeInfo(new P._ControllerStream(this.pointsUpdatedController), [null]);
    }, null, null, 1, 0, 511, "pointsUpdated"],
    BorderConnection$2: [function(canvasModelA, canvasModelB) {
      this.canvasModelA = canvasModelA;
      this.canvasModelB = canvasModelB;
      this.specialRelation = false;
      this.pointsUpdatedController = P.StreamController_StreamController(null, null, null, null, false, null);
    }, null, null, 4, 0, 504, 512, 513, ""],
    static: {"^": "BorderConnection_POINTS_UPDATED-"}
  },
  "+BorderConnection": 0,
  BorderInteractionController: {
    "^": "BaseController;canvasModels-,borderConnections-,controllerFactory-",
    setRequiredControllers$0: [function() {
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    updateCanvasModel$2: [function(oldBaseCanvasModel, baseCanvasModel) {
      var t1, borderConnection;
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        borderConnection = t1._current;
        if (J.$eq(borderConnection.get$canvasModelA(), oldBaseCanvasModel))
          borderConnection.set$canvasModelA(baseCanvasModel);
        if (J.$eq(borderConnection.get$canvasModelB(), oldBaseCanvasModel))
          borderConnection.set$canvasModelB(baseCanvasModel);
      }
      C.JSArray_methods.remove$1(this.canvasModels, oldBaseCanvasModel);
      this.canvasModels.push(baseCanvasModel);
    }, "call$2", "get$updateCanvasModel", 4, 0, 487, 514, 159, "updateCanvasModel"],
    deleteCanvasModel$1: [function(canvasModel) {
      var borderConnectionsToBeDeleted, t1, borderConnection;
      borderConnectionsToBeDeleted = [];
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        borderConnection = t1._current;
        if (J.$eq(borderConnection.get$canvasModelA(), canvasModel) || J.$eq(borderConnection.get$canvasModelB(), canvasModel))
          borderConnectionsToBeDeleted.push(borderConnection);
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(borderConnectionsToBeDeleted, borderConnectionsToBeDeleted.length, 0, null), [H.getTypeArgumentByIndex(borderConnectionsToBeDeleted, 0)]); t1.moveNext$0();) {
        borderConnection = t1._current;
        C.JSArray_methods.remove$1(this.borderConnections, borderConnection);
      }
      C.JSArray_methods.remove$1(this.canvasModels, canvasModel);
    }, "call$1", "get$deleteCanvasModel", 2, 0, 515, 516, "deleteCanvasModel"],
    deleteBorderConnection$2: [function(canvasModelA, canvasModelB) {
      var t1, bcnToBeDeleted, bcn, t2;
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); bcnToBeDeleted = null, t1.moveNext$0();) {
        bcn = t1._current;
        if (!(J.$eq(bcn.get$canvasModelA(), canvasModelA) && J.$eq(bcn.get$canvasModelB(), canvasModelB)))
          t2 = J.$eq(bcn.get$canvasModelA(), canvasModelB) && J.$eq(bcn.get$canvasModelB(), canvasModelA);
        else
          t2 = true;
        if (t2) {
          bcnToBeDeleted = bcn;
          break;
        }
      }
      if (bcnToBeDeleted != null)
        C.JSArray_methods.remove$1(this.borderConnections, bcnToBeDeleted);
      return bcnToBeDeleted;
    }, "call$2", "get$deleteBorderConnection", 4, 0, 517, 512, 513, "deleteBorderConnection"],
    createBorderConnection$2: [function(canvasModelA, canvasModelB) {
      var bcm = new S.BorderConnection(null, null, null, null, null, null, null, null, null, null);
      bcm.BorderConnection$2(canvasModelA, canvasModelB);
      this.borderConnections.push(bcm);
      return bcm;
    }, "call$2", "get$createBorderConnection", 4, 0, 517, 512, 513, "createBorderConnection"],
    calculateConnectionsLocation$0: [function() {
      var t1, borderConnection, closestBorders, t2;
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        borderConnection = t1._current;
        borderConnection.get$canvasModelA().updateCentralBorderPoints$0();
        borderConnection.get$canvasModelB().updateCentralBorderPoints$0();
        closestBorders = this._getClosestPointsOfList$3(borderConnection.get$canvasModelA().getCentralBorderPoints$0(), borderConnection.get$canvasModelB().getCentralBorderPoints$0(), borderConnection.get$enforcedOppositeBorderForModelA());
        t2 = borderConnection.get$canvasModelA();
        if (0 >= closestBorders.length)
          return H.ioore(closestBorders, 0);
        t2.addBorderUtilization$1(closestBorders[0].get$borderCode());
        t2 = borderConnection.get$canvasModelB();
        if (1 >= closestBorders.length)
          return H.ioore(closestBorders, 1);
        t2.addBorderUtilization$1(closestBorders[1].get$borderCode());
        if (0 >= closestBorders.length)
          return H.ioore(closestBorders, 0);
        t2 = closestBorders[0].get$borderCode();
        if (1 >= closestBorders.length)
          return H.ioore(closestBorders, 1);
        borderConnection.setBorderCodes$2(t2, closestBorders[1].get$borderCode());
        borderConnection.clearBorderPointsAndAngle$0();
      }
      for (t1 = this.canvasModels, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.generateBorderSegments$0();
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        this._defineBestPoint$1(t1._current);
    }, "call$0", "get$calculateConnectionsLocation", 0, 0, 137, "calculateConnectionsLocation"],
    _defineBestPoint$1: [function(borderConnection) {
      var borderAPoints, borderBPoints, t1;
      borderAPoints = borderConnection.get$canvasModelA().getConnectionPointsFromBorder$1(borderConnection.get$borderCodeA());
      borderBPoints = borderConnection.get$canvasModelB().getConnectionPointsFromBorder$1(borderConnection.get$borderCodeB());
      if (J.$eq(borderConnection.get$borderCodeA(), "EAST") || J.$eq(borderConnection.get$borderCodeA(), "WEST") || J.$eq(borderConnection.get$borderCodeB(), "EAST") || J.$eq(borderConnection.get$borderCodeB(), "WEST"))
        t1 = J.$eq(borderConnection.get$borderCodeA(), "NORTH") || J.$eq(borderConnection.get$borderCodeA(), "SOUTH") || J.$eq(borderConnection.get$borderCodeB(), "NORTH") || J.$eq(borderConnection.get$borderCodeB(), "SOUTH");
      else
        t1 = false;
      if (t1)
        borderConnection.set$specialRelation(true);
      else
        borderConnection.set$specialRelation(false);
      this._calculateBestPointAndAngle$3(borderConnection, borderAPoints, borderBPoints);
    }, "call$1", "get$_defineBestPoint", 2, 0, 518, 519, "_defineBestPoint"],
    _calculateBestPointAndAngle$3: [function(borderConnection, borderAPoints, borderBPoints) {
      var t1, t2, t3, bestAngle, worstAngle, smallerHypotenuse, bestAPoint, bestBPoint, parentBP, t4, childBP, t5, t6, t7, t8, t9, t10, t11, hypotenuse, oppositCathetus, otherSide, angleDegree, angle, bestAngleReturn;
      for (t1 = J.getInterceptor$ax(borderAPoints), t2 = t1.get$iterator(borderAPoints), t3 = J.getInterceptor$asx(borderBPoints), bestAngle = 3111696, worstAngle = -1, smallerHypotenuse = 3111696, bestAPoint = null, bestBPoint = null; t2.moveNext$0() === true;) {
        parentBP = t2.get$current();
        for (t4 = t3.get$iterator(borderBPoints); t4.moveNext$0() === true;) {
          childBP = t4.get$current();
          t5 = J.get$x$x(parentBP.get$point());
          t6 = J.get$y$x(childBP.get$point());
          new P.Point(t5, t6).$builtinTypeInfo = [null];
          t7 = parentBP.get$point();
          t8 = childBP.get$point();
          t9 = J.getInterceptor$x(t8);
          t10 = J.getInterceptor$x(t7);
          t11 = J.$sub$n(t9.get$x(t8), t10.get$x(t7));
          if (typeof t11 !== "number")
            H.throwExpression(new P.ArgumentError(t11));
          t11 = Math.pow(t11, 2);
          t7 = J.$sub$n(t9.get$y(t8), t10.get$y(t7));
          if (typeof t7 !== "number")
            H.throwExpression(new P.ArgumentError(t7));
          t7 = Math.pow(t7, 2);
          hypotenuse = Math.sqrt(t11 + t7);
          t7 = childBP.get$point();
          t8 = J.getInterceptor$x(t7);
          t5 = J.$sub$n(t5, t8.get$x(t7));
          if (typeof t5 !== "number")
            H.throwExpression(new P.ArgumentError(t5));
          t5 = Math.pow(t5, 2);
          t7 = J.$sub$n(t6, t8.get$y(t7));
          if (typeof t7 !== "number")
            H.throwExpression(new P.ArgumentError(t7));
          t6 = Math.pow(t7, 2);
          oppositCathetus = Math.sqrt(t5 + t6);
          otherSide = Math.sqrt(hypotenuse * hypotenuse - oppositCathetus * oppositCathetus);
          angleDegree = Math.atan(oppositCathetus / otherSide) * 180 / 3.141592653589793;
          if (J.$eq(borderConnection.get$specialRelation(), false)) {
            angle = J.$eq(borderConnection.get$borderCodeA(), "EAST") || J.$eq(borderConnection.get$borderCodeA(), "WEST") || J.$eq(borderConnection.get$borderCodeB(), "EAST") || J.$eq(borderConnection.get$borderCodeB(), "WEST") ? 90 - angleDegree : angleDegree;
            if (bestAngle > angle) {
              bestBPoint = childBP;
              bestAPoint = parentBP;
              bestAngle = angle;
            }
          } else {
            if (worstAngle < angleDegree)
              if (smallerHypotenuse > hypotenuse) {
                bestBPoint = childBP;
                bestAPoint = parentBP;
                smallerHypotenuse = hypotenuse;
                worstAngle = angleDegree;
              }
            if (bestAngle > angleDegree)
              bestAngle = angleDegree;
          }
        }
      }
      borderConnection.setRelationshipPointsAndAngle$3(bestAPoint, bestBPoint, bestAngle);
      bestAngleReturn = this._isItTheBestAngle$1(borderConnection);
      if (bestAngleReturn !== 0) {
        if (bestAngleReturn === 1) {
          t1.removeAt$1(borderAPoints, t1.indexOf$2(borderAPoints, bestAPoint, 0));
          this._calculateBestPointAndAngle$3(borderConnection, borderAPoints, borderBPoints);
          return;
        }
        if (bestAngleReturn === 2) {
          t3.removeAt$1(borderBPoints, t3.indexOf$2(borderBPoints, bestBPoint, 0));
          this._calculateBestPointAndAngle$3(borderConnection, borderAPoints, borderBPoints);
          return;
        }
      }
      borderConnection.triggerPointsUpdated$0();
    }, "call$3", "get$_calculateBestPointAndAngle", 6, 0, 520, 519, 521, 522, "_calculateBestPointAndAngle"],
    _isItTheBestAngle$1: [function(candidateBorderConnection) {
      var t1, $status, rivalBorderConnection;
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), $status = 0; t1.moveNext$0();) {
        rivalBorderConnection = t1._current;
        if (!J.$eq(rivalBorderConnection, candidateBorderConnection))
          if (rivalBorderConnection.areBorderPointsDefined$0() === true) {
            if (J.$eq(rivalBorderConnection.get$borderPointA(), candidateBorderConnection.get$borderPointA()))
              $status = 1;
            if (J.$eq(rivalBorderConnection.get$borderPointB(), candidateBorderConnection.get$borderPointA()))
              $status = 1;
            if (J.$eq(rivalBorderConnection.get$borderPointA(), candidateBorderConnection.get$borderPointB()))
              $status = 2;
            if (J.$eq(rivalBorderConnection.get$borderPointB(), candidateBorderConnection.get$borderPointB()))
              $status = 2;
            if ($status !== 0)
              if (J.$gt$n(candidateBorderConnection.get$angle(), rivalBorderConnection.get$angle()) === true)
                if (J.$eq(rivalBorderConnection.get$specialRelation(), true))
                  return $status;
                else {
                  rivalBorderConnection.clearBorderPointsAndAngle$0();
                  this._defineBestPoint$1(rivalBorderConnection);
                }
              else
                return $status;
            $status = 0;
          }
      }
      return $status;
    }, "call$1", "get$_isItTheBestAngle", 2, 0, 523, 524, "_isItTheBestAngle"],
    _getClosestPointsOfList$3: [function(listA, listB, enforcedOppositeBorderForModelA) {
      var t1, t2, closestPointA, closestPointB, closestDistance, bpA, t3, bpB, t4, t5, t6, t7, t8, newDistance, closestBorders;
      for (t1 = J.get$iterator$ax(listA), t2 = J.getInterceptor$ax(listB), closestPointA = null, closestPointB = null, closestDistance = 3111696; t1.moveNext$0() === true;) {
        bpA = t1.get$current();
        for (t3 = t2.get$iterator(listB); t3.moveNext$0() === true;) {
          bpB = t3.get$current();
          t4 = bpA.get$point();
          t5 = bpB.get$point();
          t6 = J.getInterceptor$x(t5);
          t7 = J.getInterceptor$x(t4);
          t8 = J.$sub$n(t6.get$x(t5), t7.get$x(t4));
          if (typeof t8 !== "number")
            H.throwExpression(new P.ArgumentError(t8));
          t8 = Math.pow(t8, 2);
          t4 = J.$sub$n(t6.get$y(t5), t7.get$y(t4));
          if (typeof t4 !== "number")
            H.throwExpression(new P.ArgumentError(t4));
          t4 = Math.pow(t4, 2);
          newDistance = Math.sqrt(t8 + t4);
          if (newDistance < closestDistance) {
            closestDistance = newDistance;
            closestPointB = bpB;
            closestPointA = bpA;
          }
        }
      }
      closestBorders = [];
      closestBorders.$builtinTypeInfo = [S.BorderPoint];
      if (enforcedOppositeBorderForModelA === true)
        switch (closestPointB.get$borderCode()) {
          case "NORTH":
            closestPointA = this._getBorderPointFromBorder$2(listA, "SOUTH");
            break;
          case "SOUTH":
            closestPointA = this._getBorderPointFromBorder$2(listA, "NORTH");
            break;
          case "WEST":
            closestPointA = this._getBorderPointFromBorder$2(listA, "EAST");
            break;
          case "EAST":
            closestPointA = this._getBorderPointFromBorder$2(listA, "WEST");
            break;
        }
      closestBorders.push(closestPointA);
      closestBorders.push(closestPointB);
      return closestBorders;
    }, "call$3", "get$_getClosestPointsOfList", 6, 0, 525, 526, 527, 528, "_getClosestPointsOfList"],
    _getBorderPointFromBorder$2: [function(points, borderCode) {
      var t1, bp;
      for (t1 = J.get$iterator$ax(points); t1.moveNext$0() === true;) {
        bp = t1.get$current();
        if (J.$eq(bp.get$borderCode(), borderCode))
          return bp;
      }
    }, "call$2", "get$_getBorderPointFromBorder", 4, 0, 529, 530, 480, "_getBorderPointFromBorder"],
    isIntersecting$1: [function(canvasModel) {
      var t1, modelFromList;
      if (canvasModel.isPositionEmpty$0() === true)
        return false;
      for (t1 = this.canvasModels, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        modelFromList = t1._current;
        if (!J.$eq(modelFromList, canvasModel))
          if (canvasModel.intersectsBaseCanvasModel$1(modelFromList) === true)
            return true;
      }
      return false;
    }, "call$1", "get$isIntersecting", 2, 0, 483, 516, "isIntersecting"],
    static: {"^": "BorderInteractionController_dummyMaxDistance-"}
  },
  "+BorderInteractionController": 0,
  BorderPoint: {
    "^": "Object;point<-,borderCode<-",
    static: {"^": "BorderPoint_NORTH-,BorderPoint_SOUTH-,BorderPoint_WEST-,BorderPoint_EAST-"}
  },
  "+BorderPoint": 0,
  BaseFieldGluer: {
    "^": "Object;fieldsIndex-,outerBorderScale-,glueObject-,ctx-,tableFieldGlues<-,borderInteractionController<-",
    glue$1: [function(baseField) {
      var t1;
      this._setBaseFieldPosition$1(baseField);
      if (this._doesNextIndexExceedsFieldsPerBorder$0()) {
        t1 = this.outerBorderScale;
        if (typeof t1 !== "number")
          return t1.$add();
        this.outerBorderScale = t1 + 3;
      }
      if (this._baseFieldIntersectsAnother$1(baseField)) {
        this.glue$1(baseField);
        return;
      }
      this.createBorderConnection$1(baseField);
    }, "call$1", "get$glue", 2, 0, 531, 532, "glue"],
    _setBaseFieldPosition$1: [function(baseField) {
      var t1, t2, t3, t4, outerBorder, tableSouthCentralBorderPoint, tableNorthCentralBorderPoint, tableWestCentralBorderPoint, tableEastCentralBorderPoint, bp;
      t1 = this.outerBorderScale;
      t2 = J.get$x$x(this.glueObject);
      t3 = J.get$width$x(this.glueObject);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t4 = 1 - t1;
      outerBorder = P.Rectangle$(J.$add$ns(t2, J.$div$n(J.$mul$ns(t3, t4), 2)), J.$add$ns(J.get$y$x(this.glueObject), J.$div$n(J.$mul$ns(J.get$height$x(this.glueObject), t4), 2)), J.$mul$ns(J.get$width$x(this.glueObject), t1), J.$mul$ns(J.get$height$x(this.glueObject), t1), null);
      this.glueObject.updateCentralBorderPoints$0();
      for (t1 = J.get$iterator$ax(this.glueObject.getCentralBorderPoints$0()), tableSouthCentralBorderPoint = null, tableNorthCentralBorderPoint = null, tableWestCentralBorderPoint = null, tableEastCentralBorderPoint = null; t1.moveNext$0() === true;) {
        bp = t1.get$current();
        switch (bp.get$borderCode()) {
          case "EAST":
            tableEastCentralBorderPoint = bp;
            break;
          case "WEST":
            tableWestCentralBorderPoint = bp;
            break;
          case "NORTH":
            tableNorthCentralBorderPoint = bp;
            break;
          case "SOUTH":
            tableSouthCentralBorderPoint = bp;
            break;
        }
      }
      this.setBaseFieldSize$1(baseField);
      t1 = this.fieldsIndex;
      if (typeof t1 !== "number")
        return t1.$mod();
      switch (C.JSInt_methods.$mod(t1, 8)) {
        case 0:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$sub$n(J.get$x$x(this.glueObject), J.$mul$ns(t1.get$width(baseField), 2)));
          t1.set$y(baseField, outerBorder.top);
          break;
        case 1:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$sub$n(J.get$x$x(tableNorthCentralBorderPoint.get$point()), J.$div$n(t1.get$width(baseField), 2)));
          t1.set$y(baseField, outerBorder.top);
          break;
        case 2:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$add$ns(J.get$x$x(this.glueObject), J.$mul$ns(J.get$width$x(this.glueObject), 1.5)));
          t1.set$y(baseField, outerBorder.top);
          break;
        case 3:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$add$ns(outerBorder.left, outerBorder.width));
          t1.set$y(baseField, J.$sub$n(J.get$y$x(tableEastCentralBorderPoint.get$point()), J.$div$n(t1.get$height(baseField), 2)));
          break;
        case 4:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$add$ns(J.$add$ns(J.get$x$x(tableSouthCentralBorderPoint.get$point()), J.get$width$x(this.glueObject)), J.$div$n(t1.get$width(baseField), 2)));
          t1.set$y(baseField, J.$sub$n(J.$add$ns(outerBorder.top, outerBorder.height), t1.get$height(baseField)));
          break;
        case 5:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$sub$n(J.get$x$x(tableSouthCentralBorderPoint.get$point()), J.$div$n(t1.get$width(baseField), 2)));
          t1.set$y(baseField, J.$sub$n(J.$add$ns(outerBorder.top, outerBorder.height), t1.get$height(baseField)));
          break;
        case 6:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$sub$n(J.$sub$n(J.get$x$x(tableSouthCentralBorderPoint.get$point()), t1.get$width(baseField)), J.$div$n(t1.get$width(baseField), 2)));
          t1.set$y(baseField, J.$sub$n(J.$add$ns(outerBorder.top, outerBorder.height), t1.get$height(baseField)));
          break;
        case 7:
          t1 = J.getInterceptor$x(baseField);
          t1.set$x(baseField, J.$sub$n(outerBorder.left, t1.get$width(baseField)));
          t1.set$y(baseField, J.$sub$n(J.get$y$x(tableEastCentralBorderPoint.get$point()), J.$div$n(t1.get$height(baseField), 2)));
          break;
      }
      t1 = this.fieldsIndex;
      if (typeof t1 !== "number")
        return t1.$add();
      this.fieldsIndex = t1 + 1;
    }, "call$1", "get$_setBaseFieldPosition", 2, 0, 531, 532, "_setBaseFieldPosition"],
    setBaseFieldSize$1: [function(baseField) {
      var t1, t2;
      t1 = J.getInterceptor$x(baseField);
      t2 = J.measureText$1$x(this.ctx, t1.get$name(baseField)).width;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.set$width(baseField, t2 + 20);
      t1.set$height(baseField, 30);
    }, "call$1", "get$setBaseFieldSize", 2, 0, 533, 532, "setBaseFieldSize"],
    _doesNextIndexExceedsFieldsPerBorder$0: [function() {
      var t1 = this.fieldsIndex;
      if (typeof t1 !== "number")
        return t1.$mod();
      if (C.JSInt_methods.$mod(t1, 8) === 0)
        return true;
      else
        return false;
    }, "call$0", "get$_doesNextIndexExceedsFieldsPerBorder", 0, 0, 346, "_doesNextIndexExceedsFieldsPerBorder"],
    _baseFieldIntersectsAnother$1: [function(baseField) {
      if (this.borderInteractionController.isIntersecting$1(baseField) === true)
        return true;
      else
        return false;
    }, "call$1", "get$_baseFieldIntersectsAnother", 2, 0, 534, 532, "_baseFieldIntersectsAnother"],
    createBorderConnection$1: [function(baseField) {
      var bcn, t1, t2, tableFieldGlue;
      bcn = this.borderInteractionController.createBorderConnection$2(this.glueObject, baseField);
      bcn.forceOppositeBorderForModelA$0();
      this.borderInteractionController.calculateConnectionsLocation$0();
      t1 = bcn.get$borderPointA();
      t2 = bcn.get$borderPointB();
      tableFieldGlue = new S.TableFieldGlue(null, null, null);
      tableFieldGlue.tablePoint = t1;
      tableFieldGlue.tableFieldPoint = t2;
      tableFieldGlue.tableField = baseField;
      this.tableFieldGlues.push(tableFieldGlue);
      t2 = bcn.get$borderPointA();
      t1 = bcn.get$borderPointB();
      tableFieldGlue.tablePoint = t2;
      tableFieldGlue.tableFieldPoint = t1;
      this._registerPointsUpdated$2(tableFieldGlue, bcn);
    }, "call$1", "get$createBorderConnection", 2, 0, 531, 532, "createBorderConnection"],
    _registerPointsUpdated$2: [function(tableFieldGlue, bcn) {
      bcn.get$pointsUpdated().listen$1(new S.BaseFieldGluer__registerPointsUpdated_closure(this, tableFieldGlue, bcn));
    }, "call$2", "get$_registerPointsUpdated", 4, 0, 535, 536, 537, "_registerPointsUpdated"],
    BaseFieldGluer$3: [function(glueObject, ctx, borderInteractionController) {
      this.glueObject = glueObject;
      this.ctx = ctx;
      this.borderInteractionController = borderInteractionController;
      this.tableFieldGlues = [];
      this.fieldsIndex = 0;
      this.outerBorderScale = 3;
    }, null, null, 6, 0, 153, 154, 155, 156, ""],
    static: {"^": "BaseFieldGluer_EXTRA_SPACE_INSIDE_ELLIPSE-,BaseFieldGluer_NUMBER_OF_FIELDS_PER_OUTER_BORDER-,BaseFieldGluer_INITIAL_SCALE-", BaseFieldGluer$: [function(glueObject, ctx, borderInteractionController) {
        var t1 = new S.BaseFieldGluer(null, null, null, null, null, null);
        t1.BaseFieldGluer$3(glueObject, ctx, borderInteractionController);
        return t1;
      }, null, null, 6, 0, 153, 154, 155, 156, "new BaseFieldGluer"]}
  },
  "+BaseFieldGluer": 0,
  BaseFieldGluer__registerPointsUpdated_closure: {
    "^": "Closure:0;this_0-,tableFieldGlue_1-,bcn_2-",
    call$1: [function(_) {
      var t1, t2, t3;
      t1 = this.tableFieldGlue_1;
      t2 = this.bcn_2;
      t3 = t2.get$borderPointA();
      t2 = t2.get$borderPointB();
      t1.tablePoint = t3;
      t1.tableFieldPoint = t2;
      return;
    }, "call$1", null, 2, 0, 0, 538, "call"],
    $isFunction: true
  },
  "+ BaseFieldGluer__registerPointsUpdated_closure": 0,
  TableFieldGlue: {
    "^": "Object;tablePoint<-,tableFieldPoint<-,tableField-",
    arePointsNull$0: [function() {
      if (this.tablePoint != null && this.tableFieldPoint != null)
        return false;
      else
        return true;
    }, "call$0", "get$arePointsNull", 0, 0, 346, "arePointsNull"]
  },
  "+TableFieldGlue": 0,
  CanvasActionsController: {
    "^": "BaseController;canvas-,ctx-,tableController<-,relationshipController-,specializationController-,borderInteractionController<-,diagramController-,relationshipText-,relationCreationIdentifierRelationship-,relationCreationTernary-,relationCreationNonIdentifierRelationship-,relationCreationSelf-,specializationCreation-,relationCreationManyToMany-,canvasInteractionStrategy-,selectionRectangle-,controllerFactory-",
    setRequiredControllers$0: [function() {
      var t1 = this.controllerFactory;
      this.tableController = t1.tableController;
      this.relationshipController = t1.relationshipController;
      this.borderInteractionController = t1.borderInteractionController;
      this.specializationController = t1.specializationController;
      this.diagramController = t1.diagramController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    _registerRelationshipCreation$0: [function() {
      var t1, popover, t2;
      t1 = $.get$context();
      popover = Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1("#relationshipText");
      t1 = Q.Proxy__serializeDataTree(H.fillLiteralMap(["placement", "bottom", "html", "true", "title", "<span class=\"text-info\"><strong>Dica</strong></span>" + "<button type=\"button\" id=\"closepopover\" class=\"close\">&times;</button>", "content", "Para criar um relacionamento, selecione o tipo a direita, clique na entidade/tabela pai, e depois, na filha."], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t2 = J.getInterceptor(t1);
      if (!t2.$isMap && !t2.$isIterable)
        H.throwExpression(new P.ArgumentError("object must be a Map or Iterable"));
      popover.popover$1(H.setRuntimeTypeInfo(new Q.Proxy(P._wrapToDart(P.JsObject__convertDataTree(t1))), [null]));
      t1 = J.get$onClick$x(this.relationshipText);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.relationCreationIdentifierRelationship);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.relationCreationTernary);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.relationCreationNonIdentifierRelationship);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.relationCreationSelf);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure3(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.relationCreationManyToMany);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure4(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this.specializationCreation);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation_closure5(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_registerRelationshipCreation", 0, 0, 137, "_registerRelationshipCreation"],
    _registerTableButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#openTableModal"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerTableButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_registerTableButton", 0, 0, 137, "_registerTableButton"],
    _getCanvasMousePosition$1: [function(evt) {
      var rect, t1, clientBoundingRect, x, y;
      rect = this.ctx.canvas.getBoundingClientRect();
      t1 = J.getInterceptor$x(rect);
      clientBoundingRect = H.setRuntimeTypeInfo(new P.Point(t1.get$left(rect), t1.get$top(rect)), [null]);
      t1 = J.getInterceptor$x(evt);
      x = J.$sub$n(J.get$x$x(t1.get$client(evt)), clientBoundingRect.x);
      y = J.$sub$n(J.get$y$x(t1.get$client(evt)), clientBoundingRect.y);
      return H.setRuntimeTypeInfo(new P.Point(x, y), [null]);
    }, "call$1", "get$_getCanvasMousePosition", 2, 0, 539, 540, "_getCanvasMousePosition"],
    CanvasActionsController$1: [function(ctx) {
      var t1;
      this.ctx = ctx;
      t1 = ctx.canvas;
      this.canvas = t1;
      t1.toString;
      t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousedown._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.canvas;
      t1.toString;
      t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousemove._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.canvas;
      t1.toString;
      t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mouseup._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.canvas;
      t1.toString;
      t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(t1, C.EventStreamProvider_dblclick._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_keydown._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController_closure3(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      this.relationshipText = document.querySelector("#relationshipText");
      this.relationCreationIdentifierRelationship = document.querySelector("#relationCreationIdentifierRelationship");
      this.relationCreationNonIdentifierRelationship = document.querySelector("#relationCreationNonIdentifierRelationship");
      this.relationCreationTernary = document.querySelector("#relationCreationTernary");
      this.relationCreationSelf = document.querySelector("#relationCreationSelf");
      this.specializationCreation = document.querySelector("#specializationCreation");
      this.relationCreationManyToMany = document.querySelector("#relationCreationManyToMany");
      this._registerRelationshipCreation$0();
      this._registerTableButton$0();
    }, null, null, 2, 0, 157, 155, ""],
    static: {CanvasActionsController$: [function(ctx) {
        var t1 = new S.CanvasActionsController(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.CanvasActionsController$1(ctx);
        return t1;
      }, null, null, 2, 0, 157, 155, "new CanvasActionsController"]}
  },
  "+CanvasActionsController": 0,
  CanvasActionsController_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1, canvasMousePosition, clickedTable, clickedRelationship, clickedTableField, clickedRelationshipField, clickedSpecialization, t2, t3;
      t1 = this.this_0;
      canvasMousePosition = t1._getCanvasMousePosition$1(evt);
      t1.tableController.untoggleTables$0();
      t1.relationshipController.untoggleRelationships$0();
      t1.specializationController.untoggleSpecializations$0();
      clickedTable = t1.tableController.getClickedTable$1(canvasMousePosition);
      clickedRelationship = t1.relationshipController.getClickedRelationship$1(canvasMousePosition);
      clickedTableField = t1.tableController.getClickedTableField$1(canvasMousePosition);
      clickedRelationshipField = t1.relationshipController.getClickedRelationshipField$1(canvasMousePosition);
      clickedSpecialization = t1.specializationController.getClickedSpecialization$1(canvasMousePosition);
      t2 = J.getInterceptor$x(evt);
      if (J.$eq(t2.get$which(evt), 1)) {
        t2.preventDefault$0(evt);
        if (J.get$runtimeType$(t1.canvasInteractionStrategy).$eq(0, C.Type_QGy))
          if (clickedTable != null)
            t1.canvasInteractionStrategy = S.CanvasModelSelectAndDragStrategy$(t1.ctx, clickedTable, t1.tableController, t1, t1.borderInteractionController, t1.diagramController);
          else if (clickedRelationship != null)
            t1.canvasInteractionStrategy = S.CanvasModelSelectAndDragStrategy$(t1.ctx, clickedRelationship, t1.relationshipController, t1, t1.borderInteractionController, t1.diagramController);
          else if (clickedTableField != null)
            t1.canvasInteractionStrategy = S.CanvasModelSelectAndDragStrategy$(t1.ctx, clickedTableField, t1.tableController, t1, t1.borderInteractionController, t1.diagramController);
          else if (clickedRelationshipField != null)
            t1.canvasInteractionStrategy = S.CanvasModelSelectAndDragStrategy$(t1.ctx, clickedRelationshipField, t1.relationshipController, t1, t1.borderInteractionController, t1.diagramController);
          else if (clickedSpecialization != null)
            t1.canvasInteractionStrategy = S.CanvasModelSelectAndDragStrategy$(t1.ctx, clickedSpecialization, t1.specializationController, t1, t1.borderInteractionController, t1.diagramController);
      } else if (J.$eq(t2.get$which(evt), 3))
        if (clickedTable != null) {
          t3 = new S.TableCanvasMenuStrategy(null, null, null, null, null);
          t3.TableCanvasMenuStrategy$4(t1.ctx, t1.tableController, t1, clickedTable);
          t1.canvasInteractionStrategy = t3;
        } else if (clickedRelationship != null) {
          t3 = new S.RelationCanvasMenuStrategy(null, null, null, null, null);
          t3.RelationCanvasMenuStrategy$4(t1.ctx, t1.relationshipController, t1, clickedRelationship);
          t1.canvasInteractionStrategy = t3;
        } else if (clickedSpecialization != null) {
          t3 = new S.SpecializationCanvasMenuStrategy(null, null, null, null, null, null);
          t3.SpecializationCanvasMenuStrategy$5(t1.ctx, t1.specializationController, t1.tableController, t1, clickedSpecialization);
          t1.canvasInteractionStrategy = t3;
        }
      t1.canvasInteractionStrategy.executeMouseDown$2(canvasMousePosition, t2.get$which(evt));
      return;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController_closure": 0,
  CanvasActionsController_closure0: {
    "^": "Closure:541;this_1-",
    call$1: [function(evt) {
      var t1, canvasMousePosition;
      t1 = this.this_1;
      canvasMousePosition = t1._getCanvasMousePosition$1(evt);
      t1.canvasInteractionStrategy.executeCanvasScroll$1(evt);
      t1.canvasInteractionStrategy.executeMouseMove$1(canvasMousePosition);
      return;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController_closure0": 0,
  CanvasActionsController_closure1: {
    "^": "Closure:541;this_2-",
    call$1: [function(evt) {
      var t1, canvasMousePosition;
      t1 = this.this_2;
      canvasMousePosition = t1._getCanvasMousePosition$1(evt);
      t1.canvasInteractionStrategy.executeMouseUp$1(canvasMousePosition);
      return;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController_closure1": 0,
  CanvasActionsController_closure2: {
    "^": "Closure:541;this_3-",
    call$1: [function(evt) {
      var t1, canvasMousePosition;
      t1 = this.this_3;
      canvasMousePosition = t1._getCanvasMousePosition$1(evt);
      t1.canvasInteractionStrategy.executeDoubleClick$1(canvasMousePosition);
      return;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController_closure2": 0,
  CanvasActionsController_closure3: {
    "^": "Closure:542;this_4-",
    call$1: [function(evt) {
      this.this_4.canvasInteractionStrategy.executeKeyDown$1(evt);
      return;
    }, "call$1", null, 2, 0, 542, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController_closure3": 0,
  CanvasActionsController__registerRelationshipCreation_closure: {
    "^": "Closure:541;",
    call$1: [function(evt) {
      var t1 = $.get$context();
      J.$index$asx(Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1("#relationshipText"), "popover").call$0();
      t1 = J.get$onClick$x(document.querySelector("#closepopover"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.CanvasActionsController__registerRelationshipCreation__closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure": 0,
  CanvasActionsController__registerRelationshipCreation__closure: {
    "^": "Closure:541;",
    call$1: [function(evt2) {
      var t1 = $.get$context();
      J.$index$asx(Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1("#relationshipText"), "popover").call$1("hide");
    }, "call$1", null, 2, 0, 541, 543, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation__closure": 0,
  CanvasActionsController__registerRelationshipCreation_closure0: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.canvasInteractionStrategy = S.RelationshipDefinitionStrategy$(t1.ctx, t1.tableController, t1.relationshipController, t1.diagramController, t1, "Relacionamento identificador");
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure0": 0,
  CanvasActionsController__registerRelationshipCreation_closure1: {
    "^": "Closure:541;this_1-",
    call$1: [function(evt) {
      var t1, t2;
      t1 = this.this_1;
      t2 = new S.RelationshipTernaryDefinitionStrategy(null, null, null, null, null, null, null, null, null);
      t2.RelationshipTernaryDefinitionStrategy$4(t1.ctx, t1.tableController, t1.relationshipController, t1);
      t1.canvasInteractionStrategy = t2;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure1": 0,
  CanvasActionsController__registerRelationshipCreation_closure2: {
    "^": "Closure:541;this_2-",
    call$1: [function(evt) {
      var t1 = this.this_2;
      t1.canvasInteractionStrategy = S.RelationshipDefinitionStrategy$(t1.ctx, t1.tableController, t1.relationshipController, t1.diagramController, t1, "Relacionamento n\u00e3o identificador");
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure2": 0,
  CanvasActionsController__registerRelationshipCreation_closure3: {
    "^": "Closure:541;this_3-",
    call$1: [function(evt) {
      var t1 = this.this_3;
      t1.canvasInteractionStrategy = S.RelationshipDefinitionStrategy$(t1.ctx, t1.tableController, t1.relationshipController, t1.diagramController, t1, "Auto-relacionamento");
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure3": 0,
  CanvasActionsController__registerRelationshipCreation_closure4: {
    "^": "Closure:541;this_4-",
    call$1: [function(evt) {
      var t1 = this.this_4;
      t1.canvasInteractionStrategy = S.RelationshipDefinitionStrategy$(t1.ctx, t1.tableController, t1.relationshipController, t1.diagramController, t1, "Relacionamento muitos para muitos");
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure4": 0,
  CanvasActionsController__registerRelationshipCreation_closure5: {
    "^": "Closure:541;this_5-",
    call$1: [function(evt) {
      var t1, t2;
      t1 = this.this_5;
      t2 = new S.SpecializationStrategy(null, null, null, null, null, null, null, null, null);
      t2.SpecializationStrategy$5(t1.ctx, t1.tableController, t1.specializationController, t1.diagramController, t1);
      t1.canvasInteractionStrategy = t2;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerRelationshipCreation_closure5": 0,
  CanvasActionsController__registerTableButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0.tableController;
      t1.showModal$1(0, S.Table$(t1.diagramController.diagram.id, null, 50, 50, null));
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ CanvasActionsController__registerTableButton_closure": 0,
  CanvasEllipseDrawer: {
    "^": "Object;ctx-",
    draw$7: [function(x, y, w, h, fillStyle, strokeStyle, dashed) {
      var t1, ox, t2, oy, t3, xe, t4, ye, xm, ym;
      t1 = J.getInterceptor$n(w);
      ox = J.$mul$ns(t1.$div(w, 2), 0.5522848);
      t2 = J.getInterceptor$n(h);
      oy = J.$mul$ns(t2.$div(h, 2), 0.5522848);
      t3 = J.getInterceptor$ns(x);
      xe = t3.$add(x, w);
      t4 = J.getInterceptor$ns(y);
      ye = t4.$add(y, h);
      xm = t3.$add(x, t1.$div(w, 2));
      ym = t4.$add(y, t2.$div(h, 2));
      J.set$lineWidth$x(this.ctx, 1.618033988);
      if (dashed) {
        J.setLineDash$1$x(this.ctx, [4]);
        J.set$lineDashOffset$x(this.ctx, 1);
        J.set$lineWidth$x(this.ctx, 2.5);
      }
      J.beginPath$0$x(this.ctx);
      J.moveTo$2$x(this.ctx, x, ym);
      t1 = J.getInterceptor$n(ym);
      t2 = J.getInterceptor$n(xm);
      J.bezierCurveTo$6$x(this.ctx, x, t1.$sub(ym, oy), t2.$sub(xm, ox), y, xm, y);
      J.bezierCurveTo$6$x(this.ctx, t2.$add(xm, ox), y, xe, t1.$sub(ym, oy), xe, ym);
      J.bezierCurveTo$6$x(this.ctx, xe, t1.$add(ym, oy), t2.$add(xm, ox), ye, xm, ye);
      J.bezierCurveTo$6$x(this.ctx, t2.$sub(xm, ox), ye, x, t1.$add(ym, oy), x, ym);
      J.set$fillStyle$x(this.ctx, fillStyle);
      J.set$strokeStyle$x(this.ctx, strokeStyle);
      J.fill$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.setLineDash$1$x(this.ctx, []);
      J.set$strokeStyle$x(this.ctx, "black");
      J.set$fillStyle$x(this.ctx, "black");
    }, "call$7", "get$draw", 14, 0, 544, 31, 193, 329, 545, 546, 547, 548, "draw"]
  },
  "+CanvasEllipseDrawer": 0,
  CanvasScroller: {
    "^": "Object;canvas-,evt-",
    _getElementRelativeMousePosition$2: [function(element, evt) {
      var elementRect, t1, ElementBoundingRect;
      elementRect = element.getBoundingClientRect();
      t1 = J.getInterceptor$x(elementRect);
      ElementBoundingRect = H.setRuntimeTypeInfo(new P.Point(t1.get$left(elementRect), t1.get$top(elementRect)), [null]);
      t1 = J.getInterceptor$x(evt);
      return H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.get$client(evt)), ElementBoundingRect.x), J.$sub$n(J.get$y$x(t1.get$client(evt)), ElementBoundingRect.y)), [null]);
    }, "call$2", "get$_getElementRelativeMousePosition", 4, 0, 549, 218, 540, "_getElementRelativeMousePosition"]
  },
  "+CanvasScroller": 0,
  CanvasInteractionStrategy: {
    "^": "Object;",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    executeCanvasScroll$1: [function(evt) {
    }, "call$1", "get$executeCanvasScroll", 2, 0, 541, 540, "executeCanvasScroll"],
    executeDoubleClick$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeDoubleClick", 2, 0, 553, 551, "executeDoubleClick"],
    executeKeyDown$1: [function(evt) {
    }, "call$1", "get$executeKeyDown", 2, 0, 542, 540, "executeKeyDown"]
  },
  "+CanvasInteractionStrategy": 0,
  CanvasModelSelectAndDragStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,baseCanvasModel-,initialCanvasModelPosition-,initialMousePosition-,canvasModelFieldsPosition-,baseCanvasController-,borderInteractionController<-,canvasActionsController-,diagramController-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1, baseField, t2, t3, baseSubField, t4;
      if (J.$eq(clickOrigin, 1)) {
        this.initialCanvasModelPosition = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(this.baseCanvasModel), J.get$y$x(this.baseCanvasModel)), [null]);
        for (t1 = J.get$iterator$ax(this.baseCanvasModel.getFields$0()); t1.moveNext$0() === true;) {
          baseField = t1.get$current();
          t2 = this.canvasModelFieldsPosition;
          t3 = J.getInterceptor$x(baseField);
          t3 = new P.Point(t3.get$x(baseField), t3.get$y(baseField));
          t3.$builtinTypeInfo = [null];
          t2.$indexSet(0, baseField, t3);
          for (t2 = J.get$iterator$ax(baseField.getFields$0()); t2.moveNext$0() === true;) {
            baseSubField = t2.get$current();
            t3 = this.canvasModelFieldsPosition;
            t4 = J.getInterceptor$x(baseSubField);
            t4 = new P.Point(t4.get$x(baseSubField), t4.get$y(baseSubField));
            t4.$builtinTypeInfo = [null];
            t3.$indexSet(0, baseSubField, t4);
          }
        }
        this.initialMousePosition = canvasMousePosition;
        J.set$cursor$x(this.ctx.canvas.style, "move");
        this.baseCanvasController.toggle$1(this.baseCanvasModel);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeCanvasScroll$1: [function(evt) {
      var t1, canvasScroller, t2, t3, t4, t5, t6, t7, canvasMousePosition, t8, canvasDiv, canvasDivMousePosition, canvasDivRect;
      t1 = this.ctx.canvas;
      canvasScroller = new S.CanvasScroller(null, null);
      canvasScroller.canvas = t1;
      canvasScroller.evt = evt;
      t2 = J.get$width$x(this.baseCanvasModel);
      t3 = J.get$height$x(this.baseCanvasModel);
      t4 = J.getInterceptor$n(t2);
      t5 = t4.toInt$0(t2);
      t6 = J.getInterceptor$n(t3);
      t7 = t6.toInt$0(t3);
      canvasMousePosition = canvasScroller._getElementRelativeMousePosition$2(t1, evt);
      t1 = canvasScroller.canvas.width;
      t8 = J.$div$n(t5, 2);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t8 !== "number")
        return H.iae(t8);
      if (J.$gt$n(canvasMousePosition.x, t1 - t8) === true) {
        t1 = canvasScroller.canvas;
        t8 = t1.width;
        if (typeof t8 !== "number")
          return t8.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t1.width = t8 + t5;
      }
      t1 = canvasScroller.canvas.height;
      t5 = J.$div$n(t7, 2);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      if (J.$gt$n(canvasMousePosition.y, t1 - t5) === true) {
        t1 = canvasScroller.canvas;
        t5 = t1.height;
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof t7 !== "number")
          return H.iae(t7);
        t1.height = t5 + t7;
      }
      canvasDiv = canvasScroller.canvas.parentElement;
      t1 = t4.toInt$0(t2);
      t3 = t6.toInt$0(t3);
      canvasDivMousePosition = canvasScroller._getElementRelativeMousePosition$2(canvasDiv, canvasScroller.evt);
      canvasDivRect = canvasDiv.getBoundingClientRect();
      t2 = canvasDivMousePosition.y;
      t4 = J.getInterceptor$x(canvasDivRect);
      t5 = J.getInterceptor$n(t3);
      t6 = J.getInterceptor$n(t2);
      if (t6.$gt(t2, J.$sub$n(t4.get$height(canvasDivRect), t5.$div(t3, 2))) === true) {
        t7 = canvasDiv.scrollTop;
        t8 = t5.$tdiv(t3, 4);
        if (typeof t7 !== "number")
          return t7.$add();
        if (typeof t8 !== "number")
          return H.iae(t8);
        canvasDiv.scrollTop = t7 + t8;
      }
      if (t6.$lt(t2, t5.$div(t3, 2)) === true) {
        t2 = canvasDiv.scrollTop;
        t3 = t5.$tdiv(t3, 4);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        canvasDiv.scrollTop = t2 - t3;
      }
      t2 = canvasDivMousePosition.x;
      t3 = J.getInterceptor$n(t1);
      t5 = J.getInterceptor$n(t2);
      if (t5.$gt(t2, J.$sub$n(t4.get$width(canvasDivRect), t3.$div(t1, 2))) === true) {
        t4 = canvasDiv.scrollLeft;
        t6 = t3.$tdiv(t1, 4);
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        canvasDiv.scrollLeft = t4 + t6;
      }
      if (t5.$lt(t2, t3.$div(t1, 2)) === true) {
        t2 = canvasDiv.scrollLeft;
        t1 = t3.$tdiv(t1, 4);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        canvasDiv.scrollLeft = t2 - t1;
      }
      t1 = canvasScroller.canvas;
      t1.toString;
      t1.getContext("2d").font = "10pt Helvetica";
    }, "call$1", "get$executeCanvasScroll", 2, 0, 541, 540, "executeCanvasScroll"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, baseField, t2, baseSubField;
      this.baseCanvasController.drag$4(this.baseCanvasModel, this.initialCanvasModelPosition, this.initialMousePosition, canvasMousePosition);
      for (t1 = J.get$iterator$ax(this.baseCanvasModel.getFields$0()); t1.moveNext$0() === true;) {
        baseField = t1.get$current();
        this.baseCanvasController.drag$4(baseField, this.canvasModelFieldsPosition.$index(0, baseField), this.initialMousePosition, canvasMousePosition);
        for (t2 = J.get$iterator$ax(baseField.getFields$0()); t2.moveNext$0() === true;) {
          baseSubField = t2.get$current();
          this.baseCanvasController.drag$4(baseSubField, this.canvasModelFieldsPosition.$index(0, baseSubField), this.initialMousePosition, canvasMousePosition);
        }
      }
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
      var t1, baseField, t2, baseSubField;
      if (this.borderInteractionController.isIntersecting$1(this.baseCanvasModel))
        this.baseCanvasController.resetModelLocation$3(this.baseCanvasModel, this.canvasModelFieldsPosition, this.initialCanvasModelPosition);
      if (this.diagramController.isConceptual$0())
        for (t1 = J.get$iterator$ax(this.baseCanvasModel.getFields$0()); t1.moveNext$0() === true;) {
          baseField = t1.get$current();
          if (this.borderInteractionController.isIntersecting$1(baseField)) {
            this.baseCanvasController.resetModelLocation$3(this.baseCanvasModel, this.canvasModelFieldsPosition, this.initialCanvasModelPosition);
            break;
          }
          for (t2 = J.get$iterator$ax(baseField.getFields$0()); t2.moveNext$0() === true;) {
            baseSubField = t2.get$current();
            if (this.borderInteractionController.isIntersecting$1(baseSubField))
              this.baseCanvasController.resetModelLocation$3(this.baseCanvasModel, this.canvasModelFieldsPosition, this.initialCanvasModelPosition);
          }
        }
      t1 = this.canvasActionsController;
      t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      this.baseCanvasController.forceUpdateDueToNewPosition$1(this.baseCanvasModel);
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    executeDoubleClick$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeDoubleClick", 2, 0, 553, 551, "executeDoubleClick"],
    executeKeyDown$1: [function(evt) {
    }, "call$1", "get$executeKeyDown", 2, 0, 542, 540, "executeKeyDown"],
    CanvasModelSelectAndDragStrategy$6: [function(ctx, baseCanvasModel, baseCanvasController, canvasActionsContorller, borderInteractionController, diagramController) {
      this.ctx = ctx;
      this.baseCanvasController = baseCanvasController;
      this.canvasActionsController = canvasActionsContorller;
      this.baseCanvasModel = baseCanvasModel;
      this.borderInteractionController = borderInteractionController;
      this.diagramController = diagramController;
      this.canvasModelFieldsPosition = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    }, null, null, 12, 0, 158, 155, 159, 160, 161, 156, 162, ""],
    static: {CanvasModelSelectAndDragStrategy$: [function(ctx, baseCanvasModel, baseCanvasController, canvasActionsContorller, borderInteractionController, diagramController) {
        var t1 = new S.CanvasModelSelectAndDragStrategy(null, null, null, null, null, null, null, null, null);
        t1.CanvasModelSelectAndDragStrategy$6(ctx, baseCanvasModel, baseCanvasController, canvasActionsContorller, borderInteractionController, diagramController);
        return t1;
      }, null, null, 12, 0, 158, 155, 159, 160, 161, 156, 162, "new CanvasModelSelectAndDragStrategy"]}
  },
  "+CanvasModelSelectAndDragStrategy": 0,
  DefaultStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,relationshipController-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      if (J.$eq(clickOrigin, 3))
        document.querySelector("#canvas_menu").textContent = "";
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, t2;
      t1 = this.tableController.getClickedTable$1(canvasMousePosition) == null && this.relationshipController.getClickedRelationship$1(canvasMousePosition) == null;
      t2 = this.ctx;
      if (t1)
        J.set$cursor$x(t2.canvas.style, "default");
      else
        J.set$cursor$x(t2.canvas.style, "pointer");
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    DefaultStrategy$3: [function(ctx, tableController, relationshipController) {
      this.ctx = ctx;
      this.tableController = tableController;
      this.relationshipController = relationshipController;
      J.set$cursor$x(ctx.canvas.style, "default");
    }, null, null, 6, 0, 163, 155, 164, 165, ""],
    static: {DefaultStrategy$: [function(ctx, tableController, relationshipController) {
        var t1 = new S.DefaultStrategy(null, null, null);
        t1.DefaultStrategy$3(ctx, tableController, relationshipController);
        return t1;
      }, null, null, 6, 0, 163, 155, 164, 165, "new DefaultStrategy"]}
  },
  "+DefaultStrategy": 0,
  RelationCanvasMenuStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,relationshipController-,canvasActionsContorller-,clickedRelationship-,canvasMenu-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var editModel, editModelAnchor, deleteModel, deleteModelAnchor, t1;
      if (J.$eq(clickOrigin, 3)) {
        this.canvasMenu.textContent = "";
        editModel = document.createElement("li", null);
        editModelAnchor = W.AnchorElement_AnchorElement(null);
        editModelAnchor.id = "edit_relationship";
        editModel.appendChild(editModelAnchor);
        deleteModel = document.createElement("li", null);
        deleteModelAnchor = W.AnchorElement_AnchorElement(null);
        deleteModelAnchor.id = "delete_relationship";
        deleteModel.appendChild(deleteModelAnchor);
        editModelAnchor.textContent = "Editar relacionamento";
        deleteModelAnchor.textContent = "Deletar relacionamento";
        this.canvasMenu.appendChild(editModel);
        this.canvasMenu.appendChild(deleteModel);
        this._handleDeleteModelButton$0();
        this._handleEditModelButton$0();
        this.relationshipController.toggle$1(this.clickedRelationship);
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 554, 551, 552, "executeMouseDown"],
    _handleDeleteModelButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#delete_relationship"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationCanvasMenuStrategy__handleDeleteModelButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleDeleteModelButton", 0, 0, 137, "_handleDeleteModelButton"],
    _handleEditModelButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#edit_relationship"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationCanvasMenuStrategy__handleEditModelButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleEditModelButton", 0, 0, 137, "_handleEditModelButton"],
    RelationCanvasMenuStrategy$4: [function(ctx, relationshipController, canvasActionsContorller, clickedRelationship) {
      this.ctx = ctx;
      this.relationshipController = relationshipController;
      this.canvasActionsContorller = canvasActionsContorller;
      this.clickedRelationship = clickedRelationship;
      this.canvasMenu = document.querySelector("#canvas_menu");
    }, null, null, 8, 0, 555, 155, 165, 161, 556, ""]
  },
  "+RelationCanvasMenuStrategy": 0,
  RelationCanvasMenuStrategy__handleDeleteModelButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.relationshipController.deleteRelationship$1(t1.clickedRelationship);
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ RelationCanvasMenuStrategy__handleDeleteModelButton_closure": 0,
  RelationCanvasMenuStrategy__handleEditModelButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.relationshipController.editRelationship$1(t1.clickedRelationship);
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ RelationCanvasMenuStrategy__handleEditModelButton_closure": 0,
  RelationshipDefinitionStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,relationshipController-,canvasActionsContorller-,diagramController-,relationshipCreationStatus-,relationshipType-,parentTable@-,childTable@-,movedOverTable-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1, t2, relationship, t3;
      t1 = this.relationshipCreationStatus.status;
      t2 = this.tableController;
      if (!t1) {
        t1 = t2.getClickedTable$1(canvasMousePosition);
        this.parentTable = t1;
        if (t1 != null) {
          t2 = this.relationshipType;
          if (t2 === "Auto-relacionamento") {
            this.childTable = t1;
            relationship = S.Relationship$(this.diagramController.diagram.id, t1, t1, t2, H.setRuntimeTypeInfo([], [S.RelationshipField]));
            this.relationshipController.newRelationship$1(relationship);
            t1 = this.canvasActionsContorller;
            t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
          } else {
            this.tableController.highlightTable$2(t1, true);
            t1 = this.relationshipController;
            t2 = t1.ctx;
            t3 = new S.RelationshipDefinitionView(null, null, null);
            t3.startRel = canvasMousePosition;
            t3.endRel = canvasMousePosition;
            t3.ctx = t2;
            t1.relationshipDefinition = t3;
            this.relationshipCreationStatus.status = true;
          }
        } else {
          t1 = this.canvasActionsContorller;
          t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
        }
      } else {
        t1 = t2.getClickedTable$1(canvasMousePosition);
        this.childTable = t1;
        if (!J.$eq(this.parentTable, t1)) {
          t1 = this.childTable;
          if (t1 != null) {
            relationship = S.Relationship$(this.diagramController.diagram.id, this.parentTable, t1, this.relationshipType, H.setRuntimeTypeInfo([], [S.RelationshipField]));
            this.relationshipController.newRelationship$1(relationship);
            this.tableController.highlightTable$2(this.childTable, false);
          }
        }
        this.tableController.highlightTable$2(this.parentTable, false);
        this.relationshipController.relationshipDefinition = null;
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, t2;
      if (this.relationshipCreationStatus.status) {
        t1 = this.movedOverTable;
        if (t1 != null) {
          t2 = this.parentTable;
          t2 = t1 == null ? t2 != null : t1 !== t2;
        } else
          t2 = false;
        if (t2)
          this.tableController.highlightTable$2(t1, false);
        t1 = this.tableController.getClickedTable$1(canvasMousePosition);
        this.movedOverTable = t1;
        if (t1 != null)
          this.tableController.highlightTable$2(t1, true);
        this.relationshipController.relationshipDefinition.endRel = canvasMousePosition;
      }
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    RelationshipDefinitionStrategy$6: [function(ctx, tableController, relationshipController, diagramController, canvasActionsContorller, relationshipType) {
      var t1;
      this.ctx = ctx;
      this.tableController = tableController;
      this.relationshipController = relationshipController;
      this.canvasActionsContorller = canvasActionsContorller;
      this.diagramController = diagramController;
      this.relationshipType = relationshipType;
      t1 = new S.RelationshipCreationStatus(null);
      t1.status = false;
      this.relationshipCreationStatus = t1;
      J.set$cursor$x(ctx.canvas.style, "crosshair");
    }, null, null, 12, 0, 166, 155, 164, 165, 162, 161, 167, ""],
    static: {RelationshipDefinitionStrategy$: [function(ctx, tableController, relationshipController, diagramController, canvasActionsContorller, relationshipType) {
        var t1 = new S.RelationshipDefinitionStrategy(null, null, null, null, null, null, null, null, null, null);
        t1.RelationshipDefinitionStrategy$6(ctx, tableController, relationshipController, diagramController, canvasActionsContorller, relationshipType);
        return t1;
      }, null, null, 12, 0, 166, 155, 164, 165, 162, 161, 167, "new RelationshipDefinitionStrategy"]}
  },
  "+RelationshipDefinitionStrategy": 0,
  RelationshipCreationStatus: {
    "^": "Object;status-"
  },
  "+RelationshipCreationStatus": 0,
  RelationshipTernaryDefinitionStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,relationshipController-,canvasActionsContorller-,relationshipCreationStatus-,ternaryTable@-,ternaryRelationship-,movedOverTable-,movedOverRelationship-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1, t2, t3;
      if (!this.relationshipCreationStatus.status) {
        this.ternaryTable = this.tableController.getClickedTable$1(canvasMousePosition);
        t1 = this.relationshipController.getClickedRelationship$1(canvasMousePosition);
        this.ternaryRelationship = t1;
        t2 = this.ternaryTable;
        if (t2 != null)
          this.tableController.highlightTable$2(t2, true);
        else if (t1 != null)
          this.relationshipController.highlightRelationship$2(t1, true);
        else {
          t1 = this.canvasActionsContorller;
          t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
        }
        t1 = this.relationshipController;
        t2 = t1.ctx;
        t3 = new S.RelationshipDefinitionView(null, null, null);
        t3.startRel = canvasMousePosition;
        t3.endRel = canvasMousePosition;
        t3.ctx = t2;
        t1.relationshipDefinition = t3;
        this.relationshipCreationStatus.status = true;
      } else {
        if (this._ternaryStartedFromTable$0())
          this.ternaryRelationship = this.relationshipController.getClickedRelationship$1(canvasMousePosition);
        else
          this.ternaryTable = this.tableController.getClickedTable$1(canvasMousePosition);
        if (this.ternaryTable != null && this.ternaryRelationship != null)
          if (!J.$eq(this.ternaryRelationship.get$dataType(), "Auto-relacionamento"))
            this.relationshipController.convertIntoTernary$2(this.ternaryTable, this.ternaryRelationship);
        t1 = this.ternaryTable;
        if (t1 != null)
          this.tableController.highlightTable$2(t1, false);
        t1 = this.ternaryRelationship;
        if (t1 != null)
          this.relationshipController.highlightRelationship$2(t1, false);
        this.relationshipController.relationshipDefinition = null;
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, t2;
      if (this.relationshipCreationStatus.status) {
        if (this._ternaryStartedFromRelationship$0()) {
          t1 = this.movedOverTable;
          t2 = this.ternaryTable;
          if (t1 == null ? t2 != null : t1 !== t2)
            this.tableController.highlightTable$2(t1, false);
          t1 = this.tableController.getClickedTable$1(canvasMousePosition);
          this.movedOverTable = t1;
          if (t1 != null)
            this.tableController.highlightTable$2(t1, true);
        }
        if (this._ternaryStartedFromTable$0()) {
          t1 = this.movedOverRelationship;
          t2 = this.ternaryRelationship;
          if (t1 == null ? t2 != null : t1 !== t2)
            this.relationshipController.highlightRelationship$2(t1, false);
          t1 = this.relationshipController.getClickedRelationship$1(canvasMousePosition);
          this.movedOverRelationship = t1;
          if (t1 != null)
            this.relationshipController.highlightRelationship$2(t1, true);
        }
        this.relationshipController.relationshipDefinition.endRel = canvasMousePosition;
      }
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    _ternaryStartedFromTable$0: [function() {
      if (this.ternaryTable != null)
        return true;
      else
        return false;
    }, "call$0", "get$_ternaryStartedFromTable", 0, 0, 346, "_ternaryStartedFromTable"],
    _ternaryStartedFromRelationship$0: [function() {
      if (this.ternaryRelationship != null)
        return true;
      else
        return false;
    }, "call$0", "get$_ternaryStartedFromRelationship", 0, 0, 346, "_ternaryStartedFromRelationship"],
    RelationshipTernaryDefinitionStrategy$4: [function(ctx, tableController, relationshipController, canvasActionsContorller) {
      var t1;
      this.ctx = ctx;
      this.tableController = tableController;
      this.relationshipController = relationshipController;
      this.canvasActionsContorller = canvasActionsContorller;
      t1 = new S.RelationshipCreationStatus(null);
      t1.status = false;
      this.relationshipCreationStatus = t1;
      J.set$cursor$x(ctx.canvas.style, "crosshair");
    }, null, null, 8, 0, 557, 155, 164, 165, 161, ""]
  },
  "+RelationshipTernaryDefinitionStrategy": 0,
  SpecializationCanvasMenuStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,specializationController-,tableController<-,canvasActionsContorller-,clickedSpecialization-,canvasMenu-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var editModel, editModelAnchor, deleteModel, deleteModelAnchor, t1;
      if (J.$eq(clickOrigin, 3)) {
        this.canvasMenu.textContent = "";
        editModel = document.createElement("li", null);
        editModelAnchor = W.AnchorElement_AnchorElement(null);
        editModelAnchor.id = "edit_specialization";
        editModel.appendChild(editModelAnchor);
        deleteModel = document.createElement("li", null);
        deleteModelAnchor = W.AnchorElement_AnchorElement(null);
        deleteModelAnchor.id = "delete_specialization";
        deleteModel.appendChild(deleteModelAnchor);
        editModelAnchor.textContent = "Especializar/generalizar outra entidade";
        deleteModelAnchor.textContent = "Deletar especializa\u00e7\u00e3o/generaliza\u00e7\u00e3o";
        this.canvasMenu.appendChild(editModel);
        this.canvasMenu.appendChild(deleteModel);
        this._handleDeleteModelButton$0();
        this._handleEditModelButton$1(canvasMousePosition);
        this.specializationController.toggle$1(this.clickedSpecialization);
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 554, 551, 552, "executeMouseDown"],
    _handleDeleteModelButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#delete_specialization"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleDeleteModelButton", 0, 0, 137, "_handleDeleteModelButton"],
    _handleEditModelButton$1: [function(canvasMousePosition) {
      var t1 = J.get$onClick$x(document.querySelector("#edit_specialization"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecializationCanvasMenuStrategy__handleEditModelButton_closure(this, canvasMousePosition)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$_handleEditModelButton", 2, 0, 477, 551, "_handleEditModelButton"],
    SpecializationCanvasMenuStrategy$5: [function(ctx, specializationController, tableController, canvasActionsContorller, clickedSpecialization) {
      this.ctx = ctx;
      this.specializationController = specializationController;
      this.tableController = tableController;
      this.canvasActionsContorller = canvasActionsContorller;
      this.clickedSpecialization = clickedSpecialization;
      this.canvasMenu = document.querySelector("#canvas_menu");
    }, null, null, 10, 0, 558, 155, 559, 164, 161, 560, ""]
  },
  "+SpecializationCanvasMenuStrategy": 0,
  SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.specializationController.deleteSpecialization$1(t1.clickedSpecialization);
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure": 0,
  SpecializationCanvasMenuStrategy__handleEditModelButton_closure: {
    "^": "Closure:541;this_0-,canvasMousePosition_1-",
    call$1: [function(evt) {
      var t1, t2, t3;
      t1 = this.this_0;
      t2 = t1.canvasActionsContorller;
      t3 = new S.SpecializationNewConnectionStrategy(null, null, null, null, null, null, null, null);
      t3.SpecializationNewConnectionStrategy$6(t1.ctx, t1.tableController, t1.specializationController, t2, t1.clickedSpecialization, this.canvasMousePosition_1);
      t2.canvasInteractionStrategy = t3;
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ SpecializationCanvasMenuStrategy__handleEditModelButton_closure": 0,
  SpecializationNewConnectionStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,canvasActionsContorller-,specializationController-,clickedSpecialization-,specializedTable-,movedOverTable-,lastTable-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1;
      this.specializedTable = this.tableController.getClickedTable$1(canvasMousePosition);
      this.specializationController.highlightSpecialization$2(this.clickedSpecialization, true);
      t1 = this.specializedTable;
      if (t1 != null) {
        this.specializationController.updateSpecialization$2(this.clickedSpecialization, t1);
        this.tableController.highlightTable$2(this.specializedTable, false);
        this.specializationController.highlightSpecialization$2(this.clickedSpecialization, false);
      }
      this.specializationController.specializationDefinition = null;
      t1 = this.canvasActionsContorller;
      t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1 = this.movedOverTable;
      if (t1 != null)
        this.tableController.highlightTable$2(t1, false);
      t1 = this.tableController.getClickedTable$1(canvasMousePosition);
      this.movedOverTable = t1;
      if (t1 != null)
        this.tableController.highlightTable$2(t1, true);
      this.specializationController.specializationDefinition.endRel = canvasMousePosition;
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    SpecializationNewConnectionStrategy$6: [function(ctx, tableController, specializationController, canvasActionsContorller, clickedSpecialization, canvasMousePosition) {
      var t1, t2;
      this.ctx = ctx;
      this.tableController = tableController;
      this.specializationController = specializationController;
      this.canvasActionsContorller = canvasActionsContorller;
      this.clickedSpecialization = clickedSpecialization;
      J.set$cursor$x(ctx.canvas.style, "crosshair");
      specializationController.highlightSpecialization$1(clickedSpecialization);
      t1 = specializationController.ctx;
      t2 = new S.RelationshipDefinitionView(null, null, null);
      t2.startRel = canvasMousePosition;
      t2.endRel = canvasMousePosition;
      t2.ctx = t1;
      specializationController.specializationDefinition = t2;
    }, null, null, 12, 0, 561, 155, 164, 559, 161, 560, 551, ""]
  },
  "+SpecializationNewConnectionStrategy": 0,
  SpecializationStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,canvasActionsContorller-,specializationController-,diagramController-,creationStatus-,parentTable@-,specializedTable-,movedOverTable-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1, t2, t3, specialization;
      t1 = this.creationStatus.status;
      t2 = this.tableController;
      if (!t1) {
        t1 = t2.getClickedTable$1(canvasMousePosition);
        this.parentTable = t1;
        if (t1 != null) {
          this.tableController.highlightTable$2(t1, true);
          t1 = this.specializationController;
          t2 = t1.ctx;
          t3 = new S.RelationshipDefinitionView(null, null, null);
          t3.startRel = canvasMousePosition;
          t3.endRel = canvasMousePosition;
          t3.ctx = t2;
          t1.specializationDefinition = t3;
          this.creationStatus.status = true;
        } else {
          t1 = this.canvasActionsContorller;
          t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
        }
      } else {
        t1 = t2.getClickedTable$1(canvasMousePosition);
        this.specializedTable = t1;
        if (t1 != null)
          if (!J.$eq(this.parentTable, t1)) {
            t1 = this.diagramController.diagram.id;
            t2 = this.parentTable;
            t3 = this.specializedTable;
            specialization = new S.Specialization(null, null, null, null, null, null, null, null, null, null, null);
            specialization.BaseCanvasModel$3(t1, 0, 0);
            specialization.Specialization$3(t1, t2, t3);
            this.specializationController.createSpecializationRequest$1(specialization);
            this.tableController.highlightTable$2(this.specializedTable, false);
          }
        this.tableController.highlightTable$2(this.parentTable, false);
        this.specializationController.specializationDefinition = null;
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 550, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, t2;
      if (this.creationStatus.status) {
        t1 = this.movedOverTable;
        if (t1 != null) {
          t2 = this.parentTable;
          t2 = t1 == null ? t2 != null : t1 !== t2;
        } else
          t2 = false;
        if (t2)
          this.tableController.highlightTable$2(t1, false);
        t1 = this.tableController.getClickedTable$1(canvasMousePosition);
        this.movedOverTable = t1;
        if (t1 != null)
          this.tableController.highlightTable$2(t1, true);
        this.specializationController.specializationDefinition.endRel = canvasMousePosition;
      }
    }, "call$1", "get$executeMouseMove", 2, 0, 553, 551, "executeMouseMove"],
    executeMouseUp$1: [function(canvasMousePosition) {
    }, "call$1", "get$executeMouseUp", 2, 0, 553, 551, "executeMouseUp"],
    SpecializationStrategy$5: [function(ctx, tableController, specializationController, diagramController, canvasActionsContorller) {
      var t1;
      this.ctx = ctx;
      this.tableController = tableController;
      this.specializationController = specializationController;
      this.diagramController = diagramController;
      this.canvasActionsContorller = canvasActionsContorller;
      t1 = new S.CreationStatus(null);
      t1.status = false;
      this.creationStatus = t1;
      J.set$cursor$x(ctx.canvas.style, "crosshair");
    }, null, null, 10, 0, 562, 155, 164, 559, 162, 161, ""]
  },
  "+SpecializationStrategy": 0,
  CreationStatus: {
    "^": "Object;status-"
  },
  "+CreationStatus": 0,
  TableCanvasMenuStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,canvasActionsContorller-,clickedTable-,canvasMenu-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var editModel, editModelAnchor, deleteModel, deleteModelAnchor, t1;
      if (J.$eq(clickOrigin, 3)) {
        this.canvasMenu.textContent = "";
        editModel = document.createElement("li", null);
        editModelAnchor = W.AnchorElement_AnchorElement(null);
        editModelAnchor.id = "edit_table";
        editModel.appendChild(editModelAnchor);
        deleteModel = document.createElement("li", null);
        deleteModelAnchor = W.AnchorElement_AnchorElement(null);
        deleteModelAnchor.id = "delete_table";
        deleteModel.appendChild(deleteModelAnchor);
        editModelAnchor.textContent = "Editar entidade";
        deleteModelAnchor.textContent = "Deletar entidade";
        this.canvasMenu.appendChild(editModel);
        this.canvasMenu.appendChild(deleteModel);
        this._handleDeleteModelButton$0();
        this._handleEditModelButton$0();
        this.tableController.toggle$1(this.clickedTable);
        t1 = this.canvasActionsContorller;
        t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      }
    }, "call$2", "get$executeMouseDown", 4, 0, 554, 551, 552, "executeMouseDown"],
    _handleDeleteModelButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#delete_table"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableCanvasMenuStrategy__handleDeleteModelButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleDeleteModelButton", 0, 0, 137, "_handleDeleteModelButton"],
    _handleEditModelButton$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#edit_table"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableCanvasMenuStrategy__handleEditModelButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleEditModelButton", 0, 0, 137, "_handleEditModelButton"],
    TableCanvasMenuStrategy$4: [function(ctx, tableController, canvasActionsContorller, clickedTable) {
      this.ctx = ctx;
      this.tableController = tableController;
      this.canvasActionsContorller = canvasActionsContorller;
      this.clickedTable = clickedTable;
      this.canvasMenu = document.querySelector("#canvas_menu");
    }, null, null, 8, 0, 168, 155, 164, 161, 563, ""]
  },
  "+TableCanvasMenuStrategy": 0,
  TableCanvasMenuStrategy__handleDeleteModelButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.tableController.deleteTable$1(t1.clickedTable);
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ TableCanvasMenuStrategy__handleDeleteModelButton_closure": 0,
  TableCanvasMenuStrategy__handleEditModelButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1.tableController;
      t1 = t1.clickedTable;
      t2.toString;
      t2.showModal$1(0, J.clone$0$x(t1));
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ TableCanvasMenuStrategy__handleEditModelButton_closure": 0,
  TableCreationStrategy: {
    "^": "CanvasInteractionStrategy;ctx-,tableController<-,canvasActionsContorller-,tableBeingCreated-,initialTablePosition-,initialMousePosition-,tableFieldsPosition-",
    executeMouseDown$2: [function(canvasMousePosition, clickOrigin) {
      var t1, t2;
      t1 = this.canvasActionsContorller;
      t1.canvasInteractionStrategy = S.DefaultStrategy$(t1.ctx, t1.tableController, t1.relationshipController);
      t1 = this.tableController;
      t2 = this.tableBeingCreated;
      t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t2)), t2);
    }, "call$2", "get$executeMouseDown", 4, 0, 554, 551, 552, "executeMouseDown"],
    executeMouseMove$1: [function(canvasMousePosition) {
      var t1, tableField, t2, subTableField;
      this.tableController.drag$4(this.tableBeingCreated, this.initialTablePosition, this.initialMousePosition, canvasMousePosition);
      if (this.tableController.tableViewFactory.getViewType$0() === "conceptual")
        for (t1 = J.get$iterator$ax(this.tableBeingCreated.get$tableFields()); t1.moveNext$0() === true;) {
          tableField = t1.get$current();
          this.tableController.drag$4(tableField, this.tableFieldsPosition.$index(0, tableField), this.initialMousePosition, canvasMousePosition);
          for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
            subTableField = t2.get$current();
            this.tableController.drag$4(subTableField, this.tableFieldsPosition.$index(0, subTableField), this.initialMousePosition, canvasMousePosition);
          }
        }
    }, "call$1", "get$executeMouseMove", 2, 0, 477, 551, "executeMouseMove"],
    TableCreationStrategy$4: [function(ctx, tableController, canvasActionsContorller, tableBeingCreated) {
      var t1, tableField, t2, t3, subTableField, t4;
      this.ctx = ctx;
      this.tableController = tableController;
      this.canvasActionsContorller = canvasActionsContorller;
      J.set$cursor$x(ctx.canvas.style, "move");
      this.tableBeingCreated = tableBeingCreated;
      t1 = J.getInterceptor$x(tableBeingCreated);
      this.initialTablePosition = H.setRuntimeTypeInfo(new P.Point(t1.get$x(tableBeingCreated), t1.get$y(tableBeingCreated)), [null]);
      this.initialMousePosition = H.setRuntimeTypeInfo(new P.Point(J.$div$n(J.$add$ns(t1.get$x(tableBeingCreated), t1.get$width(tableBeingCreated)), 2), J.$div$n(J.$add$ns(t1.get$y(tableBeingCreated), t1.get$height(tableBeingCreated)), 2)), [null]);
      tableController.toggle$1(tableBeingCreated);
      this.tableFieldsPosition = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = J.get$iterator$ax(tableBeingCreated.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        t2 = this.tableFieldsPosition;
        t3 = J.getInterceptor$x(tableField);
        t3 = new P.Point(t3.get$x(tableField), t3.get$y(tableField));
        t3.$builtinTypeInfo = [null];
        t2.$indexSet(0, tableField, t3);
        for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
          subTableField = t2.get$current();
          t3 = this.tableFieldsPosition;
          t4 = J.getInterceptor$x(subTableField);
          t4 = new P.Point(t4.get$x(subTableField), t4.get$y(subTableField));
          t4.$builtinTypeInfo = [null];
          t3.$indexSet(0, subTableField, t4);
        }
      }
    }, null, null, 8, 0, 168, 155, 164, 161, 169, ""],
    static: {TableCreationStrategy$: [function(ctx, tableController, canvasActionsContorller, tableBeingCreated) {
        var t1 = new S.TableCreationStrategy(null, null, null, null, null, null, null);
        t1.TableCreationStrategy$4(ctx, tableController, canvasActionsContorller, tableBeingCreated);
        return t1;
      }, null, null, 8, 0, 168, 155, 164, 161, 169, "new TableCreationStrategy"]}
  },
  "+TableCreationStrategy": 0,
  Command: {
    "^": "Object;"
  },
  "+Command": 0,
  CommandController: {
    "^": "Object;undoStack-,redoStack-,undoing-,redoing-,undoButton-,redoButton-",
    CommandController$0: [function() {
      this.undoStack = H.setRuntimeTypeInfo([], [S.Command]);
      this.redoStack = H.setRuntimeTypeInfo([], [S.Command]);
      this.undoButton = document.querySelector("#undo");
      this.redoButton = document.querySelector("#redo");
      this.undoing = false;
      this.redoing = false;
    }, null, null, 0, 0, 16, ""]
  },
  "+CommandController": 0,
  Connector: {
    "^": "Object;",
    draw$0: [function() {
      var t1, t2;
      J.set$lineWidth$x(this.ctx, 1);
      switch (this.borderPoint.get$borderCode()) {
        case "NORTH":
          this.centralPoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(this.borderPoint.get$point()), J.$sub$n(J.get$y$x(this.borderPoint.get$point()), 15)), [null]);
          t1 = this.circled;
          t2 = this.borderPoint;
          if (t1 === true)
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t2.get$point()), J.$sub$n(J.$sub$n(J.get$y$x(this.borderPoint.get$point()), 15), this.RADIUS)), [null]);
          else
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t2.get$point()), J.$add$ns(J.$sub$n(J.get$y$x(this.borderPoint.get$point()), 15), this.RADIUS)), [null]);
          this._drawNorthOriented$0();
          break;
        case "SOUTH":
          this.centralPoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(this.borderPoint.get$point()), J.$add$ns(J.get$y$x(this.borderPoint.get$point()), 15)), [null]);
          t1 = this.circled;
          t2 = this.borderPoint;
          if (t1 === true)
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t2.get$point()), J.$add$ns(J.$add$ns(J.get$y$x(this.borderPoint.get$point()), 15), this.RADIUS)), [null]);
          else
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t2.get$point()), J.$sub$n(J.$add$ns(J.get$y$x(this.borderPoint.get$point()), 15), this.RADIUS)), [null]);
          this._drawSouthOriented$0();
          break;
        case "EAST":
          this.centralPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.get$x$x(this.borderPoint.get$point()), 15), J.get$y$x(this.borderPoint.get$point())), [null]);
          t1 = this.circled;
          t2 = this.borderPoint;
          if (t1 === true)
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.$add$ns(J.get$x$x(t2.get$point()), 15), this.RADIUS), J.get$y$x(this.borderPoint.get$point())), [null]);
          else
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(t2.get$point()), 15), this.RADIUS), J.get$y$x(this.borderPoint.get$point())), [null]);
          this._drawEastOriented$0();
          break;
        case "WEST":
          this.centralPoint = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(this.borderPoint.get$point()), 15), J.get$y$x(this.borderPoint.get$point())), [null]);
          t1 = this.circled;
          t2 = this.borderPoint;
          if (t1 === true)
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$sub$n(J.get$x$x(t2.get$point()), 15), this.RADIUS), J.get$y$x(this.borderPoint.get$point())), [null]);
          else
            this.gluePoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.$sub$n(J.get$x$x(t2.get$point()), 15), this.RADIUS), J.get$y$x(this.borderPoint.get$point())), [null]);
          this._drawWestOriented$0();
          break;
      }
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    _drawTopLeg$1: [function(orientation) {
      var t1, t2;
      switch (orientation) {
        case "NORTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$add$ns(t2.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, 10), J.$add$ns(this.centralPoint.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "SOUTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$sub$n(t2.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, 10), J.$sub$n(this.centralPoint.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "EAST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, 15), J.$sub$n(this.centralPoint.y, 10));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "WEST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, 15), J.$sub$n(this.centralPoint.y, 10));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
      }
    }, "call$1", "get$_drawTopLeg", 2, 0, 48, 564, "_drawTopLeg"],
    _drawMidLeg$1: [function(orientation) {
      var t1, t2;
      switch (orientation) {
        case "NORTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$add$ns(t2.y, this.RADIUS));
          t2 = this.ctx;
          t1 = this.centralPoint;
          J.lineTo$2$x(t2, t1.x, J.$add$ns(t1.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "SOUTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$sub$n(t2.y, this.RADIUS));
          t2 = this.ctx;
          t1 = this.centralPoint;
          J.lineTo$2$x(t2, t1.x, J.$sub$n(t1.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "EAST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, 15), this.centralPoint.y);
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "WEST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, 15), this.centralPoint.y);
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
      }
    }, "call$1", "get$_drawMidLeg", 2, 0, 48, 564, "_drawMidLeg"],
    _drawBotLeg$1: [function(orientation) {
      var t1, t2;
      switch (orientation) {
        case "NORTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$add$ns(t2.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, 10), J.$add$ns(this.centralPoint.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "SOUTH":
          J.beginPath$0$x(this.ctx);
          t1 = this.ctx;
          t2 = this.centralPoint;
          J.moveTo$2$x(t1, t2.x, J.$sub$n(t2.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, 10), J.$sub$n(this.centralPoint.y, 15));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "EAST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, 15), J.$add$ns(this.centralPoint.y, 10));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "WEST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS), this.centralPoint.y);
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, 15), J.$add$ns(this.centralPoint.y, 10));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
      }
    }, "call$1", "get$_drawBotLeg", 2, 0, 48, 564, "_drawBotLeg"],
    _drawBar$1: [function(orientation) {
      switch (orientation) {
        case "NORTH":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS * 2), J.$add$ns(this.centralPoint.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS * 2), J.$add$ns(this.centralPoint.y, this.RADIUS));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "SOUTH":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS * 2), J.$sub$n(this.centralPoint.y, this.RADIUS));
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS * 2), J.$sub$n(this.centralPoint.y, this.RADIUS));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "EAST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS), J.$sub$n(this.centralPoint.y, this.RADIUS * 2));
          J.lineTo$2$x(this.ctx, J.$sub$n(this.centralPoint.x, this.RADIUS), J.$add$ns(this.centralPoint.y, this.RADIUS * 2));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
        case "WEST":
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS), J.$sub$n(this.centralPoint.y, this.RADIUS * 2));
          J.lineTo$2$x(this.ctx, J.$add$ns(this.centralPoint.x, this.RADIUS), J.$add$ns(this.centralPoint.y, this.RADIUS * 2));
          J.stroke$0$x(this.ctx);
          J.closePath$0$x(this.ctx);
          break;
      }
    }, "call$1", "get$_drawBar", 2, 0, 48, 564, "_drawBar"],
    _drawCircle$0: [function() {
      var t1, t2;
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 0);
      t1 = this.ctx;
      t2 = this.centralPoint;
      J.arc$6$x(t1, t2.x, t2.y, this.RADIUS, 0, 6.283185307179586, false);
      J.set$fillStyle$x(this.ctx, "#BCE8F1");
      J.fill$0$x(this.ctx);
      J.set$strokeStyle$x(this.ctx, "black");
      J.stroke$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
    }, "call$0", "get$_drawCircle", 0, 0, 16, "_drawCircle"],
    Connector$2: [function(borderPoint, ctx) {
      this.borderPoint = borderPoint;
      this.ctx = ctx;
      this.RADIUS = 4;
      this.circled = false;
    }, null, null, 4, 0, 565, 566, 155, ""]
  },
  "+Connector": 0,
  ConnectorMany: {
    "^": "Connector;connectorType-,borderPoint-,centralPoint-,gluePoint-,ctx-,RADIUS-,circled-",
    _drawNorthOriented$0: [function() {
      this._drawTopLeg$1("NORTH");
      this._drawMidLeg$1("NORTH");
      this._drawBotLeg$1("NORTH");
    }, "call$0", "get$_drawNorthOriented", 0, 0, 16, "_drawNorthOriented"],
    _drawSouthOriented$0: [function() {
      this._drawTopLeg$1("SOUTH");
      this._drawMidLeg$1("SOUTH");
      this._drawBotLeg$1("SOUTH");
    }, "call$0", "get$_drawSouthOriented", 0, 0, 16, "_drawSouthOriented"],
    _drawEastOriented$0: [function() {
      this._drawTopLeg$1("EAST");
      this._drawMidLeg$1("EAST");
      this._drawBotLeg$1("EAST");
    }, "call$0", "get$_drawEastOriented", 0, 0, 16, "_drawEastOriented"],
    _drawWestOriented$0: [function() {
      this._drawTopLeg$1("WEST");
      this._drawMidLeg$1("WEST");
      this._drawBotLeg$1("WEST");
    }, "call$0", "get$_drawWestOriented", 0, 0, 16, "_drawWestOriented"]
  },
  "+ConnectorMany": 0,
  ConnectorOne: {
    "^": "Connector;connectorType-,borderPoint-,centralPoint-,gluePoint-,ctx-,RADIUS-,circled-",
    _drawNorthOriented$0: [function() {
      this._drawBar$1("NORTH");
      this._drawMidLeg$1("NORTH");
    }, "call$0", "get$_drawNorthOriented", 0, 0, 16, "_drawNorthOriented"],
    _drawSouthOriented$0: [function() {
      this._drawBar$1("SOUTH");
      this._drawMidLeg$1("SOUTH");
    }, "call$0", "get$_drawSouthOriented", 0, 0, 16, "_drawSouthOriented"],
    _drawEastOriented$0: [function() {
      this._drawBar$1("EAST");
      this._drawMidLeg$1("EAST");
    }, "call$0", "get$_drawEastOriented", 0, 0, 16, "_drawEastOriented"],
    _drawWestOriented$0: [function() {
      this._drawBar$1("WEST");
      this._drawMidLeg$1("WEST");
    }, "call$0", "get$_drawWestOriented", 0, 0, 16, "_drawWestOriented"]
  },
  "+ConnectorOne": 0,
  ConnectorOneOrMany: {
    "^": "Connector;connectorType-,borderPoint-,centralPoint-,gluePoint-,ctx-,RADIUS-,circled-",
    _drawNorthOriented$0: [function() {
      this._drawBar$1("NORTH");
      this._drawTopLeg$1("NORTH");
      this._drawMidLeg$1("NORTH");
      this._drawBotLeg$1("NORTH");
    }, "call$0", "get$_drawNorthOriented", 0, 0, 16, "_drawNorthOriented"],
    _drawSouthOriented$0: [function() {
      this._drawBar$1("SOUTH");
      this._drawTopLeg$1("SOUTH");
      this._drawMidLeg$1("SOUTH");
      this._drawBotLeg$1("SOUTH");
    }, "call$0", "get$_drawSouthOriented", 0, 0, 16, "_drawSouthOriented"],
    _drawEastOriented$0: [function() {
      this._drawBar$1("EAST");
      this._drawTopLeg$1("EAST");
      this._drawMidLeg$1("EAST");
      this._drawBotLeg$1("EAST");
    }, "call$0", "get$_drawEastOriented", 0, 0, 16, "_drawEastOriented"],
    _drawWestOriented$0: [function() {
      this._drawBar$1("WEST");
      this._drawTopLeg$1("WEST");
      this._drawMidLeg$1("WEST");
      this._drawBotLeg$1("WEST");
    }, "call$0", "get$_drawWestOriented", 0, 0, 16, "_drawWestOriented"]
  },
  "+ConnectorOneOrMany": 0,
  ConnectorZeroOrMany: {
    "^": "Connector;connectorType-,borderPoint-,centralPoint-,gluePoint-,ctx-,RADIUS-,circled-",
    _drawNorthOriented$0: [function() {
      this._drawCircle$0();
      this._drawTopLeg$1("NORTH");
      this._drawMidLeg$1("NORTH");
      this._drawBotLeg$1("NORTH");
    }, "call$0", "get$_drawNorthOriented", 0, 0, 16, "_drawNorthOriented"],
    _drawSouthOriented$0: [function() {
      this._drawCircle$0();
      this._drawTopLeg$1("SOUTH");
      this._drawMidLeg$1("SOUTH");
      this._drawBotLeg$1("SOUTH");
    }, "call$0", "get$_drawSouthOriented", 0, 0, 16, "_drawSouthOriented"],
    _drawEastOriented$0: [function() {
      this._drawCircle$0();
      this._drawTopLeg$1("EAST");
      this._drawMidLeg$1("EAST");
      this._drawBotLeg$1("EAST");
    }, "call$0", "get$_drawEastOriented", 0, 0, 16, "_drawEastOriented"],
    _drawWestOriented$0: [function() {
      this._drawCircle$0();
      this._drawTopLeg$1("WEST");
      this._drawMidLeg$1("WEST");
      this._drawBotLeg$1("WEST");
    }, "call$0", "get$_drawWestOriented", 0, 0, 16, "_drawWestOriented"]
  },
  "+ConnectorZeroOrMany": 0,
  ConnectorZeroOrOne: {
    "^": "Connector;connectorType-,borderPoint-,centralPoint-,gluePoint-,ctx-,RADIUS-,circled-",
    _drawNorthOriented$0: [function() {
      this._drawCircle$0();
      this._drawMidLeg$1("NORTH");
    }, "call$0", "get$_drawNorthOriented", 0, 0, 16, "_drawNorthOriented"],
    _drawSouthOriented$0: [function() {
      this._drawCircle$0();
      this._drawMidLeg$1("SOUTH");
    }, "call$0", "get$_drawSouthOriented", 0, 0, 16, "_drawSouthOriented"],
    _drawEastOriented$0: [function() {
      this._drawCircle$0();
      this._drawMidLeg$1("EAST");
    }, "call$0", "get$_drawEastOriented", 0, 0, 16, "_drawEastOriented"],
    _drawWestOriented$0: [function() {
      this._drawCircle$0();
      this._drawMidLeg$1("WEST");
    }, "call$0", "get$_drawWestOriented", 0, 0, 16, "_drawWestOriented"]
  },
  "+ConnectorZeroOrOne": 0,
  Diagram: {
    "^": "BaseModel;conceptual-,logical-,physical-,id-",
    toJson$0: [function() {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(0, "diagram", P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.$indexSet$ax(map.$index(0, "diagram"), "id", this.id);
      return C.JsonCodec_null_null.encode$1(map);
    }, "call$0", "get$toJson", 0, 0, 16, "toJson"],
    getFields$0: [function() {
    }, "call$0", "get$getFields", 0, 0, 16, "getFields"],
    Diagram$1: [function(id) {
      this.id = id;
      this.physical = false;
      this.logical = false;
      this.conceptual = false;
    }, null, null, 2, 0, 170, 171, ""],
    static: {Diagram$: [function(id) {
        var t1 = new S.Diagram(null, null, null, null);
        t1.Diagram$1(id);
        return t1;
      }, null, null, 2, 0, 170, 171, "new Diagram"]}
  },
  "+Diagram": 0,
  DiagramController: {
    "^": "BaseController;diagram-,SYNCHRONOUS_DIAGRAM_READ_HAPPENED-,tableController<-,relationshipController-,specializationController-,_HTTPRequestController-,controllerFactory-",
    setRequiredControllers$0: [function() {
      var t1 = this.controllerFactory;
      this._HTTPRequestController = t1.hTTPRequestController;
      this.tableController = t1.tableController;
      this.relationshipController = t1.relationshipController;
      this.specializationController = t1.specializationController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    _handleLogicalPhysicalConversion$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#logicalPhysicalConversion"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DiagramController__handleLogicalPhysicalConversion_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleLogicalPhysicalConversion", 0, 0, 16, "_handleLogicalPhysicalConversion"],
    isConceptual$0: [function() {
      if (this.diagram.conceptual)
        return true;
      else
        return false;
    }, "call$0", "get$isConceptual", 0, 0, 346, "isConceptual"],
    isLogical$0: [function() {
      if (this.diagram.logical)
        return true;
      else
        return false;
    }, "call$0", "get$isLogical", 0, 0, 346, "isLogical"],
    isPhysical$0: [function() {
      if (this.diagram.physical)
        return true;
      else
        return false;
    }, "call$0", "get$isPhysical", 0, 0, 346, "isPhysical"],
    static: {"^": "DiagramController_CONCEPTUAL_DIAGRAM-,DiagramController_LOGICAL_DIAGRAM-"}
  },
  "+DiagramController": 0,
  DiagramController__handleLogicalPhysicalConversion_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0.diagram;
      if (t1.logical) {
        t1.logical = false;
        t1.physical = true;
        document.querySelector("#logicalPhysicalConversionText").textContent = "Converter para l\u00f3gico";
      } else {
        t1.logical = true;
        t1.physical = false;
        document.querySelector("#logicalPhysicalConversionText").textContent = "Converter para f\u00edsico";
      }
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ DiagramController__handleLogicalPhysicalConversion_closure": 0,
  ControllerFactory: {
    "^": "Object;controllerList-,tableController<-,relationshipController-,borderInteractionController<-,canvasActionsController-,preferencesController-,commandController-,diagramController-,hTTPRequestController-,tableViewFactory-,tableModalFactory-,relationshipViewFactory-,relationshipModalFactory-,specializationViewFactory-,specializationController-",
    setControllerFactories$0: [function() {
      for (var t1 = this.controllerList, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.setControllerFactory$1(this);
    }, "call$0", "get$setControllerFactories", 0, 0, 137, "setControllerFactories"],
    setNeededControllers$0: [function() {
      for (var t1 = this.controllerList, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.setRequiredControllers$0();
    }, "call$0", "get$setNeededControllers", 0, 0, 137, "setNeededControllers"],
    ControllerFactory$2: [function(ctx, diagramId) {
      var t1, t2, t3;
      this.hTTPRequestController = new S.HTTPRequestController(null, null);
      t1 = new S.DiagramController(null, false, null, null, null, null, null);
      t1.diagram = S.Diagram$(diagramId);
      t1._handleLogicalPhysicalConversion$0();
      this.diagramController = t1;
      t1 = new S.BorderInteractionController(null, null, null);
      t1.canvasModels = [];
      t1.borderConnections = [];
      this.borderInteractionController = t1;
      this.canvasActionsController = S.CanvasActionsController$(ctx);
      t1 = new S.CommandController(null, null, null, null, null, null);
      t1.CommandController$0();
      this.commandController = t1;
      t1 = new S.PreferencesController(null, null, null);
      t1.PreferencesController$1(ctx.canvas);
      this.preferencesController = t1;
      t1 = new S.SpecializationViewFactory(null, null, null, null);
      t1.SpecializationViewFactory$1(ctx);
      this.specializationViewFactory = t1;
      t2 = new S.SpecializationController(null, null, null, null, null, null, null, null, null, null);
      t2.SpecializationController$2(ctx, t1);
      this.specializationController = t2;
      t2 = new S.RelationshipViewFactory(null, null, null, null);
      t2.relationshipViews = [];
      t2.ctx = ctx;
      t2.logicalViews = true;
      t2.conceptualViews = false;
      t2.recreateViews$0();
      this.relationshipViewFactory = t2;
      t1 = new S.RelationshipModalFactory(null, null);
      this.relationshipModalFactory = t1;
      t3 = new S.RelationshipController(null, null, null, null, null, null, null, null, null, null, null, null, null);
      t3.RelationshipController$3(ctx, t2, t1);
      this.relationshipController = t3;
      t3 = new S.TableViewFactory(null, null, null, null);
      t3.tableViews = [];
      t3.ctx = ctx;
      this.tableViewFactory = t3;
      t1 = new S.TableModalFactory(null, null);
      this.tableModalFactory = t1;
      t2 = new S.TableController(null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t2.TableController$3(ctx, t3, t1);
      this.tableController = t2;
      t1 = [];
      this.controllerList = t1;
      t1.push(t2);
      this.controllerList.push(this.relationshipController);
      this.controllerList.push(this.borderInteractionController);
      this.controllerList.push(this.canvasActionsController);
      this.controllerList.push(this.preferencesController);
      this.controllerList.push(this.specializationController);
      this.controllerList.push(this.hTTPRequestController);
      this.controllerList.push(this.diagramController);
      this.setControllerFactories$0();
      this.setNeededControllers$0();
    }, null, null, 4, 0, 568, 155, 175, ""]
  },
  "+ControllerFactory": 0,
  ModalFactory: {
    "^": "Object;"
  },
  "+ModalFactory": 0,
  ViewFactory: {
    "^": "Object;",
    getViewType$0: [function() {
      if (this.logicalViews === true)
        return "logical";
      if (this.conceptualViews === true)
        return "conceptual";
    }, "call$0", "get$getViewType", 0, 0, 20, "getViewType"]
  },
  "+ViewFactory": 0,
  BaseCanvasModelHTTPRequest: {
    "^": "Object;"
  },
  "+BaseCanvasModelHTTPRequest": 0,
  CreateRelationshipRequest: {
    "^": "BaseCanvasModelHTTPRequest;relationship<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "POST", resourceURL + "/relationships.json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.relationship.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+CreateRelationshipRequest": 0,
  DeleteRelationshipRequest: {
    "^": "BaseCanvasModelHTTPRequest;relationship<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "DELETE", resourceURL + "/relationships/" + H.S(J.get$id$x(this.relationship)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.relationship.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+DeleteRelationshipRequest": 0,
  UpdateRelationshipRequest: {
    "^": "BaseCanvasModelHTTPRequest;relationship<-,oldRelationship-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "PUT", resourceURL + "/relationships/" + H.S(J.get$id$x(this.relationship)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.relationship.toJson$1(this.oldRelationship);
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+UpdateRelationshipRequest": 0,
  ValidateRelationshipRequest: {
    "^": "BaseCanvasModelHTTPRequest;relationship<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "POST", "/relationship.json/validate");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.relationship.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+ValidateRelationshipRequest": 0,
  CreateSpecializationRequest: {
    "^": "BaseCanvasModelHTTPRequest;specialization<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "POST", resourceURL + "/specializations.json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.specialization.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+CreateSpecializationRequest": 0,
  DeleteSpecializationRequest: {
    "^": "BaseCanvasModelHTTPRequest;specialization<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "DELETE", resourceURL + "/specializations/" + H.S(J.get$id$x(this.specialization)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.specialization.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+DeleteSpecializationRequest": 0,
  UpdateSpecializationRequest: {
    "^": "BaseCanvasModelHTTPRequest;specialization<-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "PUT", resourceURL + "/specializations/" + H.S(J.get$id$x(this.specialization)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.specialization.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+UpdateSpecializationRequest": 0,
  CreateTableRequest: {
    "^": "BaseCanvasModelHTTPRequest;table>-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "POST", resourceURL + "/tables.json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.table.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+CreateTableRequest": 0,
  DeleteTableRequest: {
    "^": "BaseCanvasModelHTTPRequest;table>-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "DELETE", resourceURL + "/tables/" + H.S(J.get$id$x(this.table)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.table.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+DeleteTableRequest": 0,
  UpdateTableRequest: {
    "^": "BaseCanvasModelHTTPRequest;table>-,oldTable-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "PUT", resourceURL + "/tables/" + H.S(J.get$id$x(this.oldTable)) + ".json");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.table.toJson$1(this.oldTable);
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+UpdateTableRequest": 0,
  ValidateTableRequest: {
    "^": "BaseCanvasModelHTTPRequest;table>-",
    openWithMethodAndURL$2: [function(resourceURL, request) {
      C.HttpRequest_methods.open$2(request, "POST", "/table.json/validate");
    }, "call$2", "get$openWithMethodAndURL", 4, 0, 569, 570, 571, "openWithMethodAndURL"],
    getModelJson$0: [function() {
      return this.table.toJson$0();
    }, "call$0", "get$getModelJson", 0, 0, 16, "getModelJson"]
  },
  "+ValidateTableRequest": 0,
  HTTPRequestController: {
    "^": "BaseController;diagramController-,controllerFactory-",
    setRequiredControllers$0: [function() {
      this.diagramController = this.controllerFactory.diagramController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    executeBaseCanvasModelRequest$1: [function(baseModelRequest) {
      var request = new XMLHttpRequest();
      baseModelRequest.openWithMethodAndURL$2("/diagrams/" + H.S(J.toString$0(this.diagramController.diagram.id)), request);
      request.setRequestHeader("Content-Type", "application/json, 'X-CSRF-Token', ");
      request.send(baseModelRequest.getModelJson$0());
      return request;
    }, "call$1", "get$executeBaseCanvasModelRequest", 2, 0, 572, 573, "executeBaseCanvasModelRequest"]
  },
  "+HTTPRequestController": 0,
  Line: {
    "^": "Object;start>-,end<-"
  },
  "+Line": 0,
  MainController: {
    "^": "Object;canvas-,ctx-,controllerFactory-,tableController<-,canvasActionsController-,relationshipController-,preferencesController-,specializationController-,diagramController-",
    redraw$1: [function(time) {
      var t1, t2;
      t1 = this.ctx;
      t2 = t1.canvas;
      J.clearRect$4$x(t1, 0, 0, t2.width, t2.height);
      this.canvasActionsController.selectionRectangle;
      this.relationshipController.drawAllRelations$0();
      this.specializationController.drawAllSpecializations$0();
      this.tableController.drawAllTables$0();
      this.tableController.drawToggledOptimization$0();
      t1 = window;
      t2 = this.get$redraw();
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    }, "call$1", "get$redraw", 2, 0, 374, 574, "redraw"],
    defineCanvasDivSize$0: [function() {
      var t1, _canvasDivWidth, canvasDiv;
      t1 = window.innerHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      _canvasDivWidth = window.innerWidth;
      canvasDiv = this.canvas.parentElement;
      J.set$overflow$x(canvasDiv.style, "scroll");
      J.set$backgroundColor$x(canvasDiv.style, "#F8F8F8");
      J.set$height$x(canvasDiv.style, "" + (t1 - 76 - 6) + "px");
      J.set$width$x(canvasDiv.style, H.S(_canvasDivWidth) + "px");
    }, "call$0", "get$defineCanvasDivSize", 0, 0, 137, "defineCanvasDivSize"],
    defineCanvasSize$2: [function(canvasDivStyleHeight, canvasDivStyleWidth) {
      J.set$width$x(this.canvas, J.$sub$n(canvasDivStyleWidth, 21));
      J.set$height$x(this.canvas, J.$sub$n(canvasDivStyleHeight, 25));
      J.get$context2D$x(this.canvas).font = "10pt Helvetica";
    }, "call$2", "get$defineCanvasSize", 4, 0, 417, 575, 576, "defineCanvasSize"],
    MainController$1: [function(canvas) {
      var t1, t2, diagramId, request, mappedDiagram, tables, relationships, specializations;
      t1 = $.get$context();
      t2 = t1._jsObject;
      Q._deserialize(J.$index$asx(t2, "jQuery"), t1).noConflict$0();
      J.$index$asx(Q._deserialize(J.$index$asx(t2, "jQuery"), t1).call$1("#canvas"), "contextmenu").call$0();
      this.canvas = canvas;
      this.defineCanvasDivSize$0();
      this.defineCanvasSize$2(H.Primitives_parseInt(J.replaceAll$2$s(J.get$height$x(canvas.parentElement.style), "px", ""), null, null), H.Primitives_parseInt(J.replaceAll$2$s(J.get$width$x(canvas.parentElement.style), "px", ""), null, null));
      t1 = J.getContext$1$x(this.canvas, "2d");
      this.ctx = t1;
      J.set$font$x(t1, "10pt Helvetica");
      diagramId = H.Primitives_parseInt(J.get$title$x(document.querySelector("#diagram_id")), null, null);
      t1 = new S.ControllerFactory(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      t1.ControllerFactory$2(this.ctx, diagramId);
      this.controllerFactory = t1;
      this.tableController = t1.tableController;
      this.relationshipController = t1.relationshipController;
      t2 = t1.canvasActionsController;
      this.canvasActionsController = t2;
      this.preferencesController = t1.preferencesController;
      this.specializationController = t1.specializationController;
      this.diagramController = t1.diagramController;
      t2.canvasInteractionStrategy = S.DefaultStrategy$(t2.ctx, t2.tableController, t2.relationshipController);
      t2 = this.diagramController;
      t1 = t2._HTTPRequestController;
      t1.toString;
      request = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(request, "GET", "/diagrams/" + H.S(J.toString$0(t1.diagramController.diagram.id)) + ".json", false);
      request.setRequestHeader("Content-Type", "application/json");
      request.send();
      t1 = request.status;
      if (t1 === 200 || t1 === 0 || t1 === 204) {
        mappedDiagram = C.JsonCodec_null_null.decode$1(request.responseText);
        t1 = J.getInterceptor$asx(mappedDiagram);
        if (J.$eq(t1.$index(mappedDiagram, "diagram_type"), $.DiagramController_CONCEPTUAL_DIAGRAM))
          t2.diagram.conceptual = true;
        if (J.$eq(t1.$index(mappedDiagram, "diagram_type"), $.DiagramController_LOGICAL_DIAGRAM))
          t2.diagram.logical = true;
      }
      if (this.diagramController.isConceptual$0()) {
        t1 = this.controllerFactory;
        C.JSArray_methods.set$length(t1.borderInteractionController.borderConnections, 0);
        t2 = t1.tableViewFactory;
        t2.logicalViews = false;
        t2.conceptualViews = true;
        t2.recreateViews$0();
        t2 = t1.tableModalFactory;
        t2.logicalViews = false;
        t2.conceptualViews = true;
        t2 = t1.relationshipViewFactory;
        t2.logicalViews = false;
        t2.conceptualViews = true;
        t2.recreateViews$0();
        t2 = t1.relationshipModalFactory;
        t2.logicalViews = false;
        t2.conceptualViews = true;
        t2 = t1.specializationViewFactory;
        t2.logicalViews = false;
        t2.conceptualViews = true;
        t1.borderInteractionController.calculateConnectionsLocation$0();
      }
      if (this.diagramController.isLogical$0()) {
        t1 = this.controllerFactory;
        C.JSArray_methods.set$length(t1.borderInteractionController.borderConnections, 0);
        t2 = t1.tableViewFactory;
        t2.logicalViews = true;
        t2.conceptualViews = false;
        t2.recreateViews$0();
        t2 = t1.tableModalFactory;
        t2.logicalViews = true;
        t2.conceptualViews = false;
        t2 = t1.relationshipViewFactory;
        t2.logicalViews = true;
        t2.conceptualViews = false;
        t2.recreateViews$0();
        t2 = t1.relationshipModalFactory;
        t2.logicalViews = true;
        t2.conceptualViews = false;
        t2 = t1.specializationViewFactory;
        t2.logicalViews = true;
        t2.conceptualViews = false;
        t1.borderInteractionController.calculateConnectionsLocation$0();
      }
      t1 = this.diagramController;
      t1.toString;
      request = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(request, "GET", "/diagrams/" + H.S(t1.diagram.id) + "/tables.json", false);
      request.setRequestHeader("Content-Type", "application/json");
      request.send();
      t2 = request.status;
      if (t2 === 200 || t2 === 0 || t2 === 204) {
        tables = C.JsonCodec_null_null.decode$1(request.responseText);
        t1.tableController.createTablesFromJsonMap$1(tables);
      }
      new XMLHttpRequest();
      request = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(request, "GET", "/diagrams/" + H.S(t1.diagram.id) + "/relationships.json", false);
      request.setRequestHeader("Content-Type", "application/json");
      request.send();
      t2 = request.status;
      if (t2 === 200 || t2 === 0 || t2 === 204) {
        relationships = C.JsonCodec_null_null.decode$1(request.responseText);
        t1.relationshipController.createRelationshipsFromJsonMap$1(relationships);
      }
      new XMLHttpRequest();
      request = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(request, "GET", "/diagrams/" + H.S(t1.diagram.id) + "/specializations.json", false);
      request.setRequestHeader("Content-Type", "application/json");
      request.send();
      t2 = request.status;
      if (t2 === 200 || t2 === 0 || t2 === 204) {
        specializations = C.JsonCodec_null_null.decode$1(request.responseText);
        t1.specializationController.createSpecializationFromJsonMap$1(specializations);
      }
      t1 = this.diagramController;
      t1.toString;
      J.set$display$x(document.querySelector("#canvas-actions-nav").style, "");
      if (t1.isLogical$0()) {
        J.insertAdjacentText$2$x(document.querySelector("#openTableModal"), "beforeend", "Rela\u00e7\u00e3o");
        J.remove$0$ax(document.querySelector("#relationCreationTernary").parentElement);
      }
      if (t1.isConceptual$0()) {
        J.insertAdjacentText$2$x(document.querySelector("#openTableModal"), "beforeend", "Entidade");
        J.remove$0$ax(document.querySelector("#relationCreationManyToMany").parentElement);
        J.remove$0$ax(document.querySelector("#logicalPhysicalConversion").parentElement);
      }
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_resize._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.MainController_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(document.querySelector("#preferences"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.MainController_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = window;
      t2 = this.get$redraw();
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    }, null, null, 2, 0, 172, 173, ""],
    static: {MainController$: [function(canvas) {
        var t1 = new S.MainController(null, null, null, null, null, null, null, null, null);
        t1.MainController$1(canvas);
        return t1;
      }, null, null, 2, 0, 172, 173, "new MainController"]}
  },
  "+MainController": 0,
  MainController_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var t1, canvasDivStyleHeight, canvasStyleDivWidth;
      t1 = this.this_0;
      canvasDivStyleHeight = H.Primitives_parseInt(J.replaceAll$2$s(J.get$height$x(t1.canvas.parentElement.style), "px", ""), null, null);
      canvasStyleDivWidth = H.Primitives_parseInt(J.replaceAll$2$s(J.get$width$x(t1.canvas.parentElement.style), "px", ""), null, null);
      t1.defineCanvasDivSize$0();
      if (J.$gt$n(canvasDivStyleHeight, J.get$height$x(t1.canvas)) === true || J.$gt$n(canvasStyleDivWidth, J.get$width$x(t1.canvas)) === true)
        t1.defineCanvasSize$2(canvasDivStyleHeight, canvasStyleDivWidth);
      return;
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ MainController_closure": 0,
  MainController_closure0: {
    "^": "Closure:567;this_1-",
    call$1: [function(evt) {
      var t1 = this.this_1.preferencesController;
      new S.PreferencesModal(null, null, null, null, null, null, null, null).PreferencesModal$2(t1, t1.preferences);
      return;
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ MainController_closure0": 0,
  ModalBaseFieldBuilder: {
    "^": "Object;",
    buildBaseFieldRow$1: [function(baseField) {
      this.baseField = baseField;
    }, "call$1", "get$buildBaseFieldRow", 2, 0, 531, 532, "buildBaseFieldRow"],
    _addRemoveButton$1: [function(baseFieldRow) {
      var removeButtonTd, linkRemove, t1, minusIcon, streamSub;
      removeButtonTd = document.createElement("td", null);
      baseFieldRow.appendChild(removeButtonTd);
      linkRemove = document.createElement("link", null);
      t1 = J.getInterceptor$x(linkRemove);
      t1.set$classes(linkRemove, ["btn", "btn-small"]);
      removeButtonTd.appendChild(linkRemove);
      minusIcon = W._ElementFactoryProvider_createElement_tag("i", null);
      J.set$classes$x(minusIcon, ["icon-minus-sign"]);
      linkRemove.appendChild(minusIcon);
      t1 = t1.get$onClick(linkRemove);
      streamSub = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.ModalBaseFieldBuilder__addRemoveButton_closure(this, linkRemove)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      streamSub._tryResume$0();
      return streamSub;
    }, "call$1", "get$_addRemoveButton", 2, 0, 577, 578, "_addRemoveButton"],
    _addPrimaryKey$1: [function(baseFieldRow) {
      var checkboxTd, primaryKeyInput, t1;
      checkboxTd = document.createElement("td", null);
      baseFieldRow.appendChild(checkboxTd);
      primaryKeyInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(primaryKeyInput);
      t1.set$type(primaryKeyInput, "checkbox");
      if (J.$eq(this.baseField.get$primaryKey(), true))
        t1.set$checked(primaryKeyInput, true);
      checkboxTd.appendChild(primaryKeyInput);
      return primaryKeyInput;
    }, "call$1", "get$_addPrimaryKey", 2, 0, 579, 578, "_addPrimaryKey"],
    _addFieldName$1: [function(baseFieldRow) {
      var fieldNameTd, controls, fieldNameInput, t1;
      fieldNameTd = document.createElement("td", null);
      baseFieldRow.appendChild(fieldNameTd);
      controls = document.createElement("div", null);
      J.set$classes$x(controls, ["controls"]);
      fieldNameTd.appendChild(controls);
      fieldNameInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(fieldNameInput);
      t1.set$type(fieldNameInput, "text");
      t1.set$classes(fieldNameInput, ["input"]);
      t1.set$placeholder(fieldNameInput, "Nome do campo");
      if (!J.$eq(J.get$name$x(this.baseField), ""))
        t1.set$value(fieldNameInput, J.get$name$x(this.baseField));
      fieldNameTd.appendChild(fieldNameInput);
      return fieldNameInput;
    }, "call$1", "get$_addFieldName", 2, 0, 579, 578, "_addFieldName"],
    _addForeignKey$1: [function(baseFieldRow) {
      var foreignKeyTd, foreignKeyInput, t1;
      foreignKeyTd = document.createElement("td", null);
      baseFieldRow.appendChild(foreignKeyTd);
      foreignKeyInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(foreignKeyInput);
      t1.set$type(foreignKeyInput, "checkbox");
      t1.set$disabled(foreignKeyInput, true);
      if (J.get$value$x(this.baseField.get$foreignKey()) === true)
        t1.set$checked(foreignKeyInput, J.get$value$x(this.baseField.get$foreignKey()));
      foreignKeyTd.appendChild(foreignKeyInput);
      return foreignKeyInput;
    }, "call$1", "get$_addForeignKey", 2, 0, 579, 578, "_addForeignKey"],
    _addNulls$1: [function(baseFieldRow) {
      var nullsTd, nullsInput, t1;
      nullsTd = document.createElement("td", null);
      baseFieldRow.appendChild(nullsTd);
      nullsInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(nullsInput);
      t1.set$type(nullsInput, "checkbox");
      if (J.$eq(this.baseField.get$nulls(), true))
        t1.set$checked(nullsInput, this.baseField.get$nulls());
      nullsTd.appendChild(nullsInput);
      return nullsInput;
    }, "call$1", "get$_addNulls", 2, 0, 579, 578, "_addNulls"],
    _addComposite$1: [function(baseFieldRow) {
      var compositeTd, compositeInput, t1;
      compositeTd = document.createElement("td", null);
      baseFieldRow.appendChild(compositeTd);
      compositeInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(compositeInput);
      t1.set$id(compositeInput, "composite_" + this.rng.nextInt$1(999999));
      t1.set$type(compositeInput, "checkbox");
      if (J.$eq(this.baseField.get$composite(), true))
        t1.set$checked(compositeInput, this.baseField.get$composite());
      compositeTd.appendChild(compositeInput);
      return compositeInput;
    }, "call$1", "get$_addComposite", 2, 0, 579, 578, "_addComposite"],
    _addMultivalued$1: [function(baseFieldRow) {
      var multivaluedTd, multivaluedInput, t1;
      multivaluedTd = document.createElement("td", null);
      baseFieldRow.appendChild(multivaluedTd);
      multivaluedInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(multivaluedInput);
      t1.set$type(multivaluedInput, "checkbox");
      if (J.$eq(this.baseField.get$multivalued(), true))
        t1.set$checked(multivaluedInput, this.baseField.get$multivalued());
      multivaluedTd.appendChild(multivaluedInput);
      return multivaluedInput;
    }, "call$1", "get$_addMultivalued", 2, 0, 579, 578, "_addMultivalued"],
    _addDerived$1: [function(baseFieldRow) {
      var derivedTd, derivedInput, t1;
      derivedTd = document.createElement("td", null);
      baseFieldRow.appendChild(derivedTd);
      derivedInput = W._ElementFactoryProvider_createElement_tag("input", null);
      t1 = J.getInterceptor$x(derivedInput);
      t1.set$type(derivedInput, "checkbox");
      if (J.$eq(this.baseField.get$derived(), true))
        t1.set$checked(derivedInput, this.baseField.get$derived());
      derivedTd.appendChild(derivedInput);
      return derivedInput;
    }, "call$1", "get$_addDerived", 2, 0, 579, 578, "_addDerived"],
    _addMoreFieldsRow$1: [function(tableBody) {
      var moreFieldRowsTr, moreFieldRowsTd, moreFieldRowsLink, plusIcon, t1;
      moreFieldRowsTr = document.createElement("tr", null);
      moreFieldRowsTr.id = "moreFieldRows";
      J.set$classes$x(moreFieldRowsTr, ["nodrag", "nodrop"]);
      tableBody.appendChild(moreFieldRowsTr);
      moreFieldRowsTd = document.createElement("td", null);
      moreFieldRowsTr.appendChild(moreFieldRowsTd);
      this._addExtraCells$1(moreFieldRowsTr);
      moreFieldRowsLink = document.createElement("link", null);
      J.set$classes$x(moreFieldRowsLink, ["btn", "btn-small"]);
      moreFieldRowsLink.id = this.moreFieldRowsBtnId;
      moreFieldRowsTd.appendChild(moreFieldRowsLink);
      plusIcon = W._ElementFactoryProvider_createElement_tag("i", null);
      J.set$classes$x(plusIcon, ["icon-plus-sign"]);
      moreFieldRowsLink.appendChild(plusIcon);
      t1 = "#" + H.S(this.moreFieldRowsBtnId);
      this._registerMoreFieldButton$1(document.querySelector(t1));
      t1 = $.get$context();
      Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1("#logical_field_table").tableDnD$0();
    }, "call$1", "get$_addMoreFieldsRow", 2, 0, 580, 581, "_addMoreFieldsRow"],
    _registerMoreFieldButton$1: [function(moreFieldRowsBtn) {
      var t1 = J.get$onClick$x(moreFieldRowsBtn);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.ModalBaseFieldBuilder__registerMoreFieldButton_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$_registerMoreFieldButton", 2, 0, 580, 582, "_registerMoreFieldButton"],
    _addExtraSubCells$1: [function(moreFieldRowsTr) {
      var i;
      for (i = 0; i < 6; ++i)
        moreFieldRowsTr.appendChild(document.createElement("td", null));
    }, "call$1", "get$_addExtraSubCells", 2, 0, 583, 584, "_addExtraSubCells"],
    _addMoreSubFieldsRow$1: [function(rowIndex) {
      var subFieldRow, moreFieldRowsTd, moreFieldRowsLink, dynamicId, plusIcon, t1;
      subFieldRow = document.createElement("tr", null);
      J.set$classes$x(subFieldRow, ["more_sub_field_rows_button"]);
      subFieldRow.appendChild(document.createElement("td", null));
      moreFieldRowsTd = document.createElement("td", null);
      subFieldRow.appendChild(moreFieldRowsTd);
      moreFieldRowsLink = document.createElement("link", null);
      J.set$classes$x(moreFieldRowsLink, ["btn", "btn-small"]);
      dynamicId = "more_field_table_rows_btn" + this.rng.nextInt$1(999999);
      moreFieldRowsLink.id = dynamicId;
      moreFieldRowsTd.appendChild(moreFieldRowsLink);
      plusIcon = W._ElementFactoryProvider_createElement_tag("i", null);
      J.set$classes$x(plusIcon, ["icon-plus-sign"]);
      moreFieldRowsLink.appendChild(plusIcon);
      t1 = this.tableBody;
      t1.toString;
      new W._ChildNodeListLazy(t1).insert$2(0, rowIndex, subFieldRow);
      this._addExtraSubCells$1(subFieldRow);
      t1 = "#" + dynamicId;
      return this._registerMoreSubFieldButton$2(document.querySelector(t1), subFieldRow);
    }, "call$1", "get$_addMoreSubFieldsRow", 2, 0, 585, 586, "_addMoreSubFieldsRow"],
    _registerMoreSubFieldButton$2: [function(moreFieldRowsBtn, subFieldRow) {
      var t1, streamsub;
      t1 = J.get$onClick$x(moreFieldRowsBtn);
      streamsub = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.ModalBaseFieldBuilder__registerMoreSubFieldButton_closure(this, subFieldRow)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      streamsub._tryResume$0();
      return streamsub;
    }, "call$2", "get$_registerMoreSubFieldButton", 4, 0, 587, 582, 588, "_registerMoreSubFieldButton"]
  },
  "+ModalBaseFieldBuilder": 0,
  ModalBaseFieldBuilder__addRemoveButton_closure: {
    "^": "Closure:567;this_0-,linkRemove_1-",
    call$1: [function(evt) {
      var t1 = this.linkRemove_1;
      if (t1.parentElement.parentElement.className !== "sub_field_row")
        this.this_0._removeSubFields$1(t1);
      J.remove$0$ax(t1.parentElement.parentElement);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ ModalBaseFieldBuilder__addRemoveButton_closure": 0,
  ModalBaseFieldBuilder__registerMoreFieldButton_closure: {
    "^": "Closure:541;this_0-",
    call$1: [function(evt) {
      this.this_0.buildBaseFieldRow$1(S.BaseField$dummy());
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ ModalBaseFieldBuilder__registerMoreFieldButton_closure": 0,
  ModalBaseFieldBuilder__registerMoreSubFieldButton_closure: {
    "^": "Closure:541;this_0-,subFieldRow_1-",
    call$1: [function(evt) {
      var dummyBaseField, t1, t2;
      dummyBaseField = S.BaseField$dummy();
      t1 = this.this_0;
      t2 = t1.tableBody;
      t2.toString;
      t2 = new W._ChildNodeListLazy(t2);
      t1._createSubField$2(dummyBaseField, t2.indexOf$2(t2, this.subFieldRow_1, 0));
    }, "call$1", null, 2, 0, 541, 540, "call"],
    $isFunction: true
  },
  "+ ModalBaseFieldBuilder__registerMoreSubFieldButton_closure": 0,
  Preferences: {
    "^": "Object;grid-,relationshipNameInLogicalDiagram-"
  },
  "+Preferences": 0,
  PreferencesController: {
    "^": "BaseController;canvas-,preferences-,controllerFactory-",
    setRequiredControllers$0: [function() {
    }, "call$0", "get$setRequiredControllers", 0, 0, 16, "setRequiredControllers"],
    _createCanvasToImageHandler$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#export_canvas_to_img"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.PreferencesController__createCanvasToImageHandler_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_createCanvasToImageHandler", 0, 0, 137, "_createCanvasToImageHandler"],
    PreferencesController$1: [function(canvas) {
      var t1;
      this.canvas = canvas;
      t1 = new S.Preferences(null, null);
      t1.grid = false;
      t1.relationshipNameInLogicalDiagram = false;
      this.preferences = t1;
      this._createCanvasToImageHandler$0();
    }, null, null, 2, 0, 0, 173, ""]
  },
  "+PreferencesController": 0,
  PreferencesController__createCanvasToImageHandler_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var e, t1;
      e = document.createElement("img", null);
      t1 = J.getInterceptor$x(e);
      t1.set$src(e, this.this_0.canvas.toDataURL("image/png", null));
      C.Window_methods.open$2(window, t1.get$src(e), "_blank");
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ PreferencesController__createCanvasToImageHandler_closure": 0,
  PreferencesModal: {
    "^": "BaseModal;preferencesController-,preferences-,grid-,relationshipNameLogicalInputelement-,_modalId-,_submitListener-,_submited-,type-",
    _handleSubmit$0: [function() {
      var t1 = J.get$onClick$x(document.querySelector("#preferences_submit"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.PreferencesModal__handleSubmit_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_handleSubmit", 0, 0, 16, "_handleSubmit"],
    PreferencesModal$2: [function(preferencesController, preferences) {
      var t1;
      this.preferencesController = preferencesController;
      this.preferences = preferences;
      this._modalId = "#preferences_modal";
      t1 = document.querySelector("#grid_preference");
      this.grid = t1;
      J.set$checked$x(t1, this.preferences.grid);
      t1 = document.querySelector("#relationship_name_logical_preference");
      this.relationshipNameLogicalInputelement = t1;
      J.set$checked$x(t1, this.preferences.relationshipNameInLogicalDiagram);
      this.showModal$0(0);
      this._handleSubmit$0();
    }, null, null, 4, 0, 589, 590, 591, ""]
  },
  "+PreferencesModal": 0,
  PreferencesModal__handleSubmit_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var t1, t2;
      t1 = this.this_0;
      t1.preferences.grid = J.get$checked$x(t1.grid);
      t1.preferences.relationshipNameInLogicalDiagram = J.get$checked$x(t1.relationshipNameLogicalInputelement);
      t2 = $.get$context();
      Q._deserialize(J.$index$asx(t2._jsObject, "jQuery"), t2).call$1(t1._modalId).modal$1("hide");
      t1 = t1.preferencesController;
      t2 = t1.preferences.grid;
      t1 = t1.canvas;
      if (t2 === true)
        J.set$backgroundImage$x(t1.style, "url(http://i.imgur.com/StCBO5W.png)");
      else
        J.set$backgroundImage$x(t1.style, "");
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ PreferencesModal__handleSubmit_closure": 0,
  ConceptualModalRelationshipFieldBuilder: {
    "^": "ModalBaseFieldBuilder;tableBody-,baseField-,rng-,moreFieldRowsBtnId-",
    setMoreFieldRowsBtnId$0: [function() {
      this.moreFieldRowsBtnId = "more_field_rows_conceptual_relationship";
    }, "call$0", "get$setMoreFieldRowsBtnId", 0, 0, 137, "setMoreFieldRowsBtnId"],
    buildBaseFieldRow$1: [function(relationshipField) {
      var t1, relationshipFieldRow, tableBody, compositeInput, rowIndex, t2;
      S.ModalBaseFieldBuilder.prototype.buildBaseFieldRow$1.call(this, relationshipField);
      t1 = J.get$children$x(this.tableBody);
      if (t1.get$length(t1) !== 0)
        J.remove$0$ax(this.tableBody.lastChild);
      relationshipFieldRow = document.createElement("tr", null);
      relationshipFieldRow.id = J.toString$0(J.get$id$x(relationshipField));
      tableBody = document.querySelector("#relationship_fields_table_body");
      tableBody.appendChild(relationshipFieldRow);
      this._addRemoveButton$1(relationshipFieldRow);
      relationshipFieldRow.appendChild(document.createElement("td", null));
      this._addPrimaryKey$1(relationshipFieldRow);
      this._addFieldName$1(relationshipFieldRow);
      compositeInput = this._addComposite$1(relationshipFieldRow);
      this._addMultivalued$1(relationshipFieldRow);
      this._addNulls$1(relationshipFieldRow);
      this._addDerived$1(relationshipFieldRow);
      t1 = new W._ChildNodeListLazy(tableBody);
      rowIndex = t1.indexOf$2(t1, relationshipFieldRow, 0);
      if (relationshipField.get$composite() === true)
        for (t1 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t1.moveNext$0() === true;) {
          ++rowIndex;
          this._createSubField$2(t1.get$current(), rowIndex);
        }
      this._addMoreFieldsRow$1(tableBody);
      t1 = J.getInterceptor$x(compositeInput);
      t2 = "#" + H.S(t1.get$id(compositeInput));
      document.querySelector(t2);
      t1.get$onClick(compositeInput).listen$1(new S.ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure(this, relationshipFieldRow, tableBody, compositeInput));
    }, "call$1", "get$buildBaseFieldRow", 2, 0, 592, 593, "buildBaseFieldRow"],
    _addExtraCells$1: [function(moreFieldRowsTr) {
      var i;
      for (i = 0; i < 7; ++i)
        moreFieldRowsTr.appendChild(document.createElement("td", null));
    }, "call$1", "get$_addExtraCells", 2, 0, 0, 584, "_addExtraCells"],
    _createSubField$2: [function(baseField, subFieldRowIndex) {
      var t1, t2, result, relationshipSubFieldRow, classSet;
      this.baseField = baseField;
      t1 = this.tableBody;
      if (t1.childNodes.length !== subFieldRowIndex) {
        t2 = t1.childNodes;
        if (subFieldRowIndex < 0 || subFieldRowIndex >= t2.length)
          return H.ioore(t2, subFieldRowIndex);
        result = t2[subFieldRowIndex];
        t1.removeChild(result);
      }
      relationshipSubFieldRow = document.createElement("tr", null);
      relationshipSubFieldRow.id = J.toString$0(J.get$id$x(baseField));
      classSet = J.get$classes$x(relationshipSubFieldRow);
      classSet.clear$0(0);
      classSet.addAll$1(classSet, ["sub_field_row"]);
      t1 = this.tableBody;
      t1.toString;
      new W._ChildNodeListLazy(t1).insert$2(0, subFieldRowIndex, relationshipSubFieldRow);
      relationshipSubFieldRow.appendChild(document.createElement("td", null));
      this._addRemoveButton$1(relationshipSubFieldRow);
      this._addFieldName$1(relationshipSubFieldRow);
      relationshipSubFieldRow.appendChild(document.createElement("td", null));
      this._addMultivalued$1(relationshipSubFieldRow);
      this._addNulls$1(relationshipSubFieldRow);
      this._addDerived$1(relationshipSubFieldRow);
      this._addMoreSubFieldsRow$1(subFieldRowIndex + 1);
    }, "call$2", "get$_createSubField", 4, 0, 594, 532, 595, "_createSubField"],
    _removeSubFields$1: [function(linkRemove) {
      var fieldLine, t1, mainFieldIndex, RelationshipSubFieldRow;
      fieldLine = linkRemove.parentElement.parentElement;
      t1 = this.tableBody;
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      mainFieldIndex = t1.indexOf$1(t1, fieldLine) + 1;
      t1 = this.tableBody;
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      RelationshipSubFieldRow = t1.elementAt$1(t1, mainFieldIndex);
      while (true) {
        t1 = J.getInterceptor$x(RelationshipSubFieldRow);
        if (!(J.$eq(t1.get$className(RelationshipSubFieldRow), "sub_field_row") || J.$eq(t1.get$className(RelationshipSubFieldRow), "more_sub_field_rows_button")))
          break;
        t1.remove$0(RelationshipSubFieldRow);
        t1 = this.tableBody;
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        RelationshipSubFieldRow = t1.elementAt$1(t1, mainFieldIndex);
      }
    }, "call$1", "get$_removeSubFields", 2, 0, 580, 596, "_removeSubFields"]
  },
  "+ConceptualModalRelationshipFieldBuilder": 0,
  ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure: {
    "^": "Closure:567;this_0-,relationshipFieldRow_1-,tableBody_2-,compositeInput_3-",
    call$1: [function(evt) {
      var t1;
      if (J.$eq(J.get$checked$x(this.compositeInput_3), true)) {
        S.BaseField$dummy();
        t1 = new W._ChildNodeListLazy(this.tableBody_2);
        this.this_0._addMoreSubFieldsRow$1(t1.indexOf$2(t1, this.relationshipFieldRow_1, 0) + 1);
      }
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure": 0,
  ConceptualRelationshipModal: {
    "^": "RelationshipModal;tableBody-,oldRelationship-,relationship-,relationshipController-,_canceled-,modelingType-,_modalId-,_submitListener-,_submited-,type-",
    setModelingType$0: [function() {
      this.modelingType = "conceptual";
    }, "call$0", "get$setModelingType", 0, 0, 137, "setModelingType"],
    _addRelationshipFieldRow$1: [function(relationshipField) {
      var cmrfb = new S.ConceptualModalRelationshipFieldBuilder(null, null, null, null);
      cmrfb.tableBody = document.querySelector("#relationship_fields_table_body");
      cmrfb.rng = C.C__JSRandom;
      cmrfb.setMoreFieldRowsBtnId$0();
      cmrfb.buildBaseFieldRow$1(relationshipField);
    }, "call$1", "get$_addRelationshipFieldRow", 2, 0, 592, 593, "_addRelationshipFieldRow"],
    _populateInputFromModel$0: [function() {
      var inputParentTableName, inputChildTableName, inputParentTernaryTableName, inputTernaryTableName, ternaryDiv, rolesDiv, t1, relationshipField, cmrfb;
      J.set$value$x(document.querySelector("#conceptual_relationship_name"), J.get$name$x(this.relationship));
      inputParentTableName = document.querySelector("#conceptual_relationship_parent_name");
      inputChildTableName = document.querySelector("#conceptual_relationship_child_name");
      inputParentTernaryTableName = document.querySelector("#conceptual_relationship_ternary_parent_name");
      inputTernaryTableName = document.querySelector("#conceptual_relationship_ternary_name");
      J.set$value$x(inputParentTableName, J.get$name$x(this.relationship.get$parentTable()));
      J.set$value$x(inputChildTableName, J.get$name$x(this.relationship.get$childTable()));
      J.set$value$x(inputParentTernaryTableName, J.get$name$x(this.relationship.get$parentTable()));
      if (this.relationship.get$ternaryTable() != null)
        J.set$value$x(inputTernaryTableName, J.get$name$x(this.relationship.get$ternaryTable()));
      this._linkParentTableToTernaryParentCardinalities$0();
      ternaryDiv = document.querySelector("#ternaryRelationsihp");
      if (this.relationship.get$ternaryTable() == null)
        J.set$display$x(ternaryDiv.style, "none");
      else
        J.set$display$x(ternaryDiv.style, "");
      rolesDiv = document.querySelector("#self_relationship_roles_div");
      if (J.$eq(this.relationship.get$dataType(), "Auto-relacionamento"))
        J.set$display$x(rolesDiv.style, "");
      else
        J.set$display$x(rolesDiv.style, "none");
      J.set$checked$x(document.querySelector("#conceptual_identifying_relationship"), this.relationship.get$identifying());
      if (J.$eq(this.relationship.get$parentTable(), this.relationship.get$childTable()))
        J.set$checked$x(document.querySelector("#conceptual_auto_relationship"), true);
      if (J.$eq(J.get$length$asx(this.relationship.get$relationshipFields()), 0))
        this._addRelationshipFieldRow$1(S.BaseField$dummy());
      else
        for (t1 = J.get$iterator$ax(this.relationship.get$relationshipFields()); t1.moveNext$0() === true;) {
          relationshipField = t1.get$current();
          cmrfb = new S.ConceptualModalRelationshipFieldBuilder(null, null, null, null);
          cmrfb.tableBody = document.querySelector("#relationship_fields_table_body");
          cmrfb.rng = C.C__JSRandom;
          cmrfb.setMoreFieldRowsBtnId$0();
          cmrfb.buildBaseFieldRow$1(relationshipField);
        }
      if (J.get$isNotEmpty$asx(J.get$name$x(this.relationship)) === true) {
        J.set$value$x(document.querySelector("#conceptual_relationship_cardinality_parent"), this.relationship.get$parentCardinality());
        J.set$value$x(document.querySelector("#conceptual_relationship_ternary_cardinality_parent"), this.relationship.get$parentCardinality());
        if (this.relationship.get$ternaryTable() != null)
          J.set$value$x(document.querySelector("#conceptual_relationship_ternary_cardinality_child"), this.relationship.get$ternaryCardinality());
        if (J.$eq(this.relationship.get$dataType(), "Auto-relacionamento")) {
          J.set$value$x(document.querySelector("#conceptual_relationship_parent_role"), this.relationship.get$parentRole());
          J.set$value$x(document.querySelector("#conceptual_relationship_child_role"), this.relationship.get$childRole());
        }
        J.set$value$x(document.querySelector("#conceptual_relationship_cardinality_child"), this.relationship.get$childCardinality());
      }
    }, "call$0", "get$_populateInputFromModel", 0, 0, 16, "_populateInputFromModel"],
    _populateModelWithInput$0: [function() {
      var relationshipName, relationshipParentCardinality, relationshipChildCardinality, relationshipTernaryCardinality, relationshipParentRole, relationshipChildRole, relationshipIdentifyting, t1, relationshipField, fieldRow, t2, t3, subRelationshipField;
      relationshipName = document.querySelector("#conceptual_relationship_name");
      J.set$name$x(this.relationship, J.get$value$x(relationshipName));
      relationshipParentCardinality = document.querySelector("#conceptual_relationship_cardinality_parent");
      this.relationship.set$parentCardinality(J.get$value$x(relationshipParentCardinality));
      relationshipChildCardinality = document.querySelector("#conceptual_relationship_cardinality_child");
      this.relationship.set$childCardinality(J.get$value$x(relationshipChildCardinality));
      if (this.relationship.get$ternaryTable() != null) {
        relationshipTernaryCardinality = document.querySelector("#conceptual_relationship_ternary_cardinality_child");
        this.relationship.set$ternaryCardinality(J.get$value$x(relationshipTernaryCardinality));
      }
      relationshipParentRole = document.querySelector("#conceptual_relationship_parent_role");
      this.relationship.set$parentRole(J.get$value$x(relationshipParentRole));
      relationshipChildRole = document.querySelector("#conceptual_relationship_child_role");
      this.relationship.set$childRole(J.get$value$x(relationshipChildRole));
      relationshipIdentifyting = document.querySelector("#conceptual_identifying_relationship");
      this.relationship.set$identifying(J.get$checked$x(relationshipIdentifyting));
      J.clear$0$ax(this.relationship.get$relationshipFields());
      for (t1 = J.get$iterator$ax(J.get$rows$x(document.querySelector("#relationship_field_table")))._html$_iterator, relationshipField = null; t1.moveNext$0();) {
        fieldRow = t1._html$_current;
        t2 = J.getInterceptor$x(fieldRow);
        t3 = t2.get$cells(fieldRow)._list;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        if (J.get$tagName$x(t3[0]) === "TH")
          continue;
        if (t2.get$id(fieldRow) === "moreFieldRows")
          continue;
        if (t2.get$className(fieldRow) === "sub_field_row") {
          subRelationshipField = this._readAsRelationshipSubField$1(fieldRow);
          if (subRelationshipField != null)
            J.add$1$ax(relationshipField.baseSubFields, subRelationshipField);
        } else if (t2.get$className(fieldRow) === "more_sub_field_rows_button")
          continue;
        else {
          relationshipField = this._readAsRelationshipField$1(fieldRow);
          if (relationshipField != null)
            J.add$1$ax(this.relationship.get$relationshipFields(), relationshipField);
        }
      }
      this._mapOldPositions$2(this.relationship, this.oldRelationship);
    }, "call$0", "get$_populateModelWithInput", 0, 0, 16, "_populateModelWithInput"],
    _linkParentTableToTernaryParentCardinalities$0: [function() {
      var relationshipParentCardinality, relationshipTernaryParentCardinality, t1;
      relationshipParentCardinality = document.querySelector("#conceptual_relationship_cardinality_parent");
      relationshipTernaryParentCardinality = document.querySelector("#conceptual_relationship_ternary_cardinality_parent");
      t1 = J.get$onChange$x(relationshipParentCardinality);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure(relationshipParentCardinality, relationshipTernaryParentCardinality)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$0", "get$_linkParentTableToTernaryParentCardinalities", 0, 0, 137, "_linkParentTableToTernaryParentCardinalities"],
    _readAsRelationshipField$1: [function(fieldRow) {
      var t1, fieldRowCells, relationshipFieldId, primaryKey, $name, composite, multivalued, nulls, derived;
      t1 = J.getInterceptor$x(fieldRow);
      fieldRowCells = t1.get$cells(fieldRow);
      relationshipFieldId = t1.get$id(fieldRow) !== "null" ? H.Primitives_parseInt(t1.get$id(fieldRow), null, null) : null;
      t1 = fieldRowCells._list;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      primaryKey = J.get$checked$x(J.$index$asx(J.get$children$x(t1[2]), 0));
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      $name = J.get$value$x(J.$index$asx(J.get$children$x(t1[3]), 1));
      if (J.get$isEmpty$asx($name) === true)
        return;
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      composite = J.get$checked$x(J.$index$asx(J.get$children$x(t1[4]), 0));
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      multivalued = J.get$checked$x(J.$index$asx(J.get$children$x(t1[5]), 0));
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      nulls = J.get$checked$x(J.$index$asx(J.get$children$x(t1[6]), 0));
      if (7 >= t1.length)
        return H.ioore(t1, 7);
      derived = J.get$checked$x(J.$index$asx(J.get$children$x(t1[7]), 0));
      t1 = new S.ForeignKey(null, null);
      t1.value = false;
      t1.foreignTableId = -1;
      return S.RelationshipField$(relationshipFieldId, $name, primaryKey, t1, nulls, composite, multivalued, derived, null);
    }, "call$1", "get$_readAsRelationshipField", 2, 0, 597, 598, "_readAsRelationshipField"],
    _readAsRelationshipSubField$1: [function(fieldRow) {
      var t1, fieldRowCells, relationshipSubFieldId, $name, multivalued, nulls, derived;
      t1 = J.getInterceptor$x(fieldRow);
      fieldRowCells = t1.get$cells(fieldRow);
      relationshipSubFieldId = t1.get$id(fieldRow) !== "null" ? H.Primitives_parseInt(t1.get$id(fieldRow), null, null) : null;
      t1 = fieldRowCells._list;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      $name = J.get$value$x(J.$index$asx(J.get$children$x(t1[2]), 1));
      if (J.get$isEmpty$asx($name) === true)
        return;
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      multivalued = J.get$checked$x(J.$index$asx(J.get$children$x(t1[4]), 0));
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      nulls = J.get$checked$x(J.$index$asx(J.get$children$x(t1[5]), 0));
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      derived = J.get$checked$x(J.$index$asx(J.get$children$x(t1[6]), 0));
      t1 = new S.ForeignKey(null, null);
      t1.value = false;
      t1.foreignTableId = -1;
      return S.RelationshipField$(relationshipSubFieldId, $name, false, t1, nulls, null, multivalued, derived, null);
    }, "call$1", "get$_readAsRelationshipSubField", 2, 0, 597, 598, "_readAsRelationshipSubField"],
    _clearModal$0: [function() {
      this._clearHelpSpans$0();
      this._clearControlGroupDivs$0();
      J.set$value$x(document.querySelector("#conceptual_relationship_name"), "");
      J.set$checked$x(document.querySelector("#conceptual_auto_relationship"), false);
      J.set$checked$x(document.querySelector("#conceptual_identifying_relationship"), false);
      document.querySelector("#relationship_fields_table_body").textContent = "";
    }, "call$0", "get$_clearModal", 0, 0, 16, "_clearModal"],
    ConceptualRelationshipModal$4: [function(relationship, modalType, relationshipController, modalId) {
      this.oldRelationship = J.clone$0$x(relationship);
      this.tableBody = document.querySelector("#relationship_fields_table_body");
    }, null, null, 8, 0, 599, 600, 601, 165, 602, ""]
  },
  "+ConceptualRelationshipModal": 0,
  ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure: {
    "^": "Closure:567;relationshipParentCardinality_0-,relationshipTernaryParentCardinality_1-",
    call$1: [function(evt) {
      J.set$value$x(this.relationshipTernaryParentCardinality_1, J.get$value$x(this.relationshipParentCardinality_0));
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure": 0,
  LogicalRelationshipModal: {
    "^": "RelationshipModal;nameInput-,dataTypeInput-,nullAllowedInput-,cardinalityInput-,parentNameInput-,childNameInput-,nullAllowedGroup-,cardinalityGroup-,relationship-,relationshipController-,_canceled-,modelingType-,_modalId-,_submitListener-,_submited-,type-",
    _setRelationshipMode$0: [function() {
      J.set$disabled$x(this.dataTypeInput, true);
      switch (this.relationship.get$dataType()) {
        case "Relacionamento identificador":
          J.set$value$x(this.nullAllowedInput, "N\u00e3o permitir");
          J.set$disabled$x(this.nullAllowedInput, true);
          break;
        case "Relacionamento n\u00e3o identificador":
          J.set$disabled$x(this.nullAllowedInput, false);
          break;
        case "Relacionamento muitos para muitos":
          J.set$display$x(this.nullAllowedGroup.style, "none");
          J.set$display$x(this.cardinalityGroup.style, "none");
          break;
        case "Auto-relacionamento":
          J.set$disabled$x(this.dataTypeInput, true);
          break;
      }
    }, "call$0", "get$_setRelationshipMode", 0, 0, 137, "_setRelationshipMode"],
    loadInputElements$0: [function() {
      this.nameInput = document.querySelector("#logical_relationship_name");
      this.dataTypeInput = document.querySelector("#logical_relationship_data_type");
      this.nullAllowedInput = document.querySelector("#logical_relationship_null_allowed");
      this.cardinalityInput = document.querySelector("#logical_relationship_cardinality");
      this.parentNameInput = document.querySelector("#logical_relationship_parent_name");
      this.childNameInput = document.querySelector("#logical_relationship_child_name");
      this.nullAllowedGroup = document.querySelector("#logical_relationship_null_allowed_group");
      this.cardinalityGroup = document.querySelector("#logical_relationship_cardinality_group");
    }, "call$0", "get$loadInputElements", 0, 0, 137, "loadInputElements"],
    _populateInputFromModel$0: [function() {
      this.loadInputElements$0();
      J.set$value$x(this.parentNameInput, J.get$name$x(this.relationship.get$parentTable()));
      J.set$value$x(this.childNameInput, J.get$name$x(this.relationship.get$childTable()));
      J.set$value$x(this.nameInput, J.get$name$x(this.relationship));
      J.set$value$x(this.dataTypeInput, this.relationship.get$dataType());
      J.set$value$x(this.nullAllowedInput, this.relationship.get$nullAllowed());
      J.set$value$x(this.cardinalityInput, this.relationship.get$parentCardinality());
    }, "call$0", "get$_populateInputFromModel", 0, 0, 16, "_populateInputFromModel"],
    _populateModelWithInput$0: [function() {
      this.loadInputElements$0();
      J.set$name$x(this.relationship, J.get$value$x(this.nameInput));
      if (J.get$isEmpty$asx(J.get$name$x(this.relationship)) === true) {
        P.print("relationship name is empty");
        var t1 = this.relationship;
        J.set$name$x(t1, J.$add$ns(J.get$name$x(t1.get$parentTable()), J.get$name$x(this.relationship.get$childTable())));
      }
      this.relationship.set$dataType(J.get$value$x(this.dataTypeInput));
      this.relationship.set$nullAllowed(J.get$value$x(this.nullAllowedInput));
      this.relationship.set$parentCardinality(J.get$value$x(this.cardinalityInput));
    }, "call$0", "get$_populateModelWithInput", 0, 0, 16, "_populateModelWithInput"],
    _clearModal$0: [function() {
      this.loadInputElements$0();
      J.set$value$x(this.nameInput, "");
      J.set$disabled$x(this.dataTypeInput, true);
      J.set$disabled$x(this.nullAllowedInput, false);
      J.set$value$x(this.nullAllowedInput, "Permitir");
      J.set$value$x(this.cardinalityInput, "Zero ou um");
      J.set$display$x(this.nullAllowedGroup.style, "");
      J.set$display$x(this.cardinalityGroup.style, "");
    }, "call$0", "get$_clearModal", 0, 0, 16, "_clearModal"],
    setModelingType$0: [function() {
      this.modelingType = "logical";
    }, "call$0", "get$setModelingType", 0, 0, 16, "setModelingType"]
  },
  "+LogicalRelationshipModal": 0,
  RelationshipModal: {
    "^": "BaseModal;relationship<-",
    _handleSubmit$0: [function() {
      var t1 = H.S(this._modalId) + "_submit";
      t1 = J.get$onClick$x(document.querySelector(t1));
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationshipModal__handleSubmit_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this._submitListener = t1;
    }, "call$0", "get$_handleSubmit", 0, 0, 16, "_handleSubmit"],
    receiveErrorsFromValidation$1: [function(errors) {
      var t1, t2, t3;
      this.waitForValidationInstance$2(H.S(this._modalId) + "_submit", false);
      if (J.$eq(J.get$length$asx(errors), 0)) {
        t1 = this.type;
        t2 = this.relationshipController;
        t3 = this.relationship;
        if (t1 === "CREATE")
          t2.createRelationship$1(t3);
        else
          t2.updateRelationship$1(t3);
        t1 = $.get$context();
        Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1(this._modalId).modal$1("hide");
      } else
        this._displayErrors$1(errors);
    }, "call$1", "get$receiveErrorsFromValidation", 2, 0, 191, 603, "receiveErrorsFromValidation"],
    _displayErrors$1: [function(errors) {
      var t1, t2, key, messagesOfKey, t3, fullMessage, i, t4, inputWithError, helpSpan, classSet;
      this._clearControlGroupDivs$0();
      this._clearHelpSpans$0();
      for (t1 = J.get$iterator$ax(errors.get$keys()), t2 = J.getInterceptor$asx(errors); t1.moveNext$0() === true;) {
        key = t1.get$current();
        messagesOfKey = t2.$index(errors, key);
        t3 = J.getInterceptor$asx(messagesOfKey);
        fullMessage = t3.$index(messagesOfKey, 0);
        i = 1;
        while (true) {
          t4 = t3.get$length(messagesOfKey);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          fullMessage = H.S(fullMessage) + ", " + H.S(t3.$index(messagesOfKey, i));
          ++i;
        }
        t3 = "#" + H.S(this.modelingType) + "_relationship_" + H.S(key);
        inputWithError = document.querySelector(t3);
        helpSpan = document.createElement("span", null);
        classSet = J.get$classes$x(helpSpan);
        classSet.clear$0(0);
        classSet.addAll$1(classSet, ["help-inline"]);
        helpSpan.textContent = fullMessage;
        inputWithError.parentElement.appendChild(helpSpan);
        classSet = J.get$classes$x(inputWithError.parentElement.parentElement);
        classSet.clear$0(0);
        classSet.addAll$1(classSet, ["control-group", "error"]);
      }
    }, "call$1", "get$_displayErrors", 2, 0, 191, 603, "_displayErrors"],
    _clearHelpSpans$0: [function() {
      var helpSpans, t1;
      helpSpans = W._FrozenElementList$_wrap(document.querySelectorAll(".help-inline"), null);
      for (t1 = helpSpans.get$iterator(helpSpans); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    }, "call$0", "get$_clearHelpSpans", 0, 0, 16, "_clearHelpSpans"],
    _clearControlGroupDivs$0: [function() {
      var controlGroupDivs, t1;
      controlGroupDivs = W._FrozenElementList$_wrap(document.querySelectorAll(".control-group"), null);
      for (t1 = controlGroupDivs.get$iterator(controlGroupDivs); t1.moveNext$0();)
        J.set$classes$x(t1._current, ["control-group"]);
    }, "call$0", "get$_clearControlGroupDivs", 0, 0, 16, "_clearControlGroupDivs"],
    RelationshipModal$4: [function(relationship, modalType, relationshipController, modalId) {
      this.relationship = relationship;
      this.relationshipController = relationshipController;
      this._canceled = false;
      this._modalId = modalId;
      if (modalType === "CREATE")
        this.type = "CREATE";
      else
        this.type = "EDIT";
      this._clearModal$0();
      this._populateInputFromModel$0();
      this._handleSubmit$0();
      this.setModelingType$0();
      this.showModal$0(0);
    }, null, null, 8, 0, 599, 600, 601, 165, 602, ""]
  },
  "+RelationshipModal": 0,
  RelationshipModal__handleSubmit_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.waitForValidationInstance$2(H.S(t1._modalId) + "_submit", true);
      t1._clearHelpSpans$0();
      t1._clearControlGroupDivs$0();
      t1._populateModelWithInput$0();
      t1.relationshipController.validate$2(t1.relationship, t1);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ RelationshipModal__handleSubmit_closure": 0,
  RelationshipModalFactory: {
    "^": "ModalFactory;logicalViews-,conceptualViews-",
    newTableModal$3: [function(relationship, modalType, relationshipController) {
      var t1;
      if (this.logicalViews === true) {
        t1 = new S.LogicalRelationshipModal(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.RelationshipModal$4(relationship, modalType, relationshipController, "#logical_relationship_modal");
        t1._setRelationshipMode$0();
        return t1;
      }
      if (this.conceptualViews === true) {
        t1 = new S.ConceptualRelationshipModal(null, null, null, null, null, null, null, null, null, null);
        t1.RelationshipModal$4(relationship, modalType, relationshipController, "#conceptual_relationship_modal");
        t1.ConceptualRelationshipModal$4(relationship, modalType, relationshipController, "#conceptual_relationship_modal");
        return t1;
      }
    }, "call$3", "get$newTableModal", 6, 0, 604, 600, 601, 165, "newTableModal"]
  },
  "+RelationshipModalFactory": 0,
  Relationship: {
    "^": "BaseCanvasModel;parentTable@-,childTable@-,ternaryTable@-,dataType@-,name*-,nullAllowed@-,parentCardinality@-,childCardinality@-,ternaryCardinality@-,parentRole@-,childRole@-,identifying@-,ternaryConnection@-,relationshipFields<-,nameDiamond<-,nameDiamondMiddlePoint<-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    createNameDiamond$1: [function(nameWidth) {
      var t1, t2, northToWestMiddlePoint, northToEastMiddlePoint, southToWestMiddlePoint;
      t1 = J.$eq(this.parentTable, this.childTable);
      t2 = this.parentTable;
      if (t1)
        this.nameDiamondMiddlePoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.get$x$x(t2), J.$div$n(J.get$width$x(this.parentTable), 2)), J.$add$ns(J.get$y$x(this.parentTable), J.$mul$ns(J.get$height$x(this.parentTable), 3))), [null]);
      else
        this.nameDiamondMiddlePoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.$div$n(J.$add$ns(J.get$x$x(t2), J.get$x$x(this.childTable)), 2), J.$div$n(J.$add$ns(J.get$width$x(this.parentTable), J.get$width$x(this.childTable)), 2)), J.$add$ns(J.$div$n(J.$add$ns(J.get$y$x(this.parentTable), J.get$y$x(this.childTable)), 2), J.$div$n(J.$add$ns(J.get$height$x(this.parentTable), J.get$height$x(this.childTable)), 2))), [null]);
      this.updateNameDiamondPoints$1(nameWidth);
      northToWestMiddlePoint = S.calculateMiddlePoint(this.nameDiamond.$index(0, "NORTH"), this.nameDiamond.$index(0, "WEST"));
      northToEastMiddlePoint = S.calculateMiddlePoint(this.nameDiamond.$index(0, "NORTH"), this.nameDiamond.$index(0, "EAST"));
      southToWestMiddlePoint = S.calculateMiddlePoint(this.nameDiamond.$index(0, "SOUTH"), this.nameDiamond.$index(0, "WEST"));
      this.x = J.$sub$n(northToWestMiddlePoint.x, 2);
      this.y = J.$sub$n(northToWestMiddlePoint.y, 2);
      this.width = S.distance2D(northToWestMiddlePoint, northToEastMiddlePoint) + 5;
      this.height = S.distance2D(northToWestMiddlePoint, southToWestMiddlePoint) + 5;
    }, "call$1", "get$createNameDiamond", 2, 0, 374, 605, "createNameDiamond"],
    updateNameDiamond$1: [function(nameWidth) {
      var t1, t2, t3;
      t1 = this.x;
      t2 = J.getInterceptor$ns(t1);
      t1 = J.$div$n(t2.$add(t1, t2.$add(t1, this.width)), 2);
      t2 = this.y;
      t3 = J.getInterceptor$ns(t2);
      this.nameDiamondMiddlePoint = H.setRuntimeTypeInfo(new P.Point(t1, J.$div$n(t3.$add(t2, t3.$add(t2, this.height)), 2)), [null]);
      this.updateNameDiamondPoints$1(nameWidth);
    }, "call$1", "get$updateNameDiamond", 2, 0, 374, 605, "updateNameDiamond"],
    updateNameDiamondPoints$1: [function(nameWidth) {
      var t1, northPoint, t2, westPoint, southPoint, eastPoint;
      this.nameDiamond.clear$0(0);
      t1 = this.nameDiamondMiddlePoint;
      northPoint = H.setRuntimeTypeInfo(new P.Point(t1.x, J.$sub$n(t1.y, 20)), [null]);
      t1 = this.nameDiamondMiddlePoint.x;
      if (typeof nameWidth !== "number")
        return nameWidth.$mul();
      t2 = nameWidth * 1.2;
      westPoint = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(t1, t2), this.nameDiamondMiddlePoint.y), [null]);
      t1 = this.nameDiamondMiddlePoint;
      southPoint = H.setRuntimeTypeInfo(new P.Point(t1.x, J.$add$ns(t1.y, 20)), [null]);
      eastPoint = H.setRuntimeTypeInfo(new P.Point(J.$add$ns(this.nameDiamondMiddlePoint.x, t2), this.nameDiamondMiddlePoint.y), [null]);
      this.nameDiamond.$indexSet(0, "NORTH", northPoint);
      this.nameDiamond.$indexSet(0, "WEST", westPoint);
      this.nameDiamond.$indexSet(0, "SOUTH", southPoint);
      this.nameDiamond.$indexSet(0, "EAST", eastPoint);
    }, "call$1", "get$updateNameDiamondPoints", 2, 0, 374, 605, "updateNameDiamondPoints"],
    clone$0: [function(_) {
      var cloneRelationshipFields, t1, relationshipField, t2, cloneRelationshipField, clonedSubRelationshipFields, subRelationshipField, t3, cloneSubRelationshipField, cloneRelationship;
      cloneRelationshipFields = H.setRuntimeTypeInfo([], [S.RelationshipField]);
      for (t1 = this.relationshipFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        relationshipField = t1._current;
        t2 = J.getInterceptor$x(relationshipField);
        cloneRelationshipField = S.RelationshipField$(t2.get$id(relationshipField), t2.get$name(relationshipField), relationshipField.get$primaryKey(), relationshipField.get$foreignKey(), relationshipField.get$nulls(), relationshipField.get$composite(), relationshipField.get$multivalued(), relationshipField.get$derived(), relationshipField.get$baseSubFields());
        cloneRelationshipField.x = t2.get$x(relationshipField);
        cloneRelationshipField.y = t2.get$y(relationshipField);
        cloneRelationshipFields.push(cloneRelationshipField);
        clonedSubRelationshipFields = [];
        clonedSubRelationshipFields.$builtinTypeInfo = [S.RelationshipField];
        for (t2 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t2.moveNext$0() === true;) {
          subRelationshipField = t2.get$current();
          t3 = J.getInterceptor$x(subRelationshipField);
          cloneSubRelationshipField = S.RelationshipField$(t3.get$id(subRelationshipField), t3.get$name(subRelationshipField), subRelationshipField.get$primaryKey(), subRelationshipField.get$foreignKey(), subRelationshipField.get$nulls(), subRelationshipField.get$composite(), subRelationshipField.get$multivalued(), relationshipField.get$derived(), subRelationshipField.get$baseSubFields());
          cloneRelationshipField.x = t3.get$x(subRelationshipField);
          cloneRelationshipField.y = t3.get$y(subRelationshipField);
          clonedSubRelationshipFields.push(cloneSubRelationshipField);
        }
        cloneRelationshipField.baseSubFields = clonedSubRelationshipFields;
      }
      cloneRelationship = S.Relationship$(this.diagramId, this.parentTable, this.childTable, this.dataType, this.relationshipFields);
      cloneRelationship.id = this.id;
      cloneRelationship.name = this.name;
      cloneRelationship.dataType = this.dataType;
      cloneRelationship.nullAllowed = this.nullAllowed;
      cloneRelationship.parentCardinality = this.parentCardinality;
      cloneRelationship.childCardinality = this.childCardinality;
      cloneRelationship.ternaryCardinality = this.ternaryCardinality;
      cloneRelationship.ternaryTable = this.ternaryTable;
      cloneRelationship.parentRole = this.parentRole;
      cloneRelationship.childRole = this.childRole;
      cloneRelationship.identifying = this.identifying;
      cloneRelationship.relationshipFields = cloneRelationshipFields;
      cloneRelationship.x = this.x;
      cloneRelationship.y = this.y;
      cloneRelationship.width = this.width;
      cloneRelationship.height = this.height;
      return cloneRelationship;
    }, "call$0", "get$clone", 0, 0, 606, "clone"],
    toJson$1: [function(oldRelationship) {
      var map, mappedFields;
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(0, "relationship", P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.$indexSet$ax(map.$index(0, "relationship"), "id", this.id);
      J.$indexSet$ax(map.$index(0, "relationship"), "x", this.x);
      J.$indexSet$ax(map.$index(0, "relationship"), "y", this.y);
      J.$indexSet$ax(map.$index(0, "relationship"), "width", this.width);
      J.$indexSet$ax(map.$index(0, "relationship"), "height", this.height);
      J.$indexSet$ax(map.$index(0, "relationship"), "diagram_id", this.diagramId);
      J.$indexSet$ax(map.$index(0, "relationship"), "identifying", this.identifying);
      J.$indexSet$ax(map.$index(0, "relationship"), "name", this.name);
      J.$indexSet$ax(map.$index(0, "relationship"), "data_type", this.dataType);
      J.$indexSet$ax(map.$index(0, "relationship"), "null_allowed", this.nullAllowed);
      J.$indexSet$ax(map.$index(0, "relationship"), "parent_table", J.get$name$x(this.parentTable));
      J.$indexSet$ax(map.$index(0, "relationship"), "child_table", J.get$name$x(this.childTable));
      J.$indexSet$ax(map.$index(0, "relationship"), "parent_cardinality", this.parentCardinality);
      J.$indexSet$ax(map.$index(0, "relationship"), "child_cardinality", this.childCardinality);
      if (this.ternaryTable != null) {
        J.$indexSet$ax(map.$index(0, "relationship"), "ternary_table", J.get$name$x(this.ternaryTable));
        J.$indexSet$ax(map.$index(0, "relationship"), "ternary_cardinality", this.ternaryCardinality);
      }
      J.$indexSet$ax(map.$index(0, "relationship"), "parent_role", this.parentRole);
      J.$indexSet$ax(map.$index(0, "relationship"), "child_role", this.childRole);
      J.$indexSet$ax(map.$index(0, "relationship"), "identifying", this.identifying);
      mappedFields = this.mapFields$1(oldRelationship);
      J.$indexSet$ax(map.$index(0, "relationship"), "relationship_fields_attributes", mappedFields);
      return C.JsonCodec_null_null.encode$1(map);
    }, function() {
      return this.toJson$1(null);
    }, "toJson$0", "call$1", null, "get$toJson", 0, 2, 607, 116, 608, "toJson"],
    getFields$0: [function() {
      return this.relationshipFields;
    }, "call$0", "get$getFields", 0, 0, 497, "getFields"],
    Relationship$fromJsonMap$4: [function(map, parentTable, childTable, ternaryTable) {
      var t1, i, t2, relationshipField;
      this.parentTable = parentTable;
      this.childTable = childTable;
      this.ternaryTable = ternaryTable;
      this.nameDiamond = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Point);
      t1 = J.getInterceptor$asx(map);
      if (J.$eq(t1.$index(map, "ternaryCardinality"), "null"))
        this.ternaryCardinality = "(0,1)";
      this.diagramId = t1.$index(map, "diagram_id");
      this.id = t1.$index(map, "id");
      this.x = t1.$index(map, "x");
      this.y = t1.$index(map, "y");
      this.width = t1.$index(map, "width");
      this.height = t1.$index(map, "height");
      this.name = t1.$index(map, "name");
      this.identifying = t1.$index(map, "identifying");
      this.childCardinality = t1.$index(map, "child_cardinality");
      this.childRole = t1.$index(map, "child_role");
      this.dataType = t1.$index(map, "data_type");
      this.nullAllowed = t1.$index(map, "null_allowed");
      this.parentCardinality = t1.$index(map, "parent_cardinality");
      this.ternaryCardinality = t1.$index(map, "ternary_cardinality");
      this.relationshipFields = [];
      if (t1.$index(map, "relationship_fields") != null) {
        i = 0;
        while (true) {
          t2 = J.get$length$asx(t1.$index(map, "relationship_fields"));
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          relationshipField = S.RelationshipField$fromJsonMap(J.$index$asx(t1.$index(map, "relationship_fields"), i));
          this.relationshipFields.push(relationshipField);
          ++i;
        }
      }
    }, null, null, 8, 0, 180, 181, 176, 177, 182, "fromJsonMap"],
    Relationship$5: [function(diagramId, parentTable, childTable, dataType, relationshipFields) {
      this.parentTable = parentTable;
      this.childTable = childTable;
      this.dataType = dataType;
      if (J.$eq(dataType, "Relacionamento identificador"))
        this.identifying = true;
      this.relationshipFields = relationshipFields;
      this.nameDiamond = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Point);
      if (this.ternaryCardinality == null)
        this.ternaryCardinality = "(0,1)";
    }, null, null, 10, 0, 174, 175, 176, 177, 178, 179, ""],
    static: {"^": "Relationship_IDENTIFYING_RELATIONSHIP-,Relationship_NON_IDENTIFYING_RELATIONSHIP-,Relationship_MANY_TO_MANY_RELATIONSHIP-,Relationship_SELF_RELATIONSHIP-,Relationship_ALLOW_NULLS-,Relationship_NOT_ALLOW_NULLS-,Relationship_ZERO_OR_ONE-,Relationship_ZERO_OR_MANY-,Relationship_ONE_OR_MANY-,Relationship_ONLY_ONE-", Relationship$: [function(diagramId, parentTable, childTable, dataType, relationshipFields) {
        var t1 = new S.Relationship(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(diagramId, 0, 0);
        t1.Relationship$5(diagramId, parentTable, childTable, dataType, relationshipFields);
        return t1;
      }, null, null, 10, 0, 174, 175, 176, 177, 178, 179, "new Relationship"], Relationship$fromJsonMap: [function(map, parentTable, childTable, ternaryTable) {
        var t1 = new S.Relationship(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.Relationship$fromJsonMap$4(map, parentTable, childTable, ternaryTable);
        return t1;
      }, null, null, 8, 0, 180, 181, 176, 177, 182, "new Relationship$fromJsonMap"]}
  },
  "+Relationship": 0,
  RelationshipController: {
    "^": "BaseCanvasModelController;ctx-,relationshipViews-,relationshipViewFactory-,relationshipDefinition-,tableController<-,preferencesController-,_HTTPRequestController-,diagramController-,relationshipModalFactory-,relationshipModal-,oldRelationship-,borderInteractionController-,controllerFactory-",
    setRequiredControllers$0: [function() {
      var t1 = this.controllerFactory;
      this.tableController = t1.tableController;
      this.borderInteractionController = t1.borderInteractionController;
      this.preferencesController = t1.preferencesController;
      this._HTTPRequestController = t1.hTTPRequestController;
      this.diagramController = t1.diagramController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    createRelationshipsFromJsonMap$1: [function(map) {
      var t1, i, t2, parentTable, childTable, ternaryTable;
      t1 = J.getInterceptor$asx(map);
      i = 0;
      while (true) {
        t2 = t1.get$length(map);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        parentTable = this.tableController.getTable$1(J.$index$asx(t1.$index(map, i), "parent_table"));
        childTable = this.tableController.getTable$1(J.$index$asx(t1.$index(map, i), "child_table"));
        ternaryTable = this.tableController.getTable$1(J.$index$asx(t1.$index(map, i), "ternary_table"));
        this._createRelationship$2(S.Relationship$fromJsonMap(t1.$index(map, i), parentTable, childTable, ternaryTable), true);
        ++i;
      }
    }, "call$1", "get$createRelationshipsFromJsonMap", 2, 0, 609, 181, "createRelationshipsFromJsonMap"],
    newRelationship$1: [function(relationship) {
      relationship.name = "";
      relationship.nullAllowed = "N\u00e3o permitir";
      relationship.parentCardinality = "Zero ou um";
      this.showModal$2(0, relationship, "CREATE");
    }, "call$1", "get$newRelationship", 2, 0, 610, 600, "newRelationship"],
    validate$2: [function(relationship, relationshipModal) {
      var validateRelationshipRequest, req, t1;
      validateRelationshipRequest = new S.ValidateRelationshipRequest(null);
      validateRelationshipRequest.relationship = relationship;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(validateRelationshipRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationshipController_validate_closure(relationshipModal, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$2", "get$validate", 4, 0, 611, 600, 612, "validate"],
    createRelationship$1: [function(relationship) {
      var createRelationshipRequest, req, t1;
      createRelationshipRequest = new S.CreateRelationshipRequest(null);
      createRelationshipRequest.relationship = relationship;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(createRelationshipRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationshipController_createRelationship_closure(this, relationship, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$createRelationship", 2, 0, 610, 600, "createRelationship"],
    _createRelationship$2: [function(relationship, fromDatabase) {
      var rsv, t1, t2, t3, bcm;
      rsv = this.relationshipViewFactory.newRelationshipView$2(relationship, this.borderInteractionController);
      if (this.relationshipViewFactory.getViewType$0() === "conceptual") {
        this._createConceptual$2(relationship, rsv);
        if (relationship.get$identifying() === true) {
          t1 = this.tableController;
          t2 = relationship.get$parentTable();
          t3 = relationship.get$childTable();
          t1._copyPrimaryKeyToForeignKey$2(t2, t3);
          t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t3)), t3);
        }
      } else {
        t1 = this.borderInteractionController;
        t2 = relationship.get$parentTable();
        t3 = relationship.get$childTable();
        t1.toString;
        bcm = new S.BorderConnection(null, null, null, null, null, null, null, null, null, null);
        bcm.canvasModelA = t2;
        bcm.canvasModelB = t3;
        bcm.specialRelation = false;
        bcm.pointsUpdatedController = P.StreamController_StreamController(null, null, null, null, false, null);
        t1.borderConnections.push(bcm);
        rsv.bcnParentTableAndChildTable = bcm;
        if (relationship.get$identifying() === true) {
          t1 = this.tableController;
          t2 = relationship.get$parentTable();
          t3 = relationship.get$childTable();
          t1._copyPrimaryKeyToForeignKey$2(t2, t3);
          t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t3)), t3);
        }
        if (J.$eq(relationship.get$dataType(), "Relacionamento n\u00e3o identificador")) {
          t1 = this.tableController;
          t2 = relationship.get$parentTable();
          t3 = relationship.get$childTable();
          t1._copyNonPrimaryKeyToForeignKey$2(t2, t3);
          t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t3)), t3);
        }
      }
      if (!fromDatabase) {
        this.oldRelationship = relationship;
        this.updateRelationship$1(relationship);
      }
    }, "call$2", "get$_createRelationship", 4, 0, 613, 600, 614, "_createRelationship"],
    _createConceptual$2: [function(relationship, rsv) {
      var t1, nameWidth, bcnParentTableAndRelationship, bcnChildTableAndRelationship, relationshipField, t2, subRelationshipField;
      t1 = J.getInterceptor$x(relationship);
      nameWidth = J.measureText$1$x(this.ctx, t1.get$name(relationship)).width;
      if (J.$eq(t1.get$width(relationship), 0) && J.$eq(t1.get$height(relationship), 0))
        relationship.createNameDiamond$1(nameWidth);
      else
        relationship.updateNameDiamond$1(nameWidth);
      this.borderInteractionController.canvasModels.push(relationship);
      bcnParentTableAndRelationship = this.borderInteractionController.createBorderConnection$2(relationship.get$parentTable(), relationship);
      bcnChildTableAndRelationship = this.borderInteractionController.createBorderConnection$2(relationship.get$childTable(), relationship);
      for (t1 = J.get$iterator$ax(relationship.get$relationshipFields()); t1.moveNext$0() === true;) {
        relationshipField = t1.get$current();
        this.borderInteractionController.canvasModels.push(relationshipField);
        for (t2 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t2.moveNext$0() === true;) {
          subRelationshipField = t2.get$current();
          this.borderInteractionController.canvasModels.push(subRelationshipField);
        }
      }
      this._createTernary$2(relationship, rsv);
      rsv.glueRelationshipFields$0();
      this.borderInteractionController.calculateConnectionsLocation$0();
      this._updateRelationshipBorderConnections$3(relationship, bcnParentTableAndRelationship, bcnChildTableAndRelationship);
    }, "call$2", "get$_createConceptual", 4, 0, 615, 600, 616, "_createConceptual"],
    forceUpdateDueToNewPosition$1: [function(baseCanvasModel) {
      var t1, relationship;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), relationship = null; t1.moveNext$0();) {
        relationship = this._getParentModel$2(baseCanvasModel, t1._current.get$relationship());
        if (relationship != null)
          break;
      }
      this.oldRelationship = relationship;
      this.updateRelationship$1(relationship);
    }, "call$1", "get$forceUpdateDueToNewPosition", 2, 0, 515, 159, "forceUpdateDueToNewPosition"],
    _updateRelationshipBorderConnections$3: [function(relationship, bcnParentTableAndRelationship, bcnChildTableAndRelationship) {
      var t1, rsv;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        rsv = t1._current;
        if (J.$eq(rsv.get$relationship(), relationship))
          rsv.setBorderConnections$2(bcnParentTableAndRelationship, bcnChildTableAndRelationship);
      }
    }, "call$3", "get$_updateRelationshipBorderConnections", 6, 0, 617, 600, 618, 619, "_updateRelationshipBorderConnections"],
    editRelationship$3: [function(relationship, isTernary, ternaryTable) {
      var clonedRelationship = J.clone$0$x(relationship);
      this.oldRelationship = relationship;
      if (isTernary === true) {
        clonedRelationship.set$ternaryTable(ternaryTable);
        clonedRelationship.set$ternaryCardinality("(0,1)");
      }
      this.showModal$2(0, clonedRelationship, "EDIT");
    }, function(relationship) {
      return this.editRelationship$3(relationship, null, null);
    }, "editRelationship$1", "call$3", null, "get$editRelationship", 2, 4, 620, 116, 116, 600, 621, 182, "editRelationship"],
    updateRelationship$1: [function(relationship) {
      var updateRelationshipRequest, req, t1;
      updateRelationshipRequest = new S.UpdateRelationshipRequest(null, null);
      updateRelationshipRequest.oldRelationship = this.oldRelationship;
      updateRelationshipRequest.relationship = relationship;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(updateRelationshipRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.RelationshipController_updateRelationship_closure(this, relationship, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$updateRelationship", 2, 0, 610, 600, "updateRelationship"],
    deleteRelationship$1: [function(relationship) {
      var deleteRelationshipRequest, req, t1, t2, t3;
      deleteRelationshipRequest = new S.DeleteRelationshipRequest(null);
      deleteRelationshipRequest.relationship = relationship;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(deleteRelationshipRequest);
      t1 = C.EventStreamProvider_readystatechange._eventType;
      t2 = new W._EventStream(req, t1, false);
      t2.$builtinTypeInfo = [null];
      t3 = new W._EventStreamSubscription(0, req, t1, W._wrapZone(new S.RelationshipController_deleteRelationship_closure(this, relationship, req)), false);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t2 = t3._onData;
      if (t2 != null && t3._pauseCount <= 0)
        J.addEventListener$3$x(t3._target, t1, t2, false);
    }, "call$1", "get$deleteRelationship", 2, 0, 610, 600, "deleteRelationship"],
    _createTernary$2: [function(relationship, relationshipView) {
      var t1, t2, t3;
      if (this._isRelationshipTernary$1(relationship) && relationship.get$ternaryConnection() !== true) {
        if (relationship.get$identifying() === true) {
          t1 = this.tableController;
          t2 = relationship.get$parentTable();
          t3 = relationship.get$ternaryTable();
          t1._copyPrimaryKeyToForeignKey$2(t2, t3);
          t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t3)), t3);
        }
        relationship.set$ternaryConnection(true);
        relationshipView.set$bcnTernaryTableAndRelationship(this.borderInteractionController.createBorderConnection$2(relationship.get$ternaryTable(), relationship));
      }
    }, "call$2", "get$_createTernary", 4, 0, 622, 600, 623, "_createTernary"],
    showModal$2: [function(_, relationship, modalType) {
      var t1, baseModalType;
      t1 = this.relationshipModal;
      if (t1 != null)
        if (!t1._canceled) {
          t1._submitListener.cancel$0();
          t1._canceled = true;
        }
      baseModalType = modalType === "CREATE" ? "CREATE" : "EDIT";
      this.relationshipModal = this.relationshipModalFactory.newTableModal$3(relationship, baseModalType, this);
    }, "call$2", "get$showModal", 4, 0, 624, 600, 601, "showModal"],
    getTablesWeakedByRelationshipFrom$1: [function(table) {
      var weakEntities, t1, t2, rsv;
      weakEntities = H.setRuntimeTypeInfo([], [S.Table]);
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$x(table); t1.moveNext$0();) {
        rsv = t1._current;
        if (J.$eq(J.get$id$x(rsv.get$relationship().get$parentTable()), t2.get$id(table)) && J.$eq(rsv.get$relationship().get$identifying(), true)) {
          weakEntities.push(rsv.get$relationship().get$childTable());
          if (rsv.get$relationship().get$ternaryTable() != null)
            weakEntities.push(rsv.get$relationship().get$ternaryTable());
        }
      }
      return weakEntities;
    }, "call$1", "get$getTablesWeakedByRelationshipFrom", 2, 0, 625, 267, "getTablesWeakedByRelationshipFrom"],
    getTablesNotWeakedByRelationshipFrom$1: [function(table) {
      var tables, t1, t2, rsv;
      tables = H.setRuntimeTypeInfo([], [S.Table]);
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$x(table); t1.moveNext$0();) {
        rsv = t1._current;
        if (J.$eq(J.get$id$x(rsv.get$relationship().get$parentTable()), t2.get$id(table)) && J.$eq(rsv.get$relationship().get$dataType(), "Relacionamento n\u00e3o identificador")) {
          tables.push(rsv.get$relationship().get$childTable());
          if (rsv.get$relationship().get$ternaryTable() != null)
            tables.push(rsv.get$relationship().get$ternaryTable());
        }
      }
      return tables;
    }, "call$1", "get$getTablesNotWeakedByRelationshipFrom", 2, 0, 625, 267, "getTablesNotWeakedByRelationshipFrom"],
    updateRelationshipsWithTable$1: [function(table) {
      var t1, t2, rsv;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$x(table); t1.moveNext$0();) {
        rsv = t1._current;
        if (J.$eq(J.get$id$x(rsv.get$relationship().get$parentTable()), t2.get$id(table)))
          rsv.get$relationship().set$parentTable(table);
        if (J.$eq(rsv.get$relationship().get$childTable(), t2.get$id(table)))
          rsv.get$relationship().set$childTable(table);
        if (rsv.get$relationship().get$ternaryTable() != null)
          if (J.$eq(J.get$id$x(rsv.get$relationship().get$ternaryTable()), t2.get$id(table)))
            rsv.get$relationship().set$ternaryTable(table);
      }
    }, "call$1", "get$updateRelationshipsWithTable", 2, 0, 626, 267, "updateRelationshipsWithTable"],
    deleteRelationshipsFromTable$1: [function(table) {
      var relationsToBeRemoved, t1, rsv;
      relationsToBeRemoved = [];
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        rsv = t1._current;
        if (J.$eq(rsv.get$relationship().get$parentTable(), table) || J.$eq(rsv.get$relationship().get$childTable(), table))
          relationsToBeRemoved.push(rsv);
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(relationsToBeRemoved, relationsToBeRemoved.length, 0, null), [H.getTypeArgumentByIndex(relationsToBeRemoved, 0)]); t1.moveNext$0();) {
        rsv = t1._current;
        this.deleteRelationship$1(rsv.get$relationship());
        C.JSArray_methods.remove$1(this.relationshipViews, rsv);
      }
    }, "call$1", "get$deleteRelationshipsFromTable", 2, 0, 626, 267, "deleteRelationshipsFromTable"],
    drag$4: [function(baseCanvasModel, initialCanvasModelPosition, initialClientCord, newClientCord) {
      var t1, newX, newY;
      t1 = J.getInterceptor$x(initialCanvasModelPosition);
      newX = J.$add$ns(t1.get$x(initialCanvasModelPosition), J.$sub$n(newClientCord.x, initialClientCord.x));
      newY = J.$add$ns(t1.get$y(initialCanvasModelPosition), J.$sub$n(newClientCord.y, initialClientCord.y));
      if (J.$lt$n(newX, 5) === true)
        newX = 5;
      if (J.$lt$n(newY, 5) === true)
        newY = 5;
      if (this.preferencesController.preferences.grid === true) {
        newX = J.$mul$ns(J.round$0$n(J.$div$n(newX, 15)), 15);
        newY = J.$mul$ns(J.round$0$n(J.$div$n(newY, 15)), 15);
      }
      baseCanvasModel.updateLocation$1(H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.abs$0$n(newX), 0.5), J.$add$ns(J.abs$0$n(newY), 0.5)), [null]));
      t1 = J.getInterceptor(baseCanvasModel);
      if (t1.get$runtimeType(baseCanvasModel).$eq(0, C.Type_WYz))
        baseCanvasModel.updateNameDiamond$1(J.measureText$1$x(this.ctx, t1.get$name(baseCanvasModel)).width);
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$4", "get$drag", 8, 0, 627, 159, 628, 629, 630, "drag"],
    getClickedRelationship$1: [function(canvasMousePosition) {
      if (this.diagramController.isConceptual$0())
        return this.getConceptualClickedRelationship$1(canvasMousePosition);
      if (this.diagramController.isLogical$0())
        return this.getLogicalClickedRelationship$1(canvasMousePosition);
    }, "call$1", "get$getClickedRelationship", 2, 0, 631, 551, "getClickedRelationship"],
    getLogicalClickedRelationship$1: [function(clientPoint) {
      var t1, t2, t3, t4, t5, closestDistance, closestRelationship, distanceFromClientPoint, rsv, t6, relationshipLine, t7, xx, yy, xx0, yy0, $A, $B, $C, $D, param, t8, dx, dy;
      this.borderInteractionController.calculateConnectionsLocation$0();
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = clientPoint.x, t3 = clientPoint.y, t4 = J.getInterceptor$n(t2), t5 = J.getInterceptor$n(t3), closestDistance = 3111696, closestRelationship = null, distanceFromClientPoint = null; t1.moveNext$0();) {
        rsv = t1._current;
        for (t6 = J.get$iterator$ax(rsv.get$relationshipLines()); t6.moveNext$0() === true;) {
          relationshipLine = t6.get$current();
          t7 = J.getInterceptor$x(relationshipLine);
          xx = J.get$x$x(t7.get$start(relationshipLine));
          yy = J.get$y$x(t7.get$start(relationshipLine));
          xx0 = J.get$x$x(relationshipLine.get$end());
          yy0 = J.get$y$x(relationshipLine.get$end());
          $A = t4.$sub(t2, xx);
          $B = t5.$sub(t3, yy);
          $C = J.$sub$n(xx0, xx);
          $D = J.$sub$n(yy0, yy);
          param = J.$div$n(J.$add$ns(J.$mul$ns($A, $C), J.$mul$ns($B, $D)), J.$add$ns(J.$mul$ns($C, $C), J.$mul$ns($D, $D)));
          t7 = J.getInterceptor$n(param);
          if (t7.$lt(param, 0) !== true)
            t8 = J.$eq(xx, xx0) && J.$eq(yy, yy0);
          else
            t8 = true;
          if (t8)
            ;
          else if (t7.$gt(param, 1) === true) {
            yy = yy0;
            xx = xx0;
          } else {
            xx = J.$add$ns(xx, t7.$mul(param, $C));
            yy = J.$add$ns(yy, t7.$mul(param, $D));
          }
          dx = t4.$sub(t2, xx);
          dy = t5.$sub(t3, yy);
          t7 = J.$add$ns(J.$mul$ns(dx, dx), J.$mul$ns(dy, dy));
          if (typeof t7 !== "number")
            H.throwExpression(new P.ArgumentError(t7));
          distanceFromClientPoint = Math.sqrt(t7);
          if (distanceFromClientPoint < 20)
            if (closestDistance > distanceFromClientPoint) {
              closestRelationship = rsv.get$relationship();
              closestDistance = distanceFromClientPoint;
            }
        }
      }
      return closestRelationship;
    }, "call$1", "get$getLogicalClickedRelationship", 2, 0, 631, 632, "getLogicalClickedRelationship"],
    getConceptualClickedRelationship$1: [function(canvasMousePosition) {
      var t1, t2, t3, t4, t5, relationshipView;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = canvasMousePosition.x, t3 = J.getInterceptor$n(t2), t4 = canvasMousePosition.y, t5 = J.getInterceptor$n(t4); t1.moveNext$0();) {
        relationshipView = t1._current;
        if (t3.$gt(t2, J.get$x$x(relationshipView.get$relationship())) === true && t3.$lt(t2, J.$add$ns(J.get$x$x(relationshipView.get$relationship()), J.get$width$x(relationshipView.get$relationship()))) === true && t5.$gt(t4, J.get$y$x(relationshipView.get$relationship())) === true && t5.$lt(t4, J.$add$ns(J.get$y$x(relationshipView.get$relationship()), J.get$height$x(relationshipView.get$relationship()))) === true)
          return relationshipView.get$relationship();
      }
      return;
    }, "call$1", "get$getConceptualClickedRelationship", 2, 0, 631, 551, "getConceptualClickedRelationship"],
    getClickedRelationshipField$1: [function(canvasMousePosition) {
      var t1, t2, t3, t4, t5, t6, relationshipField, t7, subRelationshipField, t8;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = canvasMousePosition.x, t3 = J.getInterceptor$n(t2), t4 = canvasMousePosition.y, t5 = J.getInterceptor$n(t4); t1.moveNext$0();)
        for (t6 = J.get$iterator$ax(t1._current.get$relationship().get$relationshipFields()); t6.moveNext$0() === true;) {
          relationshipField = t6.get$current();
          t7 = J.getInterceptor$x(relationshipField);
          if (t3.$gt(t2, t7.get$x(relationshipField)) === true && t3.$lt(t2, J.$add$ns(t7.get$x(relationshipField), t7.get$width(relationshipField))) === true && t5.$gt(t4, t7.get$y(relationshipField)) === true && t5.$lt(t4, J.$add$ns(t7.get$y(relationshipField), t7.get$height(relationshipField))) === true)
            return relationshipField;
          for (t7 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t7.moveNext$0() === true;) {
            subRelationshipField = t7.get$current();
            t8 = J.getInterceptor$x(subRelationshipField);
            if (t3.$gt(t2, t8.get$x(subRelationshipField)) === true && t3.$lt(t2, J.$add$ns(t8.get$x(subRelationshipField), t8.get$width(subRelationshipField))) === true && t5.$gt(t4, t8.get$y(subRelationshipField)) === true && t5.$lt(t4, J.$add$ns(t8.get$y(subRelationshipField), t8.get$height(subRelationshipField))) === true)
              return subRelationshipField;
          }
        }
      return;
    }, "call$1", "get$getClickedRelationshipField", 2, 0, 633, 551, "getClickedRelationshipField"],
    resetModelLocation$3: [function(baseCanvasModel, baseFieldsPosition, initialCanvasModelPosition) {
      var t1, baseField, t2, baseSubField, t3;
      t1 = J.getInterceptor$x(baseCanvasModel);
      t1.set$x(baseCanvasModel, initialCanvasModelPosition.x);
      t1.set$y(baseCanvasModel, initialCanvasModelPosition.y);
      baseCanvasModel.updateLocation$1(initialCanvasModelPosition);
      if (t1.get$runtimeType(baseCanvasModel).$eq(0, C.Type_WYz)) {
        P.print("reset relationship");
        baseCanvasModel.updateNameDiamond$1(J.measureText$1$x(this.ctx, t1.get$name(baseCanvasModel)).width);
      }
      for (t1 = J.get$iterator$ax(baseCanvasModel.getFields$0()); t1.moveNext$0() === true;) {
        baseField = t1.get$current();
        t2 = J.getInterceptor$x(baseField);
        t2.set$x(baseField, J.get$x$x(baseFieldsPosition.$index(0, baseField)));
        t2.set$y(baseField, J.get$y$x(baseFieldsPosition.$index(0, baseField)));
        for (t2 = J.get$iterator$ax(baseField.getFields$0()); t2.moveNext$0() === true;) {
          baseSubField = t2.get$current();
          t3 = J.getInterceptor$x(baseSubField);
          t3.set$x(baseSubField, J.get$x$x(baseFieldsPosition.$index(0, baseSubField)));
          t3.set$y(baseSubField, J.get$y$x(baseFieldsPosition.$index(0, baseSubField)));
        }
      }
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$3", "get$resetModelLocation", 6, 0, 634, 159, 635, 628, "resetModelLocation"],
    convertIntoTernary$2: [function(ternaryTable, ternaryRelationship) {
      if (this._isTableInRelationship$2(ternaryTable, ternaryRelationship))
        return;
      if (this._isRelationshipTernary$1(ternaryRelationship))
        return;
      this.editRelationship$3(ternaryRelationship, true, ternaryTable);
    }, "call$2", "get$convertIntoTernary", 4, 0, 636, 182, 637, "convertIntoTernary"],
    _isTableInRelationship$2: [function(table, relationship) {
      if (J.$eq(relationship.get$parentTable(), table) || J.$eq(relationship.get$childTable(), table) || J.$eq(relationship.get$ternaryTable(), table))
        return true;
      else
        return false;
    }, "call$2", "get$_isTableInRelationship", 4, 0, 638, 267, 600, "_isTableInRelationship"],
    _isRelationshipTernary$1: [function(relationship) {
      if (relationship.get$ternaryTable() == null)
        return false;
      else
        return true;
    }, "call$1", "get$_isRelationshipTernary", 2, 0, 639, 600, "_isRelationshipTernary"],
    toggle$1: [function(baseCanvasModel) {
      var relationshipView, t1, rv, t2, rf, t3;
      relationshipView = this._getRelationshipView$1(baseCanvasModel);
      if (relationshipView != null) {
        relationshipView.set$toggled(true);
        return;
      }
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        rv = t1._current;
        for (t2 = J.get$iterator$ax(rv.get$relationship().get$relationshipFields()); t2.moveNext$0() === true;) {
          rf = t2.get$current();
          if (J.$eq(rf, baseCanvasModel)) {
            rv.set$toggledRelationshipField(baseCanvasModel);
            return;
          }
          t3 = J.get$iterator$ax(rf.get$baseSubFields());
          if (t3.moveNext$0() === true) {
            t3.get$current();
            rv.set$toggledRelationshipField(baseCanvasModel);
            return;
          }
        }
      }
    }, "call$1", "get$toggle", 2, 0, 515, 159, "toggle"],
    _getRelationshipView$1: [function(relationship) {
      var t1, relationshipView;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        relationshipView = t1._current;
        if (J.$eq(relationshipView.get$relationship(), relationship))
          return relationshipView;
      }
    }, "call$1", "get$_getRelationshipView", 2, 0, 640, 600, "_getRelationshipView"],
    untoggleRelationships$0: [function() {
      var t1, rsv;
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        rsv = t1._current;
        rsv.toggle$1(false);
        rsv.set$toggledRelationshipField(null);
      }
    }, "call$0", "get$untoggleRelationships", 0, 0, 137, "untoggleRelationships"],
    drawAllRelations$0: [function() {
      var t1, rsv;
      t1 = this.relationshipDefinition;
      if (t1 != null)
        t1.draw$0();
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        rsv = t1._current;
        rsv.drawRelationshipName$1(this.preferencesController.preferences.relationshipNameInLogicalDiagram);
        rsv.draw$0();
      }
    }, "call$0", "get$drawAllRelations", 0, 0, 137, "drawAllRelations"],
    highlightRelationship$2: [function(relationship, $status) {
      var rsv = this._getRelationshipView$1(relationship);
      if ($status)
        rsv.set$highlighted(true);
      else
        rsv.set$highlighted(false);
    }, "call$2", "get$highlightRelationship", 2, 2, 641, 116, 600, 642, "highlightRelationship"],
    RelationshipController$3: [function(ctx, relationshipViewFactory, relationshipModalFactory) {
      this.ctx = ctx;
      this.relationshipViewFactory = relationshipViewFactory;
      this.relationshipModalFactory = relationshipModalFactory;
      this.relationshipViews = relationshipViewFactory.relationshipViews;
    }, null, null, 6, 0, 643, 155, 644, 645, ""]
  },
  "+RelationshipController": 0,
  RelationshipController_validate_closure: {
    "^": "Closure:567;relationshipModal_0-,req_1-",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.req_1;
      if (t1.readyState === 4) {
        t2 = t1.status;
        if (t2 === 200 || t2 === 0 || t2 === 204)
          this.relationshipModal_0.receiveErrorsFromValidation$1(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        else if (t2 === 422)
          this.relationshipModal_0.receiveErrorsFromValidation$1(C.JsonCodec_null_null.decode$1(t1.responseText));
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ RelationshipController_validate_closure": 0,
  RelationshipController_createRelationship_closure: {
    "^": "Closure:567;this_0-,relationship_1-,req_2-",
    call$1: [function(e) {
      var t1, relationshipMapped, t2;
      t1 = this.req_2;
      if (t1.readyState === 4)
        if (t1.status === 201) {
          relationshipMapped = C.JsonCodec_null_null.decode$1(t1.responseText);
          t1 = this.relationship_1;
          J.set$id$x(t1, J.$index$asx(relationshipMapped, "id"));
          t2 = this.this_0;
          t2._mapFieldsIds$4(t1, relationshipMapped, "relationship_fields", "relationship_sub_fields");
          t2._createRelationship$2(t1, false);
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ RelationshipController_createRelationship_closure": 0,
  RelationshipController_updateRelationship_closure: {
    "^": "Closure:567;this_0-,relationship_1-,req_2-",
    call$1: [function(e) {
      var t1, t2, relationshipMapped, t3, relationshipView;
      t1 = this.req_2;
      if (t1.readyState === 4) {
        t2 = t1.status;
        if (t2 === 200 || t2 === 0 || t2 === 204) {
          relationshipMapped = C.JsonCodec_null_null.decode$1(t1.responseText);
          t1 = this.relationship_1;
          t2 = J.getInterceptor$x(t1);
          t2.set$id(t1, J.$index$asx(relationshipMapped, "id"));
          t3 = this.this_0;
          t3._mapFieldsIds$4(t1, relationshipMapped, "relationship_fields", "relationship_sub_fields");
          relationshipView = t3._getRelationshipView$1(t3.oldRelationship);
          t3.updateCanvasModel$2(t3.oldRelationship, t1);
          relationshipView.updateRelationship$1(t1);
          t1.updateNameDiamond$1(J.measureText$1$x(t3.ctx, t2.get$name(t1)).width);
          t3._createTernary$2(t1, relationshipView);
          relationshipView.glueRelationshipFields$0();
          t3.borderInteractionController.calculateConnectionsLocation$0();
        } else if (this.this_0.diagramController.isConceptual$0())
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ RelationshipController_updateRelationship_closure": 0,
  RelationshipController_deleteRelationship_closure: {
    "^": "Closure:567;this_0-,relationship_1-,req_2-",
    call$1: [function(e) {
      var t1, t2, rsv, t3;
      t1 = this.req_2;
      if (t1.readyState === 4) {
        t1 = t1.status;
        if (t1 === 200 || t1 === 0 || t1 === 204) {
          t1 = this.this_0;
          t2 = this.relationship_1;
          rsv = t1._getRelationshipView$1(t2);
          C.JSArray_methods.remove$1(t1.relationshipViews, rsv);
          t1.borderInteractionController.deleteCanvasModel$1(t2);
          if (J.$eq(t2.get$identifying(), true) || J.$eq(t2.get$dataType(), "Relacionamento n\u00e3o identificador")) {
            t1.tableController.deleteAllForeignKeys$1(t2.get$parentTable());
            if (t2.get$parentTable() != null) {
              t1 = t1.tableController;
              t3 = t2.get$parentTable();
              t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t2.get$parentTable())), t3);
            }
          }
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ RelationshipController_deleteRelationship_closure": 0,
  RelationshipField: {
    "^": "BaseField;name-,dataType-,primaryKey-,foreignKey-,nulls-,composite-,multivalued-,derived-,baseSubFields-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    toJson$0: [function() {
      return C.JsonCodec_null_null.encode$1(this.toMapWithHeader$0());
    }, "call$0", "get$toJson", 0, 0, 20, "toJson"],
    toMapWithHeader$0: [function() {
      var fieldMap, mappedSubFields, t1;
      fieldMap = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      fieldMap.$indexSet(0, "relationship_field", P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "primary_key", this.primaryKey);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "name", this.name);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "id", this.id);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "x", this.x);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "y", this.y);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "nulls", this.nulls);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "composite", this.composite);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "multivalued", this.multivalued);
      J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "derived", this.derived);
      if (!J.$eq(J.get$length$asx(this.baseSubFields), 0)) {
        mappedSubFields = H.setRuntimeTypeInfo([], [P.Map]);
        for (t1 = J.get$iterator$ax(this.baseSubFields); t1.moveNext$0() === true;)
          mappedSubFields.push(t1.get$current().toMap$0());
        J.$indexSet$ax(fieldMap.$index(0, "relationship_field"), "relationship_sub_fields_attributes", mappedSubFields);
      }
      return fieldMap;
    }, "call$0", "get$toMapWithHeader", 0, 0, 646, "toMapWithHeader"],
    toMap$2: [function(destroy, oldBaseField) {
      var fieldMap, mappedSubFields, t1, oldTableSubField;
      fieldMap = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      if (destroy === true)
        fieldMap.$indexSet(0, "_destroy", 1);
      fieldMap.$indexSet(0, "primary_key", this.primaryKey);
      fieldMap.$indexSet(0, "name", this.name);
      fieldMap.$indexSet(0, "id", this.id);
      fieldMap.$indexSet(0, "x", this.x);
      fieldMap.$indexSet(0, "y", this.y);
      fieldMap.$indexSet(0, "nulls", this.nulls);
      fieldMap.$indexSet(0, "composite", this.composite);
      fieldMap.$indexSet(0, "multivalued", this.multivalued);
      fieldMap.$indexSet(0, "derived", this.derived);
      if (!J.$eq(J.get$length$asx(this.baseSubFields), 0)) {
        mappedSubFields = H.setRuntimeTypeInfo([], [P.Map]);
        for (t1 = J.get$iterator$ax(this.baseSubFields); t1.moveNext$0() === true;)
          mappedSubFields.push(t1.get$current().toMap$0());
        fieldMap.$indexSet(0, "relationship_sub_fields_attributes", mappedSubFields);
        if (oldBaseField != null)
          for (t1 = J.get$iterator$ax(oldBaseField.getFields$0()); t1.moveNext$0() === true;) {
            oldTableSubField = t1.get$current();
            if (!this.hasField$1(J.get$name$x(oldTableSubField)))
              mappedSubFields.push(oldTableSubField.toMap$1(true));
          }
      }
      return fieldMap;
    }, function() {
      return this.toMap$2(null, null);
    }, "toMap$0", function(destroy) {
      return this.toMap$2(destroy, null);
    }, "toMap$1", "call$2", null, null, "get$toMap", 0, 4, 498, 116, 116, 499, 500, "toMap"],
    hasAPosition$0: [function() {
      if (J.$eq(this.x, 0) && J.$eq(this.y, 0) && J.$eq(this.width, 0) && J.$eq(this.height, 0))
        return false;
      else
        return true;
    }, "call$0", "get$hasAPosition", 0, 0, 346, "hasAPosition"],
    RelationshipField$fromJsonMap$1: [function(map) {
      var t1, t2, i, relationshipField;
      t1 = J.getInterceptor$asx(map);
      this.diagramId = t1.$index(map, "diagram_id");
      this.id = t1.$index(map, "id");
      this.x = t1.$index(map, "x");
      this.y = t1.$index(map, "y");
      this.name = t1.$index(map, "name");
      this.primaryKey = t1.$index(map, "primary_key");
      t2 = new S.ForeignKey(null, null);
      t2.value = false;
      t2.foreignTableId = -1;
      this.foreignKey = t2;
      this.nulls = t1.$index(map, "nulls");
      this.composite = t1.$index(map, "composite");
      this.multivalued = t1.$index(map, "multivalued");
      this.derived = t1.$index(map, "derived");
      this.baseSubFields = [];
      if (t1.$index(map, "relationship_sub_fields") != null) {
        i = 0;
        while (true) {
          t2 = J.get$length$asx(t1.$index(map, "relationship_sub_fields"));
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          relationshipField = S.RelationshipField$fromJsonMap(J.$index$asx(t1.$index(map, "relationship_sub_fields"), i));
          J.add$1$ax(this.baseSubFields, relationshipField);
          ++i;
        }
      }
    }, null, null, 2, 0, 191, 181, "fromJsonMap"],
    RelationshipField$9: [function(id, $name, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields) {
      this.id = id;
      this.name = $name;
      this.primaryKey = primaryKey;
      this.foreignKey = foreignKey;
      this.nulls = nulls;
      this.composite = composite;
      this.multivalued = multivalued;
      this.derived = derived;
      if (baseSubFields == null)
        this.baseSubFields = [];
      else
        this.baseSubFields = baseSubFields;
    }, null, null, 18, 0, 183, 171, 40, 184, 185, 186, 187, 188, 189, 190, ""],
    static: {RelationshipField$: [function(id, $name, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields) {
        var t1 = new S.RelationshipField(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.RelationshipField$9(id, $name, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields);
        return t1;
      }, null, null, 18, 0, 183, 171, 40, 184, 185, 186, 187, 188, 189, 190, "new RelationshipField"], RelationshipField$fromJsonMap: [function(map) {
        var t1 = new S.RelationshipField(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.RelationshipField$fromJsonMap$1(map);
        return t1;
      }, null, null, 2, 0, 191, 181, "new RelationshipField$fromJsonMap"]}
  },
  "+RelationshipField": 0,
  ConceptualRelationshipView: {
    "^": "RelationshipView;middlePoint-,baseFieldGluers-,nameWidth-,canvasEllipseDrawer-,diamondGradient-,relationship-,borderInteractionController-,bcnParentTableAndChildTable-,bcnParentTableAndRelationship-,bcnChildTableAndRelationship-,bcnTernaryTableAndRelationship-,TOGGLE_SQUARE_SIZE-,toggled-,highlighted-,toggledRelationshipField-,ctx-,relationshipLines-",
    glueRelationshipFields$0: [function() {
      var baseFieldGluer, t1, relationshipField, t2, t3, subBaseFieldGluer, subRelationshipField, t4;
      this.baseFieldGluers = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      baseFieldGluer = S.BaseFieldGluer$(this.relationship, this.ctx, this.borderInteractionController);
      for (t1 = J.get$iterator$ax(this.relationship.get$relationshipFields()); t1.moveNext$0() === true;) {
        relationshipField = t1.get$current();
        t2 = J.getInterceptor$x(relationshipField);
        if (J.$eq(t2.get$x(relationshipField), 0) && J.$eq(t2.get$y(relationshipField), 0))
          baseFieldGluer.glue$1(relationshipField);
        else {
          t3 = J.measureText$1$x(baseFieldGluer.ctx, t2.get$name(relationshipField)).width;
          if (typeof t3 !== "number")
            return t3.$add();
          t2.set$width(relationshipField, t3 + 20);
          t2.set$height(relationshipField, 30);
          baseFieldGluer.createBorderConnection$1(relationshipField);
        }
        this.baseFieldGluers.$indexSet(0, this.relationship, baseFieldGluer);
        if (!J.$eq(J.get$length$asx(relationshipField.get$baseSubFields()), 0)) {
          t2 = this.ctx;
          t3 = this.borderInteractionController;
          subBaseFieldGluer = new S.BaseFieldGluer(null, null, null, null, null, null);
          subBaseFieldGluer.glueObject = relationshipField;
          subBaseFieldGluer.ctx = t2;
          subBaseFieldGluer.borderInteractionController = t3;
          subBaseFieldGluer.tableFieldGlues = [];
          subBaseFieldGluer.fieldsIndex = 0;
          subBaseFieldGluer.outerBorderScale = 3;
          for (t2 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t2.moveNext$0() === true;) {
            subRelationshipField = t2.get$current();
            subBaseFieldGluer.glue$1(subRelationshipField);
            t3 = J.getInterceptor$x(subRelationshipField);
            if (J.$eq(t3.get$x(subRelationshipField), 0) && J.$eq(t3.get$y(subRelationshipField), 0))
              subBaseFieldGluer.glue$1(subRelationshipField);
            else {
              t4 = J.measureText$1$x(subBaseFieldGluer.ctx, t3.get$name(subRelationshipField)).width;
              if (typeof t4 !== "number")
                return t4.$add();
              t3.set$width(subRelationshipField, t4 + 20);
              t3.set$height(subRelationshipField, 30);
              subBaseFieldGluer.createBorderConnection$1(subRelationshipField);
            }
            this.baseFieldGluers.$indexSet(0, relationshipField, subBaseFieldGluer);
          }
        }
      }
    }, "call$0", "get$glueRelationshipFields", 0, 0, 137, "glueRelationshipFields"],
    updateRelationship$1: [function(updatedRelationship) {
      this.relationship = updatedRelationship;
    }, "call$1", "get$updateRelationship", 2, 0, 610, 647, "updateRelationship"],
    draw$0: [function() {
      var nameWidth, glueStartRelation, glueFinishRelation, diamond, middlePoint, parentCardinalityAndRole, childCardinalityAndRole, t1, glueTernaryRelation, baseFieldGluersList, t2, tableFieldGlue, relationshipField, identifyingDiamond, textXLocation, textYLocation;
      nameWidth = J.measureText$1$x(this.ctx, J.get$name$x(this.relationship)).width;
      glueStartRelation = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(this.bcnParentTableAndRelationship.borderPointA.get$point()), J.get$y$x(this.bcnParentTableAndRelationship.borderPointA.get$point())), [null]);
      glueFinishRelation = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(this.bcnChildTableAndRelationship.borderPointA.get$point()), J.get$y$x(this.bcnChildTableAndRelationship.borderPointA.get$point())), [null]);
      diamond = this.relationship.get$nameDiamond();
      middlePoint = this.relationship.get$nameDiamondMiddlePoint();
      J.set$lineWidth$x(this.ctx, 1.618033988);
      J.set$strokeStyle$x(this.ctx, "black");
      if (J.$eq(this.relationship.get$dataType(), "Auto-relacionamento")) {
        parentCardinalityAndRole = H.S(this.relationship.get$parentCardinality()) + " " + H.S(this.relationship.get$parentRole());
        childCardinalityAndRole = H.S(this.relationship.get$childCardinality()) + " " + H.S(this.relationship.get$childRole());
        switch (this.bcnParentTableAndRelationship.borderPointA.get$borderCode()) {
          case "NORTH":
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueStartRelation.x, glueStartRelation.y);
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "EAST")), J.$sub$n(J.get$y$x(t1.$index(diamond, "EAST")), 1));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueFinishRelation.x, glueFinishRelation.y);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "WEST")), J.get$y$x(t1.$index(diamond, "WEST")));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            this._drawCardinality$3(parentCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.$index(diamond, "EAST")), J.$add$ns(J.get$y$x(t1.$index(diamond, "EAST")), 60)), [null]));
            this._drawCardinality$3(childCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "WEST")), 20), J.$add$ns(J.get$y$x(t1.$index(diamond, "WEST")), 60)), [null]));
            break;
          case "SOUTH":
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueStartRelation.x, glueStartRelation.y);
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "EAST")), J.$sub$n(J.get$y$x(t1.$index(diamond, "EAST")), 1));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueFinishRelation.x, glueFinishRelation.y);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "WEST")), J.get$y$x(t1.$index(diamond, "WEST")));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            this._drawCardinality$3(parentCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.$index(diamond, "EAST")), J.$sub$n(J.get$y$x(t1.$index(diamond, "EAST")), 50)), [null]));
            this._drawCardinality$3(childCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "WEST")), 20), J.$sub$n(J.get$y$x(t1.$index(diamond, "WEST")), 40)), [null]));
            break;
          case "WEST":
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueStartRelation.x, glueStartRelation.y);
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "NORTH")), J.$sub$n(J.get$y$x(t1.$index(diamond, "NORTH")), 1));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueFinishRelation.x, glueFinishRelation.y);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "SOUTH")), J.get$y$x(t1.$index(diamond, "SOUTH")));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            this._drawCardinality$3(parentCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "SOUTH")), 40), J.$add$ns(J.get$y$x(t1.$index(diamond, "SOUTH")), 40)), [null]));
            this._drawCardinality$3(childCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "NORTH")), 40), J.$sub$n(J.get$y$x(t1.$index(diamond, "NORTH")), 40)), [null]));
            break;
          case "EAST":
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueStartRelation.x, glueStartRelation.y);
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "NORTH")), J.$sub$n(J.get$y$x(t1.$index(diamond, "NORTH")), 1));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, glueFinishRelation.x, glueFinishRelation.y);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "SOUTH")), J.get$y$x(t1.$index(diamond, "SOUTH")));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
            this._drawCardinality$3(parentCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.$index(diamond, "SOUTH")), J.$add$ns(J.get$y$x(t1.$index(diamond, "SOUTH")), 40)), [null]));
            this._drawCardinality$3(childCardinalityAndRole, middlePoint, H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "NORTH")), 40), J.$sub$n(J.get$y$x(t1.$index(diamond, "NORTH")), 40)), [null]));
            break;
        }
      } else {
        J.beginPath$0$x(this.ctx);
        J.moveTo$2$x(this.ctx, glueStartRelation.x, glueStartRelation.y);
        switch (this.bcnParentTableAndRelationship.borderPointA.get$borderCode()) {
          case "NORTH":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "SOUTH")), J.get$y$x(t1.$index(diamond, "SOUTH")));
            break;
          case "SOUTH":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "NORTH")), J.get$y$x(t1.$index(diamond, "NORTH")));
            break;
          case "WEST":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "EAST")), J.$sub$n(J.get$y$x(t1.$index(diamond, "EAST")), 1));
            break;
          case "EAST":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "WEST")), J.get$y$x(t1.$index(diamond, "WEST")));
            break;
        }
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.beginPath$0$x(this.ctx);
        J.moveTo$2$x(this.ctx, glueFinishRelation.x, glueFinishRelation.y);
        switch (this.bcnChildTableAndRelationship.borderPointA.get$borderCode()) {
          case "NORTH":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "SOUTH")), J.get$y$x(t1.$index(diamond, "SOUTH")));
            break;
          case "SOUTH":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "NORTH")), J.get$y$x(t1.$index(diamond, "NORTH")));
            break;
          case "WEST":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "EAST")), J.get$y$x(t1.$index(diamond, "EAST")));
            break;
          case "EAST":
            t1 = J.getInterceptor$asx(diamond);
            J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "WEST")), J.get$y$x(t1.$index(diamond, "WEST")));
            break;
        }
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        t1 = this.bcnTernaryTableAndRelationship;
        if (t1 != null) {
          glueTernaryRelation = H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.borderPointA.get$point()), J.get$y$x(this.bcnTernaryTableAndRelationship.borderPointA.get$point())), [null]);
          J.beginPath$0$x(this.ctx);
          J.moveTo$2$x(this.ctx, glueTernaryRelation.x, glueTernaryRelation.y);
          switch (this.bcnTernaryTableAndRelationship.borderPointA.get$borderCode()) {
            case "NORTH":
              t1 = J.getInterceptor$asx(diamond);
              J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "SOUTH")), J.get$y$x(t1.$index(diamond, "SOUTH")));
              break;
            case "SOUTH":
              t1 = J.getInterceptor$asx(diamond);
              J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "NORTH")), J.get$y$x(t1.$index(diamond, "NORTH")));
              break;
            case "WEST":
              t1 = J.getInterceptor$asx(diamond);
              J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "EAST")), J.get$y$x(t1.$index(diamond, "EAST")));
              break;
            case "EAST":
              t1 = J.getInterceptor$asx(diamond);
              J.lineTo$2$x(this.ctx, J.get$x$x(t1.$index(diamond, "WEST")), J.get$y$x(t1.$index(diamond, "WEST")));
              break;
          }
          J.closePath$0$x(this.ctx);
          J.stroke$0$x(this.ctx);
        } else
          glueTernaryRelation = null;
        this._drawCardinality$3(this.relationship.get$parentCardinality(), middlePoint, glueFinishRelation);
        this._drawCardinality$3(this.relationship.get$childCardinality(), middlePoint, glueStartRelation);
        if (this.bcnTernaryTableAndRelationship != null)
          this._drawCardinality$3(this.relationship.get$ternaryCardinality(), middlePoint, glueTernaryRelation);
      }
      t1 = this.baseFieldGluers;
      baseFieldGluersList = t1.get$values(t1);
      for (t1 = baseFieldGluersList._iterable, t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t1.get$iterator(t1), baseFieldGluersList._f), [H.getTypeArgumentByIndex(baseFieldGluersList, 0), H.getTypeArgumentByIndex(baseFieldGluersList, 1)]); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(t1._current.get$tableFieldGlues()); t2.moveNext$0() === true;) {
          tableFieldGlue = t2.get$current();
          if (tableFieldGlue.arePointsNull$0() !== true) {
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(tableFieldGlue.get$tablePoint().get$point())), J.toInt$0$n(J.get$y$x(tableFieldGlue.get$tablePoint().get$point())));
            J.lineTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(tableFieldGlue.get$tableFieldPoint().get$point())), J.toInt$0$n(J.get$y$x(tableFieldGlue.get$tableFieldPoint().get$point())));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
          }
        }
      for (t1 = J.get$iterator$ax(this.relationship.get$relationshipFields()); t1.moveNext$0() === true;) {
        relationshipField = t1.get$current();
        this._drawRelationshipField$1(relationshipField);
        for (t2 = J.get$iterator$ax(relationshipField.get$baseSubFields()); t2.moveNext$0() === true;)
          this._drawRelationshipField$1(t2.get$current());
      }
      J.set$strokeStyle$x(this.ctx, "#696969");
      J.beginPath$0$x(this.ctx);
      t1 = J.getInterceptor$asx(diamond);
      J.moveTo$2$x(this.ctx, J.$add$ns(J.toInt$0$n(J.get$x$x(t1.$index(diamond, "NORTH"))), 3), J.$add$ns(J.toInt$0$n(J.get$y$x(t1.$index(diamond, "NORTH"))), 3));
      J.lineTo$2$x(this.ctx, J.$add$ns(J.toInt$0$n(J.get$x$x(t1.$index(diamond, "WEST"))), 3), J.$add$ns(J.toInt$0$n(J.get$y$x(t1.$index(diamond, "WEST"))), 3));
      J.lineTo$2$x(this.ctx, J.$add$ns(J.toInt$0$n(J.get$x$x(t1.$index(diamond, "SOUTH"))), 3), J.$add$ns(J.toInt$0$n(J.get$y$x(t1.$index(diamond, "SOUTH"))), 3));
      J.lineTo$2$x(this.ctx, J.$add$ns(J.toInt$0$n(J.get$x$x(t1.$index(diamond, "EAST"))), 3), J.$add$ns(J.toInt$0$n(J.get$y$x(t1.$index(diamond, "EAST"))), 3));
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      J.set$fillStyle$x(this.ctx, "#696969");
      J.fill$0$x(this.ctx);
      J.set$strokeStyle$x(this.ctx, "black");
      this._drawDiamond$2(diamond, 1.618033988);
      if (this.relationship.get$identifying() === true) {
        identifyingDiamond = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Point);
        identifyingDiamond.$indexSet(0, "SOUTH", H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.$index(diamond, "SOUTH")), J.$sub$n(J.get$y$x(t1.$index(diamond, "SOUTH")), J.$mul$ns(J.get$height$x(this.relationship), 0.15))), [null]));
        identifyingDiamond.$indexSet(0, "NORTH", H.setRuntimeTypeInfo(new P.Point(J.get$x$x(t1.$index(diamond, "NORTH")), J.$add$ns(J.get$y$x(t1.$index(diamond, "NORTH")), J.$mul$ns(J.get$height$x(this.relationship), 0.15))), [null]));
        identifyingDiamond.$indexSet(0, "EAST", H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(t1.$index(diamond, "EAST")), J.$mul$ns(J.get$width$x(this.relationship), 0.15)), J.get$y$x(t1.$index(diamond, "EAST"))), [null]));
        identifyingDiamond.$indexSet(0, "WEST", H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.get$x$x(t1.$index(diamond, "WEST")), J.$mul$ns(J.get$width$x(this.relationship), 0.15)), J.get$y$x(t1.$index(diamond, "WEST"))), [null]));
        this._drawDiamond$2(identifyingDiamond, 0.5);
      }
      J.set$fillStyle$x(this.ctx, "black");
      t1 = J.getInterceptor$x(middlePoint);
      t2 = t1.get$x(middlePoint);
      if (typeof nameWidth !== "number")
        return nameWidth.$div();
      textXLocation = J.$sub$n(t2, nameWidth / 2);
      textYLocation = J.$add$ns(t1.get$y(middlePoint), 5);
      J.fillText$3$x(this.ctx, J.get$name$x(this.relationship), textXLocation, textYLocation);
      J.stroke$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.set$fillStyle$x(this.ctx, "black");
      J.set$font$x(this.ctx, "10pt Helvetica");
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      if (this.toggled === true)
        this._toggle$0();
      if (this.toggledRelationshipField != null)
        this._toggleTableField$0();
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    _drawCardinality$3: [function(cardinalityDisplay, middlePoint, glueRelation) {
      var width, t1, t2, t3, x, t4, t5, y, t6, t7, ratio, deltaX, deltaY, pointInLine;
      J.beginPath$0$x(this.ctx);
      J.set$strokeStyle$x(this.ctx, "#F8F8F8");
      J.set$fillStyle$x(this.ctx, "#F8F8F8");
      width = J.measureText$1$x(this.ctx, cardinalityDisplay).width;
      t1 = glueRelation.x;
      t2 = J.getInterceptor$x(middlePoint);
      t3 = J.getInterceptor$n(t1);
      x = t3.$sub(t1, t2.get$x(middlePoint));
      t4 = glueRelation.y;
      t5 = J.getInterceptor$n(t4);
      y = t5.$sub(t4, t2.get$y(middlePoint));
      t2 = J.getInterceptor$ns(x);
      t6 = J.getInterceptor$ns(y);
      t7 = J.$add$ns(t2.$mul(x, x), t6.$mul(y, y));
      if (typeof t7 !== "number")
        H.throwExpression(new P.ArgumentError(t7));
      ratio = 30 / Math.sqrt(t7);
      deltaX = t2.$mul(x, ratio);
      deltaY = t6.$mul(y, ratio);
      pointInLine = H.setRuntimeTypeInfo(new P.Point(t3.$sub(t1, deltaX), t5.$sub(t4, deltaY)), [null]);
      t1 = pointInLine.x;
      t2 = J.getInterceptor$n(t1);
      t3 = pointInLine.y;
      t4 = J.getInterceptor$n(t3);
      J.rect$4$x(this.ctx, t2.$sub(t1, 10), t4.$sub(t3, 10), width, 14);
      J.fillRect$4$x(this.ctx, t2.$sub(t1, 10), t4.$sub(t3, 10), width, 14);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.set$fillStyle$x(this.ctx, "black");
      J.set$strokeStyle$x(this.ctx, "black");
      J.fillText$3$x(this.ctx, cardinalityDisplay, t2.$sub(t1, 10), t3);
    }, "call$3", "get$_drawCardinality", 6, 0, 648, 649, 650, 651, "_drawCardinality"],
    _drawRelationshipField$1: [function(relationshipField) {
      var t1, a, b, c, d;
      t1 = J.getInterceptor$x(relationshipField);
      this.canvasEllipseDrawer.draw$7(J.$add$ns(t1.get$x(relationshipField), 3), J.$add$ns(t1.get$y(relationshipField), 3), t1.get$width(relationshipField), t1.get$height(relationshipField), "#696969", "#696969", false);
      this.canvasEllipseDrawer.draw$7(t1.get$x(relationshipField), t1.get$y(relationshipField), t1.get$width(relationshipField), t1.get$height(relationshipField), "white", "black", false);
      J.fillText$3$x(this.ctx, t1.get$name(relationshipField), J.$add$ns(t1.get$x(relationshipField), 10), J.$add$ns(t1.get$y(relationshipField), 20));
      J.stroke$0$x(this.ctx);
      if (J.$eq(relationshipField.get$primaryKey(), true)) {
        J.set$strokeStyle$x(this.ctx, "black");
        J.set$lineWidth$x(this.ctx, 1);
        J.beginPath$0$x(this.ctx);
        a = J.$add$ns(t1.get$x(relationshipField), 10);
        b = J.$add$ns(J.$add$ns(t1.get$y(relationshipField), 20), 2);
        a = J.toInt$0$n(a);
        b = J.toInt$0$n(b);
        c = J.$add$ns(J.$sub$n(J.$add$ns(t1.get$x(relationshipField), t1.get$width(relationshipField)), 10), 2);
        d = J.$add$ns(J.$add$ns(t1.get$y(relationshipField), 20), 2);
        c = J.toInt$0$n(c);
        d = J.toInt$0$n(d);
        J.moveTo$2$x(this.ctx, a, b);
        J.lineTo$2$x(this.ctx, c, d);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
      }
    }, "call$1", "get$_drawRelationshipField", 2, 0, 652, 593, "_drawRelationshipField"],
    _drawDiamond$2: [function(diamond, lineWidth) {
      var t1, t2;
      t1 = this.highlighted;
      t2 = this.ctx;
      if (t1 === true)
        J.set$strokeStyle$x(t2, "grey");
      else
        J.set$strokeStyle$x(t2, "black");
      J.set$lineWidth$x(this.ctx, lineWidth);
      J.beginPath$0$x(this.ctx);
      t1 = J.getInterceptor$asx(diamond);
      J.moveTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(t1.$index(diamond, "NORTH"))), J.toInt$0$n(J.get$y$x(t1.$index(diamond, "NORTH"))));
      J.lineTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(t1.$index(diamond, "WEST"))), J.toInt$0$n(J.get$y$x(t1.$index(diamond, "WEST"))));
      J.lineTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(t1.$index(diamond, "SOUTH"))), J.toInt$0$n(J.get$y$x(t1.$index(diamond, "SOUTH"))));
      J.lineTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(t1.$index(diamond, "EAST"))), J.toInt$0$n(J.get$y$x(t1.$index(diamond, "EAST"))));
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      this.updateFillingColorGradient$0();
      J.set$fillStyle$x(this.ctx, this.diamondGradient);
      J.fill$0$x(this.ctx);
    }, "call$2", "get$_drawDiamond", 4, 0, 653, 654, 655, "_drawDiamond"],
    _toggle$0: [function() {
      var togglingPoints, t1, p, t2;
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(J.$index$asx(this.relationship.get$nameDiamond(), "NORTH")), 2), J.$sub$n(J.get$y$x(J.$index$asx(this.relationship.get$nameDiamond(), "NORTH")), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(J.$index$asx(this.relationship.get$nameDiamond(), "WEST")), 2), J.$sub$n(J.get$y$x(J.$index$asx(this.relationship.get$nameDiamond(), "WEST")), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(J.$index$asx(this.relationship.get$nameDiamond(), "SOUTH")), 2), J.$sub$n(J.get$y$x(J.$index$asx(this.relationship.get$nameDiamond(), "SOUTH")), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(J.$index$asx(this.relationship.get$nameDiamond(), "EAST")), 2), J.$sub$n(J.get$y$x(J.$index$asx(this.relationship.get$nameDiamond(), "EAST")), 2)), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggle", 0, 0, 137, "_toggle"],
    _toggleTableField$0: [function() {
      var togglingPoints, t1, p, t2;
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.toggledRelationshipField), J.$div$n(J.get$width$x(this.toggledRelationshipField), 2)), 2), J.$sub$n(J.get$y$x(this.toggledRelationshipField), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(this.toggledRelationshipField), 2), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledRelationshipField), 2), J.$div$n(J.get$height$x(this.toggledRelationshipField), 2))), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.$sub$n(J.get$x$x(this.toggledRelationshipField), 2), J.get$width$x(this.toggledRelationshipField)), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledRelationshipField), 2), J.$div$n(J.get$height$x(this.toggledRelationshipField), 2))), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.toggledRelationshipField), J.$div$n(J.get$width$x(this.toggledRelationshipField), 2)), 2), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledRelationshipField), 2), J.get$height$x(this.toggledRelationshipField))), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggleTableField", 0, 0, 16, "_toggleTableField"],
    updateFillingColorGradient$0: [function() {
      this.diamondGradient = null;
      var t1 = J.createLinearGradient$4$x(this.ctx, J.get$x$x(this.relationship), J.get$y$x(this.relationship), J.$add$ns(J.get$x$x(this.relationship), J.get$width$x(this.relationship)), J.$add$ns(J.get$y$x(this.relationship), J.get$height$x(this.relationship)));
      this.diamondGradient = t1;
      t1.addColorStop(0, "#FFDF73");
      this.diamondGradient.addColorStop(1, "#FFD340");
    }, "call$0", "get$updateFillingColorGradient", 0, 0, 137, "updateFillingColorGradient"]
  },
  "+ConceptualRelationshipView": 0,
  LogicalRelationshipView: {
    "^": "RelationshipView;parentConnector-,childConnector-,parentBorderPoint-,childBorderPoint-,glueStartRelation-,glueFinishRelation-,relationshipNameShallBeDrawn-,relationship-,borderInteractionController-,bcnParentTableAndChildTable-,bcnParentTableAndRelationship-,bcnChildTableAndRelationship-,bcnTernaryTableAndRelationship-,TOGGLE_SQUARE_SIZE-,toggled-,highlighted-,toggledRelationshipField-,ctx-,relationshipLines-",
    draw$0: [function() {
      var t1, t2, t3, glueStartRelation, togglePointEnd, t4, t5, t6, togglePointStart, middleX, middleY, glueStartRelation0, toggleX, toggleY, togglePoint;
      J.set$length$asx(this.relationshipLines, 0);
      t1 = this.bcnParentTableAndChildTable;
      t2 = t1.borderPointA;
      this.parentBorderPoint = t2;
      t1 = t1.borderPointB;
      this.childBorderPoint = t1;
      if (t2 == null || t1 == null)
        return;
      if (J.$eq(this.relationship.get$dataType(), "Relacionamento muitos para muitos")) {
        t1 = new S.ConnectorMany(null, null, null, null, null, null, null);
        t1.Connector$2(this.parentBorderPoint, this.ctx);
        this.parentConnector = t1;
        t1 = new S.ConnectorMany(null, null, null, null, null, null, null);
        t1.Connector$2(this.childBorderPoint, this.ctx);
        this.childConnector = t1;
      } else {
        t1 = J.$eq(this.relationship.get$nullAllowed(), "Permitir");
        t2 = this.parentBorderPoint;
        t3 = this.ctx;
        if (t1) {
          t1 = new S.ConnectorZeroOrOne(null, null, null, null, null, null, null);
          t1.Connector$2(t2, t3);
          t1.circled = true;
          this.parentConnector = t1;
        } else {
          t1 = new S.ConnectorOne(null, null, null, null, null, null, null);
          t1.Connector$2(t2, t3);
          this.parentConnector = t1;
        }
        if (J.$eq(this.relationship.get$parentCardinality(), "Zero ou um")) {
          t1 = new S.ConnectorZeroOrOne(null, null, null, null, null, null, null);
          t1.Connector$2(this.childBorderPoint, this.ctx);
          t1.circled = true;
          this.childConnector = t1;
        }
        if (J.$eq(this.relationship.get$parentCardinality(), "Zero ou v\u00e1rios")) {
          t1 = new S.ConnectorZeroOrMany(null, null, null, null, null, null, null);
          t1.Connector$2(this.childBorderPoint, this.ctx);
          t1.circled = true;
          this.childConnector = t1;
        }
        if (J.$eq(this.relationship.get$parentCardinality(), "Um ou v\u00e1rios")) {
          t1 = new S.ConnectorOneOrMany(null, null, null, null, null, null, null);
          t1.Connector$2(this.childBorderPoint, this.ctx);
          this.childConnector = t1;
        }
        if (J.$eq(this.relationship.get$parentCardinality(), "Apenas um")) {
          t1 = new S.ConnectorOne(null, null, null, null, null, null, null);
          t1.Connector$2(this.childBorderPoint, this.ctx);
          this.childConnector = t1;
        }
      }
      this.parentConnector.draw$0();
      this.childConnector.draw$0();
      glueStartRelation = this.parentConnector.gluePoint;
      togglePointEnd = this.childConnector.gluePoint;
      this.glueFinishRelation = togglePointEnd;
      J.set$lineWidth$x(this.ctx, 1);
      J.set$strokeStyle$x(this.ctx, "black");
      if (this.toggled === true)
        J.set$lineWidth$x(this.ctx, 2);
      if (J.$eq(this.relationship.get$dataType(), "Relacionamento n\u00e3o identificador"))
        this._setDashed$1(true);
      if (J.$eq(this.relationship.get$parentTable(), this.relationship.get$childTable())) {
        t1 = this.ctx;
        t2 = glueStartRelation.x;
        t3 = glueStartRelation.y;
        J.moveTo$2$x(t1, t2, t3);
        t1 = J.getInterceptor$n(t3);
        J.lineTo$2$x(this.ctx, t2, t1.$sub(t3, 15));
        J.moveTo$2$x(this.ctx, t2, t1.$sub(t3, 15));
        J.lineTo$2$x(this.ctx, this.glueFinishRelation.x, t1.$sub(t3, 15));
        t2 = H.setRuntimeTypeInfo(new P.Point(t2, t1.$sub(t3, 15)), [null]);
        t4 = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, t1.$sub(t3, 15)), [null]);
        t5 = this.relationshipLines;
        t6 = new S.Line(null, null);
        t6.start = t2;
        t6.end = t4;
        t5.push(t6);
        J.moveTo$2$x(this.ctx, this.glueFinishRelation.x, t1.$sub(t3, 15));
        t3 = this.ctx;
        t1 = this.glueFinishRelation;
        J.lineTo$2$x(t3, t1.x, t1.y);
        togglePointStart = glueStartRelation;
      } else {
        t1 = glueStartRelation.x;
        t2 = J.getInterceptor$ns(t1);
        middleX = J.$sub$n(J.$div$n(t2.$add(t1, this.glueFinishRelation.x), 2), 2.5);
        t3 = glueStartRelation.y;
        t4 = J.getInterceptor$ns(t3);
        middleY = J.$sub$n(J.round$0$n(J.$sub$n(J.$div$n(t4.$add(t3, this.glueFinishRelation.y), 2), 2.5)), 0.5);
        middleX = J.$sub$n(J.round$0$n(middleX), 0.5);
        glueStartRelation0 = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(t2.round$0(t1), 0.5), J.$sub$n(t4.round$0(t3), 0.5)), [null]);
        this.glueFinishRelation = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.round$0$n(this.glueFinishRelation.x), 0.5), J.$sub$n(J.round$0$n(this.glueFinishRelation.y), 0.5)), [null]);
        if (!(J.$eq(this.parentBorderPoint.get$borderCode(), "EAST") && J.$eq(this.childBorderPoint.get$borderCode(), "WEST")))
          t1 = J.$eq(this.parentBorderPoint.get$borderCode(), "WEST") && J.$eq(this.childBorderPoint.get$borderCode(), "EAST");
        else
          t1 = true;
        if (t1) {
          t1 = glueStartRelation0.x;
          t2 = glueStartRelation0.y;
          J.moveTo$2$x(this.ctx, t1, t2);
          J.lineTo$2$x(this.ctx, middleX, t2);
          t1 = H.setRuntimeTypeInfo(new P.Point(t1, t2), [null]);
          t3 = H.setRuntimeTypeInfo(new P.Point(middleX, t2), [null]);
          t4 = this.relationshipLines;
          t5 = new S.Line(null, null);
          t5.start = t1;
          t5.end = t3;
          t4.push(t5);
          J.lineTo$2$x(this.ctx, middleX, this.glueFinishRelation.y);
          t2 = H.setRuntimeTypeInfo(new P.Point(middleX, t2), [null]);
          t5 = H.setRuntimeTypeInfo(new P.Point(middleX, this.glueFinishRelation.y), [null]);
          t4 = this.relationshipLines;
          t3 = new S.Line(null, null);
          t3.start = t2;
          t3.end = t5;
          t4.push(t3);
          t3 = this.ctx;
          t4 = this.glueFinishRelation;
          J.lineTo$2$x(t3, t4.x, t4.y);
          t4 = H.setRuntimeTypeInfo(new P.Point(middleX, this.glueFinishRelation.y), [null]);
          t3 = this.glueFinishRelation;
          t3 = H.setRuntimeTypeInfo(new P.Point(t3.x, t3.y), [null]);
          t5 = this.relationshipLines;
          t2 = new S.Line(null, null);
          t2.start = t4;
          t2.end = t3;
          t5.push(t2);
          togglePointStart = glueStartRelation;
        } else {
          if (!(J.$eq(this.parentBorderPoint.get$borderCode(), "NORTH") && J.$eq(this.childBorderPoint.get$borderCode(), "SOUTH")))
            t1 = J.$eq(this.parentBorderPoint.get$borderCode(), "SOUTH") && J.$eq(this.childBorderPoint.get$borderCode(), "NORTH");
          else
            t1 = true;
          t2 = glueStartRelation0.x;
          t3 = this.ctx;
          t4 = glueStartRelation0.y;
          if (t1) {
            J.moveTo$2$x(t3, t2, t4);
            J.lineTo$2$x(this.ctx, t2, middleY);
            t1 = H.setRuntimeTypeInfo(new P.Point(t2, t4), [null]);
            t3 = H.setRuntimeTypeInfo(new P.Point(t2, middleY), [null]);
            t4 = this.relationshipLines;
            t5 = new S.Line(null, null);
            t5.start = t1;
            t5.end = t3;
            t4.push(t5);
            J.lineTo$2$x(this.ctx, this.glueFinishRelation.x, middleY);
            t2 = H.setRuntimeTypeInfo(new P.Point(t2, middleY), [null]);
            t5 = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, middleY), [null]);
            t4 = this.relationshipLines;
            t3 = new S.Line(null, null);
            t3.start = t2;
            t3.end = t5;
            t4.push(t3);
            t3 = this.ctx;
            t4 = this.glueFinishRelation;
            J.lineTo$2$x(t3, t4.x, t4.y);
            t4 = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, middleY), [null]);
            t3 = this.glueFinishRelation;
            t3 = H.setRuntimeTypeInfo(new P.Point(t3.x, t3.y), [null]);
            t5 = this.relationshipLines;
            t2 = new S.Line(null, null);
            t2.start = t4;
            t2.end = t3;
            t5.push(t2);
            togglePointStart = glueStartRelation;
          } else {
            J.moveTo$2$x(t3, t2, t4);
            J.lineTo$2$x(this.ctx, this.glueFinishRelation.x, t4);
            t1 = H.setRuntimeTypeInfo(new P.Point(t2, t4), [null]);
            t2 = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, t4), [null]);
            t3 = this.relationshipLines;
            t5 = new S.Line(null, null);
            t5.start = t1;
            t5.end = t2;
            t3.push(t5);
            t5 = this.ctx;
            t3 = this.glueFinishRelation;
            J.lineTo$2$x(t5, t3.x, t3.y);
            t3 = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, t4), [null]);
            t5 = this.glueFinishRelation;
            t5 = H.setRuntimeTypeInfo(new P.Point(t5.x, t5.y), [null]);
            t2 = this.relationshipLines;
            t1 = new S.Line(null, null);
            t1.start = t3;
            t1.end = t5;
            t2.push(t1);
            togglePointStart = H.setRuntimeTypeInfo(new P.Point(this.glueFinishRelation.x, t4), [null]);
            togglePointEnd = togglePointStart;
          }
        }
      }
      J.stroke$0$x(this.ctx);
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      this._setDashed$1(false);
      if (this.toggled === true) {
        toggleX = J.$sub$n(J.$div$n(J.$add$ns(togglePointStart.x, togglePointEnd.x), 2), 2.5);
        toggleY = J.$sub$n(J.$div$n(J.$add$ns(togglePointStart.y, togglePointEnd.y), 2), 2.5);
        togglePoint = H.setRuntimeTypeInfo(new P.Point(J.$sub$n(toggleX, 2), J.$sub$n(toggleY, 2)), [null]);
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t1 = togglePoint.x;
        t2 = togglePoint.y;
        J.rect$4$x(this.ctx, t1, t2, 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t1, t2, 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
      if (this.relationshipNameShallBeDrawn === true) {
        J.set$lineWidth$x(this.ctx, 1);
        J.set$fillStyle$x(this.ctx, "black");
        J.set$strokeStyle$x(this.ctx, "black");
        t1 = J.$add$ns(J.$div$n(J.$add$ns(togglePointStart.x, togglePointEnd.x), 2), 5);
        t2 = J.measureText$1$x(this.ctx, J.get$name$x(this.relationship)).width;
        if (typeof t2 !== "number")
          return t2.$div();
        toggleX = J.$sub$n(t1, t2 / 2);
        toggleY = J.$sub$n(J.$div$n(J.$add$ns(togglePointStart.y, togglePointEnd.y), 2), 5);
        J.fillText$3$x(this.ctx, J.get$name$x(this.relationship), toggleX, toggleY);
        J.stroke$0$x(this.ctx);
      }
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    drawRelationshipName$1: [function(enable) {
      this.relationshipNameShallBeDrawn = enable;
    }, "call$1", "get$drawRelationshipName", 2, 0, 656, 657, "drawRelationshipName"],
    _setDashed$1: [function(dashed) {
      var t1 = this.ctx;
      if (dashed) {
        J.setLineDash$1$x(t1, [10]);
        J.set$lineDashOffset$x(this.ctx, 1);
      } else
        J.setLineDash$1$x(t1, []);
    }, "call$1", "get$_setDashed", 2, 0, 658, 548, "_setDashed"],
    toggle$1: [function(toggle) {
      if (toggle)
        this.toggled = true;
      else
        this.toggled = false;
    }, "call$1", "get$toggle", 2, 0, 658, 659, "toggle"]
  },
  "+LogicalRelationshipView": 0,
  RelationshipDefinitionView: {
    "^": "Object;startRel-,endRel-,ctx-",
    draw$0: [function() {
      var t1, t2;
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.set$strokeStyle$x(this.ctx, "black");
      t1 = this.ctx;
      t2 = this.startRel;
      J.moveTo$2$x(t1, t2.x, t2.y);
      t2 = this.ctx;
      t1 = this.endRel;
      J.lineTo$2$x(t2, t1.x, t1.y);
      J.stroke$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
    }, "call$0", "get$draw", 0, 0, 137, "draw"]
  },
  "+RelationshipDefinitionView": 0,
  RelationshipView: {
    "^": "Object;relationship<-,borderInteractionController<-,bcnTernaryTableAndRelationship?-,toggled?-,highlighted?-,toggledRelationshipField?-,relationshipLines<-",
    updateRelationship$1: [function(updatedRelationship) {
      this.relationship = updatedRelationship;
    }, "call$1", "get$updateRelationship", 2, 0, 610, 647, "updateRelationship"],
    setBorderConnections$2: [function(bcnParentTableAndRelationship, bcnChildTableAndRelationship) {
      this.bcnParentTableAndRelationship = bcnParentTableAndRelationship;
      this.bcnChildTableAndRelationship = bcnChildTableAndRelationship;
    }, "call$2", "get$setBorderConnections", 4, 0, 660, 618, 619, "setBorderConnections"],
    glueRelationshipFields$0: [function() {
    }, "call$0", "get$glueRelationshipFields", 0, 0, 137, "glueRelationshipFields"],
    draw$0: [function() {
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    drawRelationshipName$1: [function(enable) {
    }, "call$1", "get$drawRelationshipName", 2, 0, 658, 657, "drawRelationshipName"],
    toggle$1: [function(toggle) {
      if (toggle)
        this.toggled = true;
      else
        this.toggled = false;
    }, "call$1", "get$toggle", 2, 0, 658, 659, "toggle"]
  },
  "+RelationshipView": 0,
  RelationshipViewFactory: {
    "^": "ViewFactory;relationshipViews-,ctx-,logicalViews-,conceptualViews-",
    newRelationshipView$2: [function(relationship, borderInteractionController) {
      var t1, relationshipView, t2;
      if (this.logicalViews === true) {
        t1 = this.ctx;
        relationshipView = new S.LogicalRelationshipView(null, null, null, null, null, null, null, null, null, null, null, null, null, 5, null, null, null, null, null);
        relationshipView.relationship = relationship;
        relationshipView.ctx = t1;
        relationshipView.borderInteractionController = borderInteractionController;
        relationshipView.relationshipLines = [];
      } else
        relationshipView = null;
      if (this.conceptualViews === true) {
        t1 = this.ctx;
        relationshipView = new S.ConceptualRelationshipView(null, null, null, null, null, null, null, null, null, null, null, 5, null, null, null, null, null);
        relationshipView.relationship = relationship;
        relationshipView.ctx = t1;
        relationshipView.borderInteractionController = borderInteractionController;
        t2 = new S.CanvasEllipseDrawer(null);
        t2.ctx = t1;
        relationshipView.canvasEllipseDrawer = t2;
        relationshipView.updateFillingColorGradient$0();
        relationship.updateCentralBorderPoints$0();
      }
      this.relationshipViews.push(relationshipView);
      return relationshipView;
    }, "call$2", "get$newRelationshipView", 4, 0, 661, 600, 156, "newRelationshipView"],
    _copyViews$0: [function() {
      var copiedViews, t1;
      copiedViews = [];
      for (t1 = this.relationshipViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        copiedViews.push(t1._current);
      return copiedViews;
    }, "call$0", "get$_copyViews", 0, 0, 662, "_copyViews"],
    recreateViews$0: [function() {
      var copiedViews, borderInteractionController, t1;
      if (this.relationshipViews.length !== 0) {
        copiedViews = this._copyViews$0();
        if (0 >= copiedViews.length)
          return H.ioore(copiedViews, 0);
        borderInteractionController = copiedViews[0].get$borderInteractionController();
        C.JSArray_methods.set$length(this.relationshipViews, 0);
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(copiedViews, copiedViews.length, 0, null), [H.getTypeArgumentByIndex(copiedViews, 0)]); t1.moveNext$0();)
          this.newRelationshipView$2(t1._current.get$relationship(), borderInteractionController);
      }
    }, "call$0", "get$recreateViews", 0, 0, 137, "recreateViews"]
  },
  "+RelationshipViewFactory": 0,
  Specialization: {
    "^": "BaseCanvasModel;parentTable@-,specializedTables<-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    getFields$0: [function() {
      var t1 = [];
      t1.$builtinTypeInfo = [S.BaseField];
      return t1;
    }, "call$0", "get$getFields", 0, 0, 497, "getFields"],
    addSpecializedTable$1: [function(table) {
      this.specializedTables.push(table);
    }, "call$1", "get$addSpecializedTable", 2, 0, 626, 267, "addSpecializedTable"],
    toJson$0: [function() {
      var map, t1, i, table;
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(0, "specialization", P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.$indexSet$ax(map.$index(0, "specialization"), "diagram_id", this.diagramId);
      J.$indexSet$ax(map.$index(0, "specialization"), "id", this.id);
      J.$indexSet$ax(map.$index(0, "specialization"), "x", this.x);
      J.$indexSet$ax(map.$index(0, "specialization"), "y", this.y);
      J.$indexSet$ax(map.$index(0, "specialization"), "parent_table", J.get$name$x(this.parentTable));
      for (t1 = this.specializedTables, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), i = 1; t1.moveNext$0();) {
        table = t1._current;
        J.$indexSet$ax(map.$index(0, "specialization"), "specialized_table_" + i, J.get$name$x(table));
        ++i;
      }
      return C.JsonCodec_null_null.encode$1(map);
    }, "call$0", "get$toJson", 0, 0, 20, "toJson"],
    Specialization$3: [function(diagramId, parentTable, specializedTable) {
      var t1, t2;
      this.parentTable = parentTable;
      t1 = H.setRuntimeTypeInfo([], [S.Table]);
      this.specializedTables = t1;
      t1.push(specializedTable);
      this.width = 30;
      this.height = 30;
      t1 = J.getInterceptor$x(parentTable);
      t2 = J.getInterceptor$x(specializedTable);
      this.x = J.$div$n(J.$add$ns(t1.get$x(parentTable), t2.get$x(specializedTable)), 2);
      this.y = J.$div$n(J.$add$ns(t1.get$y(parentTable), t2.get$y(specializedTable)), 2);
    }, null, null, 6, 0, 663, 175, 176, 664, ""],
    Specialization$fromJsonMap$3: [function(map, parentTable, specializedTables) {
      var t1 = J.getInterceptor$asx(map);
      this.diagramId = t1.$index(map, "diagram_id");
      this.id = t1.$index(map, "id");
      this.x = t1.$index(map, "x");
      this.y = t1.$index(map, "y");
      this.width = 30;
      this.height = 30;
      this.parentTable = parentTable;
      this.specializedTables = specializedTables;
    }, null, null, 6, 0, 665, 181, 176, 666, "fromJsonMap"]
  },
  "+Specialization": 0,
  SpecializationController: {
    "^": "BaseCanvasModelController;specializationDefinition-,ctx-,specializationViews-,specializationViewFactory-,tableController<-,preferencesController-,diagramController-,_HTTPRequestController-,borderInteractionController-,controllerFactory-",
    createSpecializationFromJsonMap$1: [function(map) {
      var t1, i, t2, parentTable, specializedTables, j, specializedTableIdMapName, specializedTable, specialization;
      t1 = J.getInterceptor$asx(map);
      i = 0;
      while (true) {
        t2 = t1.get$length(map);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        parentTable = this.tableController.getTable$1(J.$index$asx(t1.$index(map, i), "parent_table"));
        specializedTables = [];
        for (j = 1; j < 10; ++j) {
          specializedTableIdMapName = "specialized_table_" + j;
          specializedTable = this.tableController.getTable$1(J.$index$asx(t1.$index(map, i), specializedTableIdMapName));
          if (specializedTable != null)
            specializedTables.push(specializedTable);
        }
        t2 = t1.$index(map, i);
        specialization = new S.Specialization(null, null, null, null, null, null, null, null, null, null, null);
        specialization.BaseCanvasModel$3(0, 0, 0);
        specialization.Specialization$fromJsonMap$3(t2, parentTable, specializedTables);
        this._createSpecialization$1(specialization);
        ++i;
      }
    }, "call$1", "get$createSpecializationFromJsonMap", 2, 0, 609, 181, "createSpecializationFromJsonMap"],
    setRequiredControllers$0: [function() {
      var t1 = this.controllerFactory;
      this.borderInteractionController = t1.borderInteractionController;
      this.tableController = t1.tableController;
      this.preferencesController = t1.preferencesController;
      this.diagramController = t1.diagramController;
      this._HTTPRequestController = t1.hTTPRequestController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    createSpecializationRequest$1: [function(specialization) {
      var createSpecializationRequest, req, t1;
      createSpecializationRequest = new S.CreateSpecializationRequest(null);
      createSpecializationRequest.specialization = specialization;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(createSpecializationRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecializationController_createSpecializationRequest_closure(this, specialization, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$createSpecializationRequest", 2, 0, 667, 668, "createSpecializationRequest"],
    _createSpecialization$1: [function(specialization) {
      var t1, t2, t3, specializationView, table;
      t1 = this.specializationViewFactory;
      t2 = this.borderInteractionController;
      if (t1.logicalViews === true) {
        t3 = t1.ctx;
        specializationView = new S.LogicalSpecializationView(null, null, null, null, null, null, null);
        specializationView.specialization = specialization;
        specializationView.ctx = t3;
        specializationView.borderInteractionController = t2;
      } else
        specializationView = null;
      if (t1.conceptualViews === true) {
        t3 = t1.ctx;
        specializationView = new S.ConceptualSpecializationView(null, null, null, null, null, null, null);
        specializationView.specialization = specialization;
        specializationView.ctx = t3;
        specializationView.borderInteractionController = t2;
      }
      t1.specializationViews.push(specializationView);
      this.borderInteractionController.canvasModels.push(specialization);
      specializationView.borderConnections = this._createConnections$1(specialization);
      this.borderInteractionController.calculateConnectionsLocation$0();
      if (this.diagramController.isLogical$0()) {
        t1 = specialization.specializedTables;
        t2 = new H.ListIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        for (; t2.moveNext$0();) {
          table = t2._current;
          t1 = this.tableController;
          t1._copyPrimaryKeyToForeignKey$2(specialization.parentTable, table);
          t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(table)), table);
        }
      }
    }, "call$1", "get$_createSpecialization", 2, 0, 667, 668, "_createSpecialization"],
    forceUpdateDueToNewPosition$1: [function(baseCanvasModel) {
      var updateSpecializationRequest = new S.UpdateSpecializationRequest(null);
      updateSpecializationRequest.specialization = baseCanvasModel;
      this._HTTPRequestController.executeBaseCanvasModelRequest$1(updateSpecializationRequest);
    }, "call$1", "get$forceUpdateDueToNewPosition", 2, 0, 515, 159, "forceUpdateDueToNewPosition"],
    updateSpecialization$2: [function(specialization, specializedTable) {
      var updateSpecializationRequest, req, t1;
      if (specializedTable != null)
        specialization.addSpecializedTable$1(specializedTable);
      updateSpecializationRequest = new S.UpdateSpecializationRequest(null);
      updateSpecializationRequest.specialization = specialization;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(updateSpecializationRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecializationController_updateSpecialization_closure(this, specialization, specializedTable, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$2", "get$updateSpecialization", 4, 0, 669, 668, 664, "updateSpecialization"],
    deleteSpecialization$1: [function(specialization) {
      var deleteSpecializationRequest, req, t1, t2, t3;
      deleteSpecializationRequest = new S.DeleteSpecializationRequest(null);
      deleteSpecializationRequest.specialization = specialization;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(deleteSpecializationRequest);
      t1 = C.EventStreamProvider_readystatechange._eventType;
      t2 = new W._EventStream(req, t1, false);
      t2.$builtinTypeInfo = [null];
      t3 = new W._EventStreamSubscription(0, req, t1, W._wrapZone(new S.SpecializationController_deleteSpecialization_closure(this, specialization, req)), false);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t2 = t3._onData;
      if (t2 != null && t3._pauseCount <= 0)
        J.addEventListener$3$x(t3._target, t1, t2, false);
    }, "call$1", "get$deleteSpecialization", 2, 0, 667, 668, "deleteSpecialization"],
    deleteSubsequentForeignKeys$1: [function(specialization) {
      var t1, table, t2;
      this.tableController.deleteAllForeignKeys$1(specialization.get$parentTable());
      if (specialization.get$parentTable() != null)
        for (t1 = J.get$iterator$ax(specialization.get$specializedTables()); t1.moveNext$0() === true;) {
          table = t1.get$current();
          t2 = this.tableController;
          t2.updateTableRequest$2(t2.getTable$1(J.get$name$x(table)), table);
        }
    }, "call$1", "get$deleteSubsequentForeignKeys", 2, 0, 667, 668, "deleteSubsequentForeignKeys"],
    deleteSpecializationFromTable$1: [function(table) {
      var specializationsToBeDeleted, t1, tableToBeDisconnected, sv, t2, specializedTable;
      specializationsToBeDeleted = [];
      for (t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), tableToBeDisconnected = null; t1.moveNext$0();) {
        sv = t1._current;
        if (J.$eq(sv.get$specialization().get$parentTable(), table))
          specializationsToBeDeleted.push(sv.get$specialization());
        else {
          for (t2 = J.get$iterator$ax(sv.get$specialization().get$specializedTables()); t2.moveNext$0() === true;) {
            specializedTable = t2.get$current();
            if (J.$eq(specializedTable, table))
              tableToBeDisconnected = specializedTable;
          }
          if (tableToBeDisconnected != null)
            sv.removeBorderConnection$1(this.borderInteractionController.deleteBorderConnection$2(sv.get$specialization(), tableToBeDisconnected));
        }
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(specializationsToBeDeleted, specializationsToBeDeleted.length, 0, null), [H.getTypeArgumentByIndex(specializationsToBeDeleted, 0)]); t1.moveNext$0();)
        this.deleteSpecialization$1(t1._current);
    }, "call$1", "get$deleteSpecializationFromTable", 2, 0, 626, 267, "deleteSpecializationFromTable"],
    highlightSpecialization$2: [function(clickedSpecialization, $status) {
      var sv = this._getSpecializationView$1(clickedSpecialization);
      if ($status === true)
        sv.set$highlighted(true);
      else
        sv.set$highlighted(false);
    }, function(clickedSpecialization) {
      return this.highlightSpecialization$2(clickedSpecialization, null);
    }, "highlightSpecialization$1", "call$2", null, "get$highlightSpecialization", 2, 2, 670, 116, 560, 642, "highlightSpecialization"],
    getSpecializedTables$1: [function(parentTable) {
      var tables, t1, t2, specializationView;
      tables = H.setRuntimeTypeInfo([], [S.Table]);
      for (t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$x(parentTable); t1.moveNext$0();) {
        specializationView = t1._current;
        if (J.$eq(J.get$id$x(specializationView.get$specialization().get$parentTable()), t2.get$id(parentTable)))
          C.JSArray_methods.addAll$1(tables, specializationView.get$specialization().get$specializedTables());
      }
      return tables;
    }, "call$1", "get$getSpecializedTables", 2, 0, 625, 176, "getSpecializedTables"],
    _getSpecializationView$1: [function(specialization) {
      var t1, specializationView;
      for (t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        specializationView = t1._current;
        if (J.$eq(specializationView.get$specialization(), specialization))
          return specializationView;
      }
    }, "call$1", "get$_getSpecializationView", 2, 0, 671, 668, "_getSpecializationView"],
    _createConnections$1: [function(specialization) {
      var connectionsSpecToTable, t1, table, t2, bcm;
      connectionsSpecToTable = H.setRuntimeTypeInfo([], [S.BorderConnection]);
      connectionsSpecToTable.push(this.borderInteractionController.createBorderConnection$2(specialization, specialization.parentTable));
      for (t1 = specialization.specializedTables, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        table = t1._current;
        t2 = this.borderInteractionController;
        t2.toString;
        bcm = new S.BorderConnection(null, null, null, null, null, null, null, null, null, null);
        bcm.canvasModelA = specialization;
        bcm.canvasModelB = table;
        bcm.specialRelation = false;
        bcm.pointsUpdatedController = P.StreamController_StreamController(null, null, null, null, false, null);
        t2.borderConnections.push(bcm);
        connectionsSpecToTable.push(bcm);
      }
      return connectionsSpecToTable;
    }, "call$1", "get$_createConnections", 2, 0, 672, 668, "_createConnections"],
    drag$4: [function(baseCanvasModel, initialCanvasModelPosition, initialClientCord, newClientCord) {
      var t1, newX, newY, sv;
      t1 = J.getInterceptor$x(initialCanvasModelPosition);
      newX = J.$add$ns(t1.get$x(initialCanvasModelPosition), J.$sub$n(newClientCord.x, initialClientCord.x));
      newY = J.$add$ns(t1.get$y(initialCanvasModelPosition), J.$sub$n(newClientCord.y, initialClientCord.y));
      if (J.$lt$n(newX, 5) === true)
        newX = 5;
      if (J.$lt$n(newY, 5) === true)
        newY = 5;
      if (this.preferencesController.preferences.grid === true) {
        newX = J.$mul$ns(J.round$0$n(J.$div$n(newX, 15)), 15);
        newY = J.$mul$ns(J.round$0$n(J.$div$n(newY, 15)), 15);
      }
      baseCanvasModel.updateLocation$1(H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.abs$0$n(newX), 0.5), J.$add$ns(J.abs$0$n(newY), 0.5)), [null]));
      sv = this._getSpecializationView$1(baseCanvasModel);
      if (sv != null)
        sv.updateFillingColorGradient$0();
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$4", "get$drag", 8, 0, 627, 159, 628, 629, 630, "drag"],
    toggle$1: [function(baseCanvasModel) {
      this._getSpecializationView$1(baseCanvasModel).set$toggled(true);
    }, "call$1", "get$toggle", 2, 0, 515, 159, "toggle"],
    untoggleSpecializations$0: [function() {
      for (var t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.set$toggled(false);
    }, "call$0", "get$untoggleSpecializations", 0, 0, 137, "untoggleSpecializations"],
    resetModelLocation$3: [function(baseCanvasModel, baseFieldsPosition, initialCanvasModelPosition) {
      var t1 = J.getInterceptor$x(baseCanvasModel);
      t1.set$x(baseCanvasModel, initialCanvasModelPosition.x);
      t1.set$y(baseCanvasModel, initialCanvasModelPosition.y);
    }, "call$3", "get$resetModelLocation", 6, 0, 634, 159, 635, 628, "resetModelLocation"],
    getClickedSpecialization$1: [function(canvasMousePosition) {
      var t1, t2, t3, t4, t5, sv;
      for (t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = canvasMousePosition.x, t3 = J.getInterceptor$n(t2), t4 = canvasMousePosition.y, t5 = J.getInterceptor$n(t4); t1.moveNext$0();) {
        sv = t1._current;
        if (t3.$gt(t2, J.get$x$x(sv.get$specialization())) === true && t3.$lt(t2, J.$add$ns(J.get$x$x(sv.get$specialization()), J.get$width$x(sv.get$specialization()))) === true && t5.$gt(t4, J.get$y$x(sv.get$specialization())) === true && t5.$lt(t4, J.$add$ns(J.get$y$x(sv.get$specialization()), J.get$height$x(sv.get$specialization()))) === true)
          return sv.get$specialization();
      }
      return;
    }, "call$1", "get$getClickedSpecialization", 2, 0, 673, 551, "getClickedSpecialization"],
    drawAllSpecializations$0: [function() {
      var t1 = this.specializationDefinition;
      if (t1 != null)
        t1.draw$0();
      for (t1 = this.specializationViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.draw$0();
    }, "call$0", "get$drawAllSpecializations", 0, 0, 137, "drawAllSpecializations"],
    SpecializationController$2: [function(ctx, specializationViewFactory) {
      this.ctx = ctx;
      this.specializationViews = specializationViewFactory.specializationViews;
      this.specializationViewFactory = specializationViewFactory;
    }, null, null, 4, 0, 674, 155, 675, ""]
  },
  "+SpecializationController": 0,
  SpecializationController_createSpecializationRequest_closure: {
    "^": "Closure:567;this_0-,specialization_1-,req_2-",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.req_2;
      if (t1.readyState === 4)
        if (t1.status === 201) {
          t2 = this.specialization_1;
          t2.id = J.$index$asx(C.JsonCodec_null_null.decode$1(t1.responseText), "id");
          this.this_0._createSpecialization$1(t2);
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ SpecializationController_createSpecializationRequest_closure": 0,
  SpecializationController_updateSpecialization_closure: {
    "^": "Closure:567;this_0-,specialization_1-,specializedTable_2-,req_3-",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.req_3;
      if (t1.readyState === 4) {
        t1 = t1.status;
        if (t1 === 200 || t1 === 0 || t1 === 204) {
          t1 = this.this_0;
          t2 = this.specialization_1;
          t3 = this.specializedTable_2;
          t1._getSpecializationView$1(t2).addBorderConnection$1(t1.borderInteractionController.createBorderConnection$2(t2, t3));
          t1.borderInteractionController.calculateConnectionsLocation$0();
          if (t1.diagramController.isLogical$0()) {
            t1 = t1.tableController;
            t1._copyPrimaryKeyToForeignKey$2(t2.get$parentTable(), t3);
            t1.updateTableRequest$2(t1.getTable$1(J.get$name$x(t3)), t3);
          }
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ SpecializationController_updateSpecialization_closure": 0,
  SpecializationController_deleteSpecialization_closure: {
    "^": "Closure:567;this_0-,specialization_1-,req_2-",
    call$1: [function(e) {
      var t1, t2, sv;
      t1 = this.req_2;
      if (t1.readyState === 4) {
        t1 = t1.status;
        if (t1 === 200 || t1 === 0 || t1 === 204) {
          t1 = this.this_0;
          t2 = this.specialization_1;
          sv = t1._getSpecializationView$1(t2);
          C.JSArray_methods.remove$1(t1.specializationViews, sv);
          t1.borderInteractionController.deleteCanvasModel$1(t2);
          if (t1.diagramController.isLogical$0())
            t1.deleteSubsequentForeignKeys$1(t2);
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ SpecializationController_deleteSpecialization_closure": 0,
  ConceptualSpecializationView: {
    "^": "SpecializationView;specialization-,borderInteractionController-,borderConnections-,specializationGradient-,highlighted-,ctx-,toggled-",
    draw$0: [function() {
      var t1, bcn, middlePoint, t2, t3, t4, t5, centerPoint, radius;
      J.set$lineWidth$x(this.ctx, 1);
      this._drawConnections$0();
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        bcn = t1._current;
        if (!J.$eq(bcn.get$canvasModelB(), this.specialization.parentTable)) {
          middlePoint = S.calculateMiddlePoint(bcn.get$borderPointA().get$point(), bcn.get$borderPointB().get$point());
          switch (bcn.get$borderPointA().get$borderCode()) {
            case "NORTH":
              t2 = middlePoint.x;
              t3 = middlePoint.y;
              J.moveTo$2$x(this.ctx, t2, t3);
              t4 = J.getInterceptor$n(t2);
              t5 = J.getInterceptor$n(t3);
              J.bezierCurveTo$6$x(this.ctx, t4.$sub(t2, 10), t3, t4.$sub(t2, 10), t3, t4.$sub(t2, 10), t5.$sub(t3, 15));
              J.stroke$0$x(this.ctx);
              J.moveTo$2$x(this.ctx, t2, t3);
              J.bezierCurveTo$6$x(this.ctx, t4.$add(t2, 10), t3, t4.$add(t2, 10), t3, t4.$add(t2, 10), t5.$sub(t3, 15));
              J.stroke$0$x(this.ctx);
              break;
            case "SOUTH":
              t2 = middlePoint.x;
              t3 = middlePoint.y;
              J.moveTo$2$x(this.ctx, t2, t3);
              t4 = J.getInterceptor$ns(t2);
              t5 = J.getInterceptor$ns(t3);
              J.bezierCurveTo$6$x(this.ctx, t4.$add(t2, 10), t3, t4.$add(t2, 10), t3, t4.$add(t2, 10), t5.$add(t3, 15));
              J.stroke$0$x(this.ctx);
              J.moveTo$2$x(this.ctx, t2, t3);
              J.bezierCurveTo$6$x(this.ctx, t4.$sub(t2, 10), t3, t4.$sub(t2, 10), t3, t4.$sub(t2, 10), t5.$add(t3, 15));
              J.stroke$0$x(this.ctx);
              break;
            case "WEST":
              t2 = middlePoint.x;
              t3 = middlePoint.y;
              J.moveTo$2$x(this.ctx, t2, t3);
              t4 = J.getInterceptor$n(t3);
              t5 = J.getInterceptor$n(t2);
              J.bezierCurveTo$6$x(this.ctx, t2, t4.$sub(t3, 10), t2, t4.$sub(t3, 10), t5.$sub(t2, 15), t4.$sub(t3, 10));
              J.stroke$0$x(this.ctx);
              J.moveTo$2$x(this.ctx, t2, t3);
              J.bezierCurveTo$6$x(this.ctx, t2, t4.$add(t3, 10), t2, t4.$add(t3, 10), t5.$sub(t2, 15), t4.$add(t3, 10));
              J.stroke$0$x(this.ctx);
              break;
            case "EAST":
              t2 = middlePoint.x;
              t3 = middlePoint.y;
              J.moveTo$2$x(this.ctx, t2, t3);
              t4 = J.getInterceptor$n(t3);
              t5 = J.getInterceptor$ns(t2);
              J.bezierCurveTo$6$x(this.ctx, t2, t4.$sub(t3, 10), t2, t4.$sub(t3, 10), t5.$add(t2, 15), t4.$sub(t3, 10));
              J.stroke$0$x(this.ctx);
              J.moveTo$2$x(this.ctx, t2, t3);
              J.bezierCurveTo$6$x(this.ctx, t2, t4.$add(t3, 10), t2, t4.$add(t3, 10), t5.$add(t2, 15), t4.$add(t3, 10));
              J.stroke$0$x(this.ctx);
              break;
          }
        }
      }
      t1 = this.specialization;
      t1 = J.$add$ns(t1.x, J.$div$n(t1.width, 2));
      t2 = this.specialization;
      centerPoint = H.setRuntimeTypeInfo(new P.Point(t1, J.$add$ns(t2.y, J.$div$n(t2.height, 2))), [null]);
      t2 = this.specialization;
      radius = S.distance2D(centerPoint, H.setRuntimeTypeInfo(new P.Point(t2.x, t2.y), [null]));
      J.beginPath$0$x(this.ctx);
      J.arc$6$x(this.ctx, centerPoint.x, centerPoint.y, radius, 0, 6.283185307179586, false);
      this.updateFillingColorGradient$0();
      J.set$fillStyle$x(this.ctx, this.specializationGradient);
      J.fill$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1.618033988);
      t1 = this.highlighted;
      t2 = this.ctx;
      if (t1 === true)
        J.set$strokeStyle$x(t2, "grey");
      else
        J.set$strokeStyle$x(t2, "black");
      J.stroke$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.set$strokeStyle$x(this.ctx, "black");
      if (this.toggled === true)
        this._toggle$0();
      J.set$lineWidth$x(this.ctx, 1);
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    updateFillingColorGradient$0: [function() {
      var t1, t2, t3, t4, t5;
      this.specializationGradient = null;
      t1 = this.ctx;
      t2 = this.specialization;
      t3 = t2.x;
      t4 = t2.y;
      t2 = J.$add$ns(t3, t2.width);
      t5 = this.specialization;
      t5 = J.createLinearGradient$4$x(t1, t3, t4, t2, J.$add$ns(t5.y, t5.height));
      this.specializationGradient = t5;
      t5.addColorStop(0, "#886ED7");
      this.specializationGradient.addColorStop(1, "#6C48D7");
    }, "call$0", "get$updateFillingColorGradient", 0, 0, 137, "updateFillingColorGradient"],
    _toggle$0: [function() {
      var togglingPoints, t1, t2, p;
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(this.specialization.x, 2), J.$sub$n(this.specialization.y, 2)), [null]));
      t1 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(t1.x, t1.width), 2), J.$sub$n(this.specialization.y, 2)), [null]));
      t1 = J.$sub$n(this.specialization.x, 2);
      t2 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(t1, J.$sub$n(J.$add$ns(t2.y, t2.height), 2)), [null]));
      t2 = this.specialization;
      t2 = J.$sub$n(J.$add$ns(t2.x, t2.width), 2);
      t1 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(t2, J.$sub$n(J.$add$ns(t1.y, t1.height), 2)), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggle", 0, 0, 137, "_toggle"]
  },
  "+ConceptualSpecializationView": 0,
  LogicalSpecializationView: {
    "^": "SpecializationView;specialization-,borderInteractionController-,borderConnections-,specializationGradient-,highlighted-,ctx-,toggled-",
    updateFillingColorGradient$0: [function() {
    }, "call$0", "get$updateFillingColorGradient", 0, 0, 137, "updateFillingColorGradient"],
    draw$0: [function() {
      var t1, t2, squareDownMidPoint;
      J.set$lineWidth$x(this.ctx, 1);
      this._drawConnections$0();
      J.beginPath$0$x(this.ctx);
      t1 = this.specialization;
      t1 = J.$add$ns(t1.x, J.$div$n(t1.height, 2));
      t2 = this.specialization;
      squareDownMidPoint = H.setRuntimeTypeInfo(new P.Point(t1, J.$add$ns(t2.y, t2.width)), [null]);
      J.arc$6$x(this.ctx, squareDownMidPoint.x, squareDownMidPoint.y, 30, 0, 3.141592653589793, true);
      J.set$fillStyle$x(this.ctx, "white");
      J.fill$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 2);
      J.stroke$0$x(this.ctx);
      if (this.toggled === true)
        this._toggle$0();
      J.set$lineWidth$x(this.ctx, 1);
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    _toggle$0: [function() {
      var togglingPoints, t1, t2, p;
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      t1 = J.$sub$n(this.specialization.x, 2);
      t2 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(t1, J.$sub$n(J.$add$ns(t2.y, t2.height), 2)), [null]));
      t2 = this.specialization;
      t2 = J.$sub$n(J.$add$ns(t2.x, t2.width), 2);
      t1 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(t2, J.$sub$n(J.$add$ns(t1.y, t1.height), 2)), [null]));
      t1 = this.specialization;
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(t1.x, J.$div$n(t1.width, 2)), 2), J.$sub$n(this.specialization.y, 2)), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggle", 0, 0, 137, "_toggle"]
  },
  "+LogicalSpecializationView": 0,
  SpecializationView: {
    "^": "BaseView;specialization<-,borderInteractionController<-,highlighted?-",
    addBorderConnection$1: [function(borderConnection) {
      this.borderConnections.push(borderConnection);
    }, "call$1", "get$addBorderConnection", 2, 0, 518, 519, "addBorderConnection"],
    removeBorderConnection$1: [function(borderConnection) {
      J.remove$1$ax(this.borderConnections, borderConnection);
    }, "call$1", "get$removeBorderConnection", 2, 0, 518, 519, "removeBorderConnection"],
    _drawConnections$0: [function() {
      var t1, bcn;
      for (t1 = this.borderConnections, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        bcn = t1._current;
        J.beginPath$0$x(this.ctx);
        J.moveTo$2$x(this.ctx, J.get$x$x(bcn.get$borderPointA().get$point()), J.get$y$x(bcn.get$borderPointA().get$point()));
        J.lineTo$2$x(this.ctx, J.get$x$x(bcn.get$borderPointB().get$point()), J.get$y$x(bcn.get$borderPointB().get$point()));
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$strokeStyle$x(this.ctx, "black");
      }
    }, "call$0", "get$_drawConnections", 0, 0, 137, "_drawConnections"]
  },
  "+SpecializationView": 0,
  SpecializationViewFactory: {
    "^": "ViewFactory;specializationViews-,ctx-,logicalViews-,conceptualViews-",
    SpecializationViewFactory$1: [function(ctx) {
      this.ctx = ctx;
      this.specializationViews = H.setRuntimeTypeInfo([], [S.SpecializationView]);
    }, null, null, 2, 0, 157, 155, ""]
  },
  "+SpecializationViewFactory": 0,
  ForeignKey: {
    "^": "Object;value*-,foreignTableId<-"
  },
  "+ForeignKey": 0,
  ConceptualModalTableFieldBuilder: {
    "^": "ModalBaseFieldBuilder;tableBody-,baseField-,rng-,moreFieldRowsBtnId-",
    setMoreFieldRowsBtnId$0: [function() {
      this.moreFieldRowsBtnId = "more_field_rows_conceptual_table";
    }, "call$0", "get$setMoreFieldRowsBtnId", 0, 0, 137, "setMoreFieldRowsBtnId"],
    buildBaseFieldRow$1: [function(tableField) {
      var t1, tableFieldRow, tableBody, removeButtonStreamSub, primaryKeyInput, nameInput, compositeInput, multiInput, nullsInput, derivedInput, rowIndex, t2, t3;
      S.ModalBaseFieldBuilder.prototype.buildBaseFieldRow$1.call(this, tableField);
      t1 = J.get$children$x(this.tableBody);
      if (t1.get$length(t1) !== 0)
        J.remove$0$ax(this.tableBody.lastChild);
      tableFieldRow = document.createElement("tr", null);
      tableFieldRow.id = J.toString$0(J.get$id$x(tableField));
      tableBody = document.querySelector("#conceptual_field_table_body");
      tableBody.appendChild(tableFieldRow);
      removeButtonStreamSub = this._addRemoveButton$1(tableFieldRow);
      primaryKeyInput = this._addPrimaryKey$1(tableFieldRow);
      nameInput = this._addFieldName$1(tableFieldRow);
      this._addForeignKey$1(tableFieldRow);
      compositeInput = this._addComposite$1(tableFieldRow);
      multiInput = this._addMultivalued$1(tableFieldRow);
      nullsInput = this._addNulls$1(tableFieldRow);
      derivedInput = this._addDerived$1(tableFieldRow);
      t1 = new W._ChildNodeListLazy(tableBody);
      rowIndex = t1.indexOf$2(t1, tableFieldRow, 0);
      if (tableField.get$composite() === true)
        for (t1 = J.get$iterator$ax(tableField.get$baseSubFields()); t1.moveNext$0() === true;) {
          ++rowIndex;
          this._createSubField$2(t1.get$current(), rowIndex);
        }
      this._addMoreFieldsRow$1(tableBody);
      t1 = J.getInterceptor$x(primaryKeyInput);
      t1.get$onClick(primaryKeyInput).listen$1(new S.ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure(primaryKeyInput, nullsInput));
      t2 = J.getInterceptor$x(compositeInput);
      t3 = "#" + H.S(t2.get$id(compositeInput));
      document.querySelector(t3);
      t2.get$onClick(compositeInput).listen$1(new S.ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0(this, tableFieldRow, tableBody, compositeInput));
      if (J.$eq(J.get$value$x(this.baseField.get$foreignKey()), true)) {
        t1.set$disabled(primaryKeyInput, true);
        removeButtonStreamSub.cancel$0();
        J.set$disabled$x(nameInput, true);
        t2.set$disabled(compositeInput, true);
        J.set$disabled$x(multiInput, true);
        J.set$disabled$x(nullsInput, true);
        J.set$disabled$x(derivedInput, true);
      }
    }, "call$1", "get$buildBaseFieldRow", 2, 0, 676, 677, "buildBaseFieldRow"],
    _addExtraCells$1: [function(moreFieldRowsTr) {
      var i;
      for (i = 0; i < 7; ++i)
        moreFieldRowsTr.appendChild(document.createElement("td", null));
    }, "call$1", "get$_addExtraCells", 2, 0, 0, 584, "_addExtraCells"],
    _createSubField$2: [function(baseField, subFieldRowIndex) {
      var t1, t2, result, tableSubFieldRow, classSet, removeButtonStreamSub, nameInput, multiInput, nullsInput, derivedInput, moreFieldRowsButtonStreamsub;
      this.baseField = baseField;
      t1 = this.tableBody;
      if (t1.childNodes.length !== subFieldRowIndex) {
        t2 = t1.childNodes;
        if (subFieldRowIndex < 0 || subFieldRowIndex >= t2.length)
          return H.ioore(t2, subFieldRowIndex);
        result = t2[subFieldRowIndex];
        t1.removeChild(result);
      }
      tableSubFieldRow = document.createElement("tr", null);
      tableSubFieldRow.id = J.toString$0(J.get$id$x(baseField));
      classSet = J.get$classes$x(tableSubFieldRow);
      classSet.clear$0(0);
      classSet.addAll$1(classSet, ["sub_field_row"]);
      t1 = this.tableBody;
      t1.toString;
      new W._ChildNodeListLazy(t1).insert$2(0, subFieldRowIndex, tableSubFieldRow);
      tableSubFieldRow.appendChild(document.createElement("td", null));
      removeButtonStreamSub = this._addRemoveButton$1(tableSubFieldRow);
      nameInput = this._addFieldName$1(tableSubFieldRow);
      tableSubFieldRow.appendChild(document.createElement("td", null));
      tableSubFieldRow.appendChild(document.createElement("td", null));
      multiInput = this._addMultivalued$1(tableSubFieldRow);
      nullsInput = this._addNulls$1(tableSubFieldRow);
      derivedInput = this._addDerived$1(tableSubFieldRow);
      moreFieldRowsButtonStreamsub = this._addMoreSubFieldsRow$1(subFieldRowIndex + 1);
      if (J.$eq(J.get$value$x(baseField.get$foreignKey()), true)) {
        removeButtonStreamSub.cancel$0();
        J.set$disabled$x(nameInput, true);
        J.set$disabled$x(multiInput, true);
        J.set$disabled$x(nullsInput, true);
        J.set$disabled$x(derivedInput, true);
        moreFieldRowsButtonStreamsub.cancel$0();
      }
    }, "call$2", "get$_createSubField", 4, 0, 594, 532, 595, "_createSubField"],
    _removeSubFields$1: [function(linkRemove) {
      var fieldLine, t1, mainFieldIndex, tableSubFieldRow;
      fieldLine = linkRemove.parentElement.parentElement;
      t1 = this.tableBody;
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      mainFieldIndex = t1.indexOf$1(t1, fieldLine) + 1;
      t1 = this.tableBody;
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      tableSubFieldRow = t1.elementAt$1(t1, mainFieldIndex);
      while (true) {
        t1 = J.getInterceptor$x(tableSubFieldRow);
        if (!(J.$eq(t1.get$className(tableSubFieldRow), "sub_field_row") || J.$eq(t1.get$className(tableSubFieldRow), "more_sub_field_rows_button")))
          break;
        t1.remove$0(tableSubFieldRow);
        t1 = this.tableBody;
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        tableSubFieldRow = t1.elementAt$1(t1, mainFieldIndex);
      }
    }, "call$1", "get$_removeSubFields", 2, 0, 580, 596, "_removeSubFields"]
  },
  "+ConceptualModalTableFieldBuilder": 0,
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure: {
    "^": "Closure:567;primaryKeyInput_0-,nullsInput_1-",
    call$1: [function(evt) {
      if (J.$eq(J.get$checked$x(this.primaryKeyInput_0), true))
        J.set$checked$x(this.nullsInput_1, false);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure": 0,
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0: {
    "^": "Closure:567;this_2-,tableFieldRow_3-,tableBody_4-,compositeInput_5-",
    call$1: [function(evt) {
      var t1;
      if (J.$eq(J.get$checked$x(this.compositeInput_5), true)) {
        S.BaseField$dummy();
        t1 = new W._ChildNodeListLazy(this.tableBody_4);
        this.this_2._addMoreSubFieldsRow$1(t1.indexOf$2(t1, this.tableFieldRow_3, 0) + 1);
      }
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0": 0,
  ConceptualTableModal: {
    "^": "TableModal;oldTable-,table-,tableController-,tableElementIdName-,oldTableName-,tableRowTableFieldRelation-,tableAndTableFieldsValidationCheck-,errorMaps-,coloph$TableModal$_submited-,_canceled-,physical-,_modalId-,_submitListener-,_submited-,type-",
    _populateInputFromModel$0: [function() {
      var t1, tableField, cmtfb;
      J.set$value$x(document.querySelector("#conceptual_table_name"), J.get$name$x(this.table));
      if (J.$eq(J.get$length$asx(this.table.get$tableFields()), 0))
        this._addTableFieldRow$1(S.BaseField$dummy());
      else
        for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
          tableField = t1.get$current();
          cmtfb = new S.ConceptualModalTableFieldBuilder(null, null, null, null);
          cmtfb.tableBody = document.querySelector("#conceptual_field_table_body");
          cmtfb.rng = C.C__JSRandom;
          cmtfb.setMoreFieldRowsBtnId$0();
          cmtfb.buildBaseFieldRow$1(tableField);
        }
    }, "call$0", "get$_populateInputFromModel", 0, 0, 16, "_populateInputFromModel"],
    _populateModelWithInput$0: [function() {
      var tableName, t1, tableField, fieldRow, t2, t3, subTableField;
      tableName = document.querySelector("#conceptual_table_name");
      J.set$name$x(this.table, J.get$value$x(tableName));
      this.tableAndTableFieldsValidationCheck.push(this.table);
      J.clear$0$ax(this.table.get$tableFields());
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (J.$eq(J.get$value$x(tableField.get$foreignKey()), false))
          J.remove$1$ax(this.table.get$tableFields(), tableField);
      }
      for (t1 = J.get$iterator$ax(J.get$rows$x(document.querySelector("#conceptual_field_table")))._html$_iterator, tableField = null; t1.moveNext$0();) {
        fieldRow = t1._html$_current;
        t2 = J.getInterceptor$x(fieldRow);
        t3 = t2.get$cells(fieldRow)._list;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        if (J.get$tagName$x(t3[0]) === "TH")
          continue;
        if (t2.get$id(fieldRow) === "moreFieldRows")
          continue;
        if (t2.get$className(fieldRow) === "sub_field_row") {
          subTableField = this._readAsTableSubField$1(fieldRow);
          if (subTableField != null)
            J.add$1$ax(tableField.baseSubFields, subTableField);
        } else if (t2.get$className(fieldRow) === "more_sub_field_rows_button")
          continue;
        else {
          tableField = this._readAsTableField$1(fieldRow);
          if (tableField != null) {
            J.add$1$ax(this.table.get$tableFields(), tableField);
            this.tableRowTableFieldRelation.$indexSet(0, tableField, fieldRow);
            this.tableAndTableFieldsValidationCheck.push(tableField);
          }
        }
      }
      this._mapOldPositions$2(this.table, this.oldTable);
    }, "call$0", "get$_populateModelWithInput", 0, 0, 16, "_populateModelWithInput"],
    _readAsTableField$1: [function(fieldRow) {
      var t1, fieldRowCells, tableFieldId, primaryKey, $name, foreignKey, composite, multivalued, nulls;
      t1 = J.getInterceptor$x(fieldRow);
      fieldRowCells = t1.get$cells(fieldRow);
      tableFieldId = t1.get$id(fieldRow) !== "null" ? H.Primitives_parseInt(t1.get$id(fieldRow), null, null) : null;
      t1 = fieldRowCells._list;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      primaryKey = J.get$checked$x(J.$index$asx(J.get$children$x(t1[1]), 0));
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      $name = J.get$value$x(J.$index$asx(J.get$children$x(t1[2]), 1));
      if (J.get$isEmpty$asx($name) === true)
        return;
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      if (J.get$checked$x(J.$index$asx(J.get$children$x(t1[3]), 0)) === true) {
        foreignKey = new S.ForeignKey(null, null);
        foreignKey.value = true;
        foreignKey.foreignTableId = -1;
      } else {
        foreignKey = new S.ForeignKey(null, null);
        foreignKey.value = false;
        foreignKey.foreignTableId = -1;
      }
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      composite = J.get$checked$x(J.$index$asx(J.get$children$x(t1[4]), 0));
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      multivalued = J.get$checked$x(J.$index$asx(J.get$children$x(t1[5]), 0));
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      nulls = J.get$checked$x(J.$index$asx(J.get$children$x(t1[6]), 0));
      if (7 >= t1.length)
        return H.ioore(t1, 7);
      return S.TableField$(tableFieldId, $name, primaryKey, foreignKey, "", nulls, composite, multivalued, J.get$checked$x(J.$index$asx(J.get$children$x(t1[7]), 0)), null);
    }, "call$1", "get$_readAsTableField", 2, 0, 678, 598, "_readAsTableField"],
    _readAsTableSubField$1: [function(fieldRow) {
      var t1, fieldRowCells, subTableFieldId, $name, foreignKey, multivalued, nulls;
      t1 = J.getInterceptor$x(fieldRow);
      fieldRowCells = t1.get$cells(fieldRow);
      subTableFieldId = t1.get$id(fieldRow) !== "null" ? H.Primitives_parseInt(t1.get$id(fieldRow), null, null) : null;
      t1 = fieldRowCells._list;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      $name = J.get$value$x(J.$index$asx(J.get$children$x(t1[2]), 1));
      if (J.get$isEmpty$asx($name) === true)
        return;
      foreignKey = new S.ForeignKey(null, null);
      foreignKey.value = false;
      foreignKey.foreignTableId = -1;
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      multivalued = J.get$checked$x(J.$index$asx(J.get$children$x(t1[5]), 0));
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      nulls = J.get$checked$x(J.$index$asx(J.get$children$x(t1[6]), 0));
      if (7 >= t1.length)
        return H.ioore(t1, 7);
      return S.TableField$(subTableFieldId, $name, false, foreignKey, "", nulls, false, multivalued, J.get$checked$x(J.$index$asx(J.get$children$x(t1[7]), 0)), null);
    }, "call$1", "get$_readAsTableSubField", 2, 0, 678, 598, "_readAsTableSubField"],
    _addTableFieldRow$1: [function(tableField) {
      var cmtfb = new S.ConceptualModalTableFieldBuilder(null, null, null, null);
      cmtfb.tableBody = document.querySelector("#conceptual_field_table_body");
      cmtfb.rng = C.C__JSRandom;
      cmtfb.setMoreFieldRowsBtnId$0();
      cmtfb.buildBaseFieldRow$1(tableField);
    }, "call$1", "get$_addTableFieldRow", 2, 0, 679, 677, "_addTableFieldRow"],
    _clearModal$0: [function() {
      J.set$value$x(document.querySelector("#table_name"), "");
      document.querySelector("#conceptual_field_table_body").textContent = "";
      this._clearHelpSpans$0();
      this._clearControlGroupDivs$0();
    }, "call$0", "get$_clearModal", 0, 0, 16, "_clearModal"],
    ConceptualTableModal$3: [function(table, tableController, modalId) {
      this.tableElementIdName = "#conceptual_table_name";
      this.oldTable = J.clone$0$x(table);
    }, null, null, 6, 0, 680, 267, 164, 602, ""]
  },
  "+ConceptualTableModal": 0,
  LogicalModalTableFieldBuilder: {
    "^": "ModalBaseFieldBuilder;physical-,tableBody-,baseField-,rng-,moreFieldRowsBtnId-",
    setMoreFieldRowsBtnId$0: [function() {
      this.moreFieldRowsBtnId = "more_field_rows_logical_table";
    }, "call$0", "get$setMoreFieldRowsBtnId", 0, 0, 137, "setMoreFieldRowsBtnId"],
    buildBaseFieldRow$1: [function(tableField) {
      var t1, tableFieldRow, removeButtonStreamSub, primaryKeyInput, nameInput, nullsInput, dataTypeTd, controls, dataTypeInput;
      S.ModalBaseFieldBuilder.prototype.buildBaseFieldRow$1.call(this, tableField);
      t1 = J.get$children$x(this.tableBody);
      if (t1.get$length(t1) !== 0)
        J.remove$0$ax(this.tableBody.lastChild);
      tableFieldRow = document.createElement("tr", null);
      tableFieldRow.id = J.toString$0(J.get$id$x(tableField));
      this.tableBody.appendChild(tableFieldRow);
      removeButtonStreamSub = this._addRemoveButton$1(tableFieldRow);
      primaryKeyInput = this._addPrimaryKey$1(tableFieldRow);
      nameInput = this._addFieldName$1(tableFieldRow);
      nullsInput = this._addNulls$1(tableFieldRow);
      this._addForeignKey$1(tableFieldRow);
      if (this.physical === true) {
        dataTypeTd = document.createElement("td", null);
        tableFieldRow.appendChild(dataTypeTd);
        controls = document.createElement("div", null);
        J.set$classes$x(controls, ["controls"]);
        dataTypeTd.appendChild(controls);
        dataTypeInput = W._ElementFactoryProvider_createElement_tag("input", null);
        t1 = J.getInterceptor$x(dataTypeInput);
        t1.set$type(dataTypeInput, "text");
        t1.set$classes(dataTypeInput, ["input"]);
        t1.set$placeholder(dataTypeInput, "Tipo");
        if (!J.$eq(J.get$name$x(this.baseField), ""))
          t1.set$value(dataTypeInput, this.baseField.get$dataType());
        dataTypeTd.appendChild(dataTypeInput);
      }
      this._addMoreFieldsRow$1(this.tableBody);
      t1 = J.getInterceptor$x(primaryKeyInput);
      t1.get$onClick(primaryKeyInput).listen$1(new S.LogicalModalTableFieldBuilder_buildBaseFieldRow_closure(primaryKeyInput, nullsInput));
      this.disableNullsOnPrimaryKey$2(primaryKeyInput, nullsInput);
      t1.get$onChange(primaryKeyInput).listen$1(new S.LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0(this, primaryKeyInput, nullsInput));
      if (J.$eq(J.get$value$x(this.baseField.get$foreignKey()), true)) {
        removeButtonStreamSub.cancel$0();
        J.set$disabled$x(nameInput, true);
        t1.set$disabled(primaryKeyInput, true);
        J.set$disabled$x(nullsInput, true);
      }
    }, "call$1", "get$buildBaseFieldRow", 2, 0, 676, 677, "buildBaseFieldRow"],
    disableNullsOnPrimaryKey$2: [function(primaryKeyInput, nullsInput) {
      var t1 = J.getInterceptor$x(nullsInput);
      if (J.$eq(J.get$checked$x(primaryKeyInput), true))
        t1.set$disabled(nullsInput, true);
      else
        t1.set$disabled(nullsInput, false);
    }, "call$2", "get$disableNullsOnPrimaryKey", 4, 0, 681, 682, 683, "disableNullsOnPrimaryKey"],
    _addExtraCells$1: [function(moreFieldRowsTr) {
      var t1, numberOfHeaders, i;
      t1 = J.get$children$x(document.querySelector("#logical_field_table_header_row"));
      numberOfHeaders = t1.get$length(t1) - 1;
      for (i = 0; i < numberOfHeaders; ++i)
        moreFieldRowsTr.appendChild(document.createElement("td", null));
    }, "call$1", "get$_addExtraCells", 2, 0, 684, 584, "_addExtraCells"],
    _removeSubFields$1: [function(linkRemove) {
    }, "call$1", "get$_removeSubFields", 2, 0, 685, 596, "_removeSubFields"],
    _createSubField$2: [function(baseField, subFieldRowIndex) {
    }, "call$2", "get$_createSubField", 4, 0, 686, 532, 595, "_createSubField"]
  },
  "+LogicalModalTableFieldBuilder": 0,
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure: {
    "^": "Closure:567;primaryKeyInput_0-,nullsInput_1-",
    call$1: [function(evt) {
      if (J.$eq(J.get$checked$x(this.primaryKeyInput_0), true))
        J.set$checked$x(this.nullsInput_1, false);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ LogicalModalTableFieldBuilder_buildBaseFieldRow_closure": 0,
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0: {
    "^": "Closure:567;this_2-,primaryKeyInput_3-,nullsInput_4-",
    call$1: [function(evt) {
      this.this_2.disableNullsOnPrimaryKey$2(this.primaryKeyInput_3, this.nullsInput_4);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0": 0,
  LogicalTableModal: {
    "^": "TableModal;oldTable-,table-,tableController-,tableElementIdName-,oldTableName-,tableRowTableFieldRelation-,tableAndTableFieldsValidationCheck-,errorMaps-,coloph$TableModal$_submited-,_canceled-,physical-,_modalId-,_submitListener-,_submited-,type-",
    _populateInputFromModel$0: [function() {
      var t1, tableField, tableBody, t2, lmtfb;
      J.set$value$x(document.querySelector("#conceptual_table_name"), J.get$name$x(this.table));
      if (J.$eq(J.get$length$asx(this.table.get$tableFields()), 0)) {
        t1 = new S.ForeignKey(null, null);
        t1.value = false;
        t1.foreignTableId = -1;
        this._addTableFieldRow$1(S.TableField$(null, "", true, t1, "", false, false, false, false, null));
      } else {
        J.set$value$x(document.querySelector("#table_name"), J.get$name$x(this.table));
        for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
          tableField = t1.get$current();
          tableBody = document.querySelector("#logical_field_table_body");
          t2 = this.physical;
          lmtfb = new S.LogicalModalTableFieldBuilder(null, null, null, null, null);
          lmtfb.tableBody = tableBody;
          lmtfb.rng = C.C__JSRandom;
          lmtfb.setMoreFieldRowsBtnId$0();
          lmtfb.physical = t2;
          lmtfb.buildBaseFieldRow$1(tableField);
        }
      }
    }, "call$0", "get$_populateInputFromModel", 0, 0, 16, "_populateInputFromModel"],
    _populateModelWithInput$0: [function() {
      var tableName, t1, tableField, fieldRow, t2, t3, tableFieldId, primaryKey, $name, nulls, foreignKey, dataType;
      tableName = document.querySelector("#table_name");
      J.set$name$x(this.table, J.get$value$x(tableName));
      this.tableAndTableFieldsValidationCheck.push(this.table);
      J.clear$0$ax(this.table.get$tableFields());
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (J.$eq(J.get$value$x(tableField.get$foreignKey()), false))
          J.remove$1$ax(this.table.get$tableFields(), tableField);
      }
      for (t1 = J.get$iterator$ax(J.get$rows$x(document.querySelector("#logical_field_table")))._html$_iterator; t1.moveNext$0();) {
        fieldRow = t1._html$_current;
        t2 = J.getInterceptor$x(fieldRow);
        t3 = t2.get$cells(fieldRow)._list;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        if (J.get$tagName$x(t3[0]) === "TH")
          continue;
        if (t2.get$id(fieldRow) === "moreFieldRows")
          continue;
        tableFieldId = t2.get$id(fieldRow) !== "null" ? H.Primitives_parseInt(t2.get$id(fieldRow), null, null) : null;
        t2 = t2.get$cells(fieldRow)._list;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        primaryKey = J.get$checked$x(J.$index$asx(J.get$children$x(t2[1]), 0));
        if (2 >= t2.length)
          return H.ioore(t2, 2);
        $name = J.get$value$x(J.$index$asx(J.get$children$x(t2[2]), 1));
        if (3 >= t2.length)
          return H.ioore(t2, 3);
        nulls = J.get$checked$x(J.$index$asx(J.get$children$x(t2[3]), 0));
        if (4 >= t2.length)
          return H.ioore(t2, 4);
        J.$index$asx(J.get$children$x(t2[4]), 0);
        foreignKey = new S.ForeignKey(null, null);
        foreignKey.value = false;
        foreignKey.foreignTableId = -1;
        if (this.physical) {
          if (5 >= t2.length)
            return H.ioore(t2, 5);
          dataType = J.get$value$x(J.$index$asx(J.get$children$x(t2[5]), 1));
        } else
          dataType = "";
        tableField = S.TableField$(tableFieldId, $name, primaryKey, foreignKey, dataType, nulls, false, false, false, null);
        J.add$1$ax(this.table.get$tableFields(), tableField);
        this.tableRowTableFieldRelation.$indexSet(0, tableField, fieldRow);
        this.tableAndTableFieldsValidationCheck.push(tableField);
        this._mapOldPositions$2(this.table, this.oldTable);
      }
    }, "call$0", "get$_populateModelWithInput", 0, 0, 16, "_populateModelWithInput"],
    _addTableFieldRow$1: [function(tableField) {
      var tableBody, t1, lmtfb;
      tableBody = document.querySelector("#logical_field_table_body");
      t1 = this.physical;
      lmtfb = new S.LogicalModalTableFieldBuilder(null, null, null, null, null);
      lmtfb.tableBody = tableBody;
      lmtfb.rng = C.C__JSRandom;
      lmtfb.setMoreFieldRowsBtnId$0();
      lmtfb.physical = t1;
      lmtfb.buildBaseFieldRow$1(tableField);
    }, "call$1", "get$_addTableFieldRow", 2, 0, 679, 677, "_addTableFieldRow"],
    _clearModal$0: [function() {
      J.set$value$x(document.querySelector("#table_name"), "");
      document.querySelector("#logical_field_table_body").textContent = "";
      this._clearHelpSpans$0();
      this._clearControlGroupDivs$0();
    }, "call$0", "get$_clearModal", 0, 0, 16, "_clearModal"],
    LogicalTableModal$4: [function(table, tableController, modalId, physical) {
      var tableFieldTypeHeader;
      this.tableElementIdName = "#table_name";
      this.oldTable = J.clone$0$x(table);
      tableFieldTypeHeader = document.querySelector("#logical_table_data_type_header");
      if (this.physical)
        J.set$display$x(tableFieldTypeHeader.style, "");
      else
        J.set$display$x(tableFieldTypeHeader.style, "none");
    }, null, null, 8, 0, 687, 267, 164, 602, 688, ""]
  },
  "+LogicalTableModal": 0,
  TableModal: {
    "^": "BaseModal;table>-,tableController<-",
    _handleSubmit$0: [function() {
      var t1 = H.S(this._modalId) + "_submit";
      t1 = J.get$onClick$x(document.querySelector(t1));
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableModal__handleSubmit_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this._submitListener = t1;
    }, "call$0", "get$_handleSubmit", 0, 0, 16, "_handleSubmit"],
    receiveErrorsFromTableValidation$2: [function(table, errors) {
      this.waitForValidationInstance$2(H.S(this._modalId) + "_submit", false);
      if (J.$eq(J.get$length$asx(errors), 0)) {
        C.JSArray_methods.remove$1(this.tableAndTableFieldsValidationCheck, table);
        this._submitIfNoError$0();
      }
      if (!this.ableToValidate$1(table))
        return;
      this.errorMaps.push(errors);
      C.JSArray_methods.remove$1(this.tableAndTableFieldsValidationCheck, table);
      this._displayTableErrors$1(errors);
    }, "call$2", "get$receiveErrorsFromTableValidation", 4, 0, 689, 267, 603, "receiveErrorsFromTableValidation"],
    _displayTableErrors$1: [function(errors) {
      var t1, t2, key, messagesOfKey, t3, fullMessage, i, t4, tableName, helpSpan, classSet;
      for (t1 = J.get$iterator$ax(errors.get$keys()), t2 = J.getInterceptor$asx(errors); t1.moveNext$0() === true;) {
        key = t1.get$current();
        messagesOfKey = t2.$index(errors, key);
        t3 = J.getInterceptor$asx(messagesOfKey);
        fullMessage = t3.$index(messagesOfKey, 0);
        i = 1;
        while (true) {
          t4 = t3.get$length(messagesOfKey);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          fullMessage = H.S(fullMessage) + ", " + H.S(t3.$index(messagesOfKey, i));
          ++i;
        }
        switch (key) {
          case "name":
            t3 = this.tableElementIdName;
            tableName = document.querySelector(t3);
            helpSpan = document.createElement("span", null);
            classSet = J.get$classes$x(helpSpan);
            classSet.clear$0(0);
            classSet.addAll$1(classSet, ["help-inline"]);
            helpSpan.textContent = fullMessage;
            tableName.parentElement.appendChild(helpSpan);
            classSet = J.get$classes$x(tableName.parentElement.parentElement);
            classSet.clear$0(0);
            classSet.addAll$1(classSet, ["control-group", "error"]);
            break;
        }
      }
    }, "call$1", "get$_displayTableErrors", 2, 0, 191, 603, "_displayTableErrors"],
    ableToValidate$1: [function(tableFieldOrTable) {
      var t1;
      for (t1 = this.tableAndTableFieldsValidationCheck, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        if (J.$eq(t1._current, tableFieldOrTable))
          return true;
      if (this.tableAndTableFieldsValidationCheck.length === 0)
        return false;
      return false;
    }, "call$1", "get$ableToValidate", 2, 0, 422, 690, "ableToValidate"],
    _submitIfNoError$0: [function() {
      var t1, t2, t3;
      if (this.coloph$TableModal$_submited)
        return;
      if (!this._checkIfErrorsFound$0()) {
        t1 = $.get$context();
        Q._deserialize(J.$index$asx(t1._jsObject, "jQuery"), t1).call$1(this._modalId).modal$1("hide");
        this.coloph$TableModal$_submited = true;
        this.cancelSubmitListener$0();
        t1 = this.type;
        t2 = this.tableController;
        t3 = this.table;
        if (t1 === "CREATE")
          t2.createTableRequest$2(t3, true);
        else
          t2.updateTableRequest$2(t2.getTable$1(this.oldTableName), t3);
        return;
      }
    }, "call$0", "get$_submitIfNoError", 0, 0, 16, "_submitIfNoError"],
    _checkIfErrorsFound$0: [function() {
      if (this.errorMaps.length === 0)
        return false;
      else
        return true;
    }, "call$0", "get$_checkIfErrorsFound", 0, 0, 16, "_checkIfErrorsFound"],
    cancelSubmitListener$0: [function() {
      if (!this._canceled) {
        this._submitListener.cancel$0();
        this._canceled = true;
      }
    }, "call$0", "get$cancelSubmitListener", 0, 0, 16, "cancelSubmitListener"],
    _clearHelpSpans$0: [function() {
      var helpSpans, t1;
      helpSpans = W._FrozenElementList$_wrap(document.querySelectorAll(".help-inline"), null);
      for (t1 = helpSpans.get$iterator(helpSpans); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    }, "call$0", "get$_clearHelpSpans", 0, 0, 16, "_clearHelpSpans"],
    _clearControlGroupDivs$0: [function() {
      var controlGroupDivs, t1;
      controlGroupDivs = W._FrozenElementList$_wrap(document.querySelectorAll(".control-group"), null);
      for (t1 = controlGroupDivs.get$iterator(controlGroupDivs); t1.moveNext$0();)
        J.set$classes$x(t1._current, ["control-group"]);
    }, "call$0", "get$_clearControlGroupDivs", 0, 0, 16, "_clearControlGroupDivs"],
    TableModal$4: [function(table, tableController, modalId, physical) {
      this.table = table;
      this.tableController = tableController;
      this._modalId = modalId;
      this.physical = physical;
      this.coloph$TableModal$_submited = false;
      this._canceled = false;
      this.oldTableName = J.get$name$x(table);
      this.tableRowTableFieldRelation = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      this.tableAndTableFieldsValidationCheck = [];
      this.errorMaps = [];
      if (J.get$name$x(this.table) == null)
        this.type = "CREATE";
      else
        this.type = "EDIT";
      this._clearModal$0();
      this._populateInputFromModel$0();
      this._handleSubmit$0();
      this.showModal$0(0);
    }, null, null, 8, 0, 687, 267, 164, 602, 688, ""]
  },
  "+TableModal": 0,
  TableModal__handleSubmit_closure: {
    "^": "Closure:567;this_0-",
    call$1: [function(evt) {
      var t1 = this.this_0;
      t1.waitForValidationInstance$2(H.S(t1._modalId) + "_submit", true);
      t1.tableRowTableFieldRelation.clear$0(0);
      C.JSArray_methods.set$length(t1.tableAndTableFieldsValidationCheck, 0);
      C.JSArray_methods.set$length(t1.errorMaps, 0);
      t1._clearHelpSpans$0();
      t1._clearControlGroupDivs$0();
      t1._populateModelWithInput$0();
      t1.tableController.validate$2(t1.table, t1);
    }, "call$1", null, 2, 0, 567, 540, "call"],
    $isFunction: true
  },
  "+ TableModal__handleSubmit_closure": 0,
  TableModalFactory: {
    "^": "ModalFactory;logicalViews-,conceptualViews-",
    newTableModal$3: [function(table, tableController, physical) {
      var t1;
      if (this.logicalViews === true) {
        t1 = new S.LogicalTableModal(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.TableModal$4(table, tableController, "#logical_table_modal", physical);
        t1.LogicalTableModal$4(table, tableController, "#logical_table_modal", physical);
        return t1;
      }
      if (this.conceptualViews === true) {
        t1 = new S.ConceptualTableModal(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.TableModal$4(table, tableController, "#conceptual_table_modal", false);
        t1.ConceptualTableModal$3(table, tableController, "#conceptual_table_modal");
        return t1;
      }
    }, "call$3", "get$newTableModal", 6, 0, 691, 267, 164, 688, "newTableModal"]
  },
  "+TableModalFactory": 0,
  Table: {
    "^": "BaseCanvasModel;tableFields<-,name*-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    updateLocation$1: [function(newLocation) {
      S.BaseCanvasModel.prototype.updateLocation$1.call(this, newLocation);
    }, "call$1", "get$updateLocation", 2, 0, 477, 478, "updateLocation"],
    isWeakEntity$0: [function() {
      for (var t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        if (J.$eq(J.get$value$x(t1._current.get$foreignKey()), true))
          return true;
      return false;
    }, "call$0", "get$isWeakEntity", 0, 0, 346, "isWeakEntity"],
    deletePrimaryKeyFieldsWithSameName$1: [function(tableToHaveFieldsDeleted) {
      var fieldsToBeDeleted, t1, parentField, t2, t3, otherField, fieldBeingDeleted;
      fieldsToBeDeleted = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        parentField = t1._current;
        if (J.$eq(parentField.get$primaryKey(), true))
          for (t2 = J.get$iterator$ax(tableToHaveFieldsDeleted.getFields$0()), t3 = J.getInterceptor$x(parentField); t2.moveNext$0() === true;) {
            otherField = t2.get$current();
            if (J.$eq(J.get$name$x(otherField), t3.get$name(parentField)))
              fieldsToBeDeleted.push(otherField);
          }
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(fieldsToBeDeleted, fieldsToBeDeleted.length, 0, null), [H.getTypeArgumentByIndex(fieldsToBeDeleted, 0)]); t1.moveNext$0();) {
        fieldBeingDeleted = t1._current;
        J.remove$1$ax(tableToHaveFieldsDeleted.getFields$0(), fieldBeingDeleted);
      }
    }, "call$1", "get$deletePrimaryKeyFieldsWithSameName", 2, 0, 626, 692, "deletePrimaryKeyFieldsWithSameName"],
    deleteNonPrimaryKeyFieldsWithSameName$1: [function(tableToHaveFieldsDeleted) {
      var fieldsToBeDeleted, t1, parentField, t2, t3, otherField, fieldBeingDeleted;
      fieldsToBeDeleted = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        parentField = t1._current;
        if (J.$eq(parentField.get$primaryKey(), false))
          for (t2 = J.get$iterator$ax(tableToHaveFieldsDeleted.getFields$0()), t3 = J.getInterceptor$x(parentField); t2.moveNext$0() === true;) {
            otherField = t2.get$current();
            if (J.$eq(J.get$name$x(otherField), t3.get$name(parentField)))
              fieldsToBeDeleted.push(otherField);
          }
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(fieldsToBeDeleted, fieldsToBeDeleted.length, 0, null), [H.getTypeArgumentByIndex(fieldsToBeDeleted, 0)]); t1.moveNext$0();) {
        fieldBeingDeleted = t1._current;
        J.remove$1$ax(tableToHaveFieldsDeleted.getFields$0(), fieldBeingDeleted);
      }
    }, "call$1", "get$deleteNonPrimaryKeyFieldsWithSameName", 2, 0, 626, 692, "deleteNonPrimaryKeyFieldsWithSameName"],
    toJson$1: [function(oldTable) {
      var map, mappedFields;
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(0, "table", P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.$indexSet$ax(map.$index(0, "table"), "id", this.id);
      J.$indexSet$ax(map.$index(0, "table"), "diagram_id", this.diagramId);
      J.$indexSet$ax(map.$index(0, "table"), "name", this.name);
      J.$indexSet$ax(map.$index(0, "table"), "x", this.x);
      J.$indexSet$ax(map.$index(0, "table"), "y", this.y);
      mappedFields = this.mapFields$1(oldTable);
      J.$indexSet$ax(map.$index(0, "table"), "table_fields_attributes", mappedFields);
      return C.JsonCodec_null_null.encode$1(map);
    }, function() {
      return this.toJson$1(null);
    }, "toJson$0", "call$1", null, "get$toJson", 0, 2, 693, 116, 694, "toJson"],
    toMap$0: [function() {
      var map, mappedFields, t1;
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(0, "id", this.id);
      map.$indexSet(0, "name", this.name);
      map.$indexSet(0, "x", this.x);
      map.$indexSet(0, "y", this.y);
      mappedFields = H.setRuntimeTypeInfo([], [P.Map]);
      for (t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        mappedFields.push(t1._current.toMap$0());
      map.$indexSet(0, "table_fields_attributes", mappedFields);
      return map;
    }, "call$0", "get$toMap", 0, 0, 646, "toMap"],
    clone$0: [function(_) {
      var cloneTableFields, t1, tableField, t2, cloneTableField, clonedSubTableFields, subTableField, t3, cloneSubTableField, cloneTable;
      cloneTableFields = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tableField = t1._current;
        t2 = J.getInterceptor$x(tableField);
        cloneTableField = S.TableField$(t2.get$id(tableField), t2.get$name(tableField), tableField.get$primaryKey(), tableField.get$foreignKey(), tableField.get$dataType(), tableField.get$nulls(), tableField.get$composite(), tableField.get$multivalued(), tableField.get$derived(), tableField.get$baseSubFields());
        cloneTableField.x = t2.get$x(tableField);
        cloneTableField.y = t2.get$y(tableField);
        cloneTableFields.push(cloneTableField);
        clonedSubTableFields = [];
        clonedSubTableFields.$builtinTypeInfo = [S.TableField];
        for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
          subTableField = t2.get$current();
          t3 = J.getInterceptor$x(subTableField);
          cloneSubTableField = S.TableField$(t3.get$id(subTableField), t3.get$name(subTableField), subTableField.get$primaryKey(), subTableField.get$foreignKey(), subTableField.get$dataType(), subTableField.get$nulls(), subTableField.get$composite(), subTableField.get$multivalued(), tableField.get$derived(), subTableField.get$baseSubFields());
          cloneSubTableField.x = t3.get$x(subTableField);
          cloneSubTableField.y = t3.get$y(subTableField);
          clonedSubTableFields.push(cloneSubTableField);
        }
        cloneTableField.baseSubFields = clonedSubTableFields;
      }
      cloneTable = S.Table$(this.diagramId, this.name, this.x, this.y, cloneTableFields);
      cloneTable.id = this.id;
      cloneTable.tableFields = cloneTableFields;
      cloneTable.width = this.width;
      cloneTable.height = this.height;
      return cloneTable;
    }, "call$0", "get$clone", 0, 0, 695, "clone"],
    deleteForeignKey$1: [function(parentTable) {
      var foreignKeys, t1, t2, tableField;
      foreignKeys = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t1 = this.tableFields, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$x(parentTable); t1.moveNext$0();) {
        tableField = t1._current;
        if (J.$eq(tableField.get$foreignKey().get$foreignTableId(), t2.get$id(parentTable)) && J.$eq(J.get$value$x(tableField.get$foreignKey()), true))
          foreignKeys.push(tableField);
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(foreignKeys, foreignKeys.length, 0, null), [H.getTypeArgumentByIndex(foreignKeys, 0)]); t1.moveNext$0();) {
        tableField = t1._current;
        J.remove$1$ax(this.tableFields, tableField);
      }
      return foreignKeys;
    }, "call$1", "get$deleteForeignKey", 2, 0, 696, 176, "deleteForeignKey"],
    getFields$0: [function() {
      return this.tableFields;
    }, "call$0", "get$getFields", 0, 0, 497, "getFields"],
    validate$0: [function() {
      var errors = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      if (this.areThereFieldsWithDuplicatedNames$0() === true)
        errors.$indexSet(0, "name", "[existem atributos com nomes duplicados]");
      return errors;
    }, "call$0", "get$validate", 0, 0, 646, "validate"],
    Table$5: [function(diagramId, $name, x, y, tableFields) {
      this.name = $name;
      if (tableFields == null)
        this.tableFields = [];
      else
        this.tableFields = tableFields;
    }, null, null, 10, 0, 192, 175, 40, 31, 193, 194, ""],
    Table$fromJsonMap$1: [function(map) {
      var t1, i, t2, tableField;
      t1 = J.getInterceptor$asx(map);
      this.diagramId = t1.$index(map, "diagram_id");
      this.id = t1.$index(map, "id");
      this.x = t1.$index(map, "x");
      this.y = t1.$index(map, "y");
      this.name = t1.$index(map, "name");
      this.tableFields = [];
      i = 0;
      while (true) {
        t2 = J.get$length$asx(t1.$index(map, "table_fields"));
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (J.$eq(J.$index$asx(J.$index$asx(t1.$index(map, "table_fields"), i), "foreignkey"), false)) {
          tableField = S.TableField$fromJsonMap(J.$index$asx(t1.$index(map, "table_fields"), i));
          this.tableFields.push(tableField);
        }
        ++i;
      }
    }, null, null, 2, 0, 191, 181, "fromJsonMap"],
    static: {Table$: [function(diagramId, $name, x, y, tableFields) {
        var t1 = new S.Table(null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(diagramId, x, y);
        t1.Table$5(diagramId, $name, x, y, tableFields);
        return t1;
      }, null, null, 10, 0, 192, 175, 40, 31, 193, 194, "new Table"], Table$fromJsonMap: [function(map) {
        var t1 = new S.Table(null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.Table$fromJsonMap$1(map);
        return t1;
      }, null, null, 2, 0, 191, 181, "new Table$fromJsonMap"]}
  },
  "+Table": 0,
  TableController: {
    "^": "BaseCanvasModelController;ctx-,tableViews-,tableViewFactory-,relationshipController-,canvasActionsController-,commandController-,preferencesController-,specializationController-,_HTTPRequestController-,diagramController-,tableModalFactory-,tableModal-,borderInteractionController-,controllerFactory-",
    createTablesFromJsonMap$1: [function(map) {
      var t1, i, t2;
      t1 = J.getInterceptor$asx(map);
      i = 0;
      while (true) {
        t2 = t1.get$length(map);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        this._createTable$2(S.Table$fromJsonMap(t1.$index(map, i)), false);
        ++i;
      }
    }, "call$1", "get$createTablesFromJsonMap", 2, 0, 609, 181, "createTablesFromJsonMap"],
    setRequiredControllers$0: [function() {
      var t1 = this.controllerFactory;
      this.relationshipController = t1.relationshipController;
      this.borderInteractionController = t1.borderInteractionController;
      this.canvasActionsController = t1.canvasActionsController;
      this.commandController = t1.commandController;
      this.preferencesController = t1.preferencesController;
      this.specializationController = t1.specializationController;
      this.diagramController = t1.diagramController;
      this._HTTPRequestController = t1.hTTPRequestController;
    }, "call$0", "get$setRequiredControllers", 0, 0, 137, "setRequiredControllers"],
    validate$2: [function(table, tableModal) {
      var validateTableRequest, req, errors, t1;
      validateTableRequest = new S.ValidateTableRequest(null);
      validateTableRequest.table = table;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(validateTableRequest);
      errors = table.validate$0();
      if (!J.$eq(J.get$length$asx(errors), 0)) {
        tableModal.receiveErrorsFromTableValidation$2(table, errors);
        return;
      }
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableController_validate_closure(table, tableModal, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$2", "get$validate", 4, 0, 697, 267, 698, "validate"],
    createTableRequest$2: [function(table, userCreated) {
      var createTableHTTPRequest, req, t1;
      createTableHTTPRequest = new S.CreateTableRequest(null);
      createTableHTTPRequest.table = table;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(createTableHTTPRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableController_createTableRequest_closure(this, table, userCreated, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$2", "get$createTableRequest", 4, 0, 699, 267, 700, "createTableRequest"],
    _createTable$2: [function(table, userCreated) {
      var t1, tableField, t2, subTableField, tableView, canvasScroller, t3, t4, t5, t6, t7, t8;
      this.borderInteractionController.canvasModels.push(table);
      for (t1 = J.get$iterator$ax(table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (tableField.isForeignKey$0() === true)
          continue;
        this.borderInteractionController.canvasModels.push(tableField);
        for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
          subTableField = t2.get$current();
          this.borderInteractionController.canvasModels.push(subTableField);
        }
      }
      tableView = this.tableViewFactory.newTableView$3(table, this.borderInteractionController, this);
      if (userCreated) {
        t1 = this.canvasActionsController;
        t1.canvasInteractionStrategy = S.TableCreationStrategy$(this.ctx, this, t1, table);
      }
      t1 = this.ctx.canvas;
      canvasScroller = new S.CanvasScroller(null, null);
      canvasScroller.canvas = t1;
      canvasScroller.evt = null;
      t2 = J.get$x$x(tableView.get$table(tableView));
      t3 = J.get$y$x(tableView.get$table(tableView));
      t4 = J.get$width$x(tableView.get$table(tableView));
      t5 = J.get$height$x(tableView.get$table(tableView));
      t6 = t1.width;
      t7 = J.getInterceptor$ns(t2);
      t8 = t7.$add(t2, t4);
      if (typeof t6 !== "number")
        return t6.$lt();
      if (typeof t8 !== "number")
        return H.iae(t8);
      if (t6 < t8) {
        t6 = t1.width;
        t4 = t7.$add(t2, t4);
        if (typeof t6 !== "number")
          return t6.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1.width = t6 + t4;
      }
      t2 = t1.height;
      t4 = J.getInterceptor$ns(t3);
      t6 = t4.$add(t3, t5);
      if (typeof t2 !== "number")
        return t2.$lt();
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (t2 < t6) {
        t2 = t1.height;
        t5 = t4.$add(t3, t5);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t1.height = t2 + t5;
      }
      t1.toString;
      t1.getContext("2d").font = "10pt Helvetica";
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$2", "get$_createTable", 4, 0, 699, 267, 700, "_createTable"],
    updateTable$2: [function(table, oldTableName) {
      this.updateTableRequest$2(this.getTable$1(oldTableName), table);
    }, function(table) {
      return this.updateTable$2(table, null);
    }, "updateTable$1", "call$2", null, "get$updateTable", 2, 2, 701, 116, 267, 702, "updateTable"],
    forceUpdateDueToNewPosition$1: [function(baseCanvasModel) {
      var t1, table;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), table = null; t1.moveNext$0();) {
        table = this._getParentModel$2(baseCanvasModel, J.get$table$x(t1._current));
        if (table != null)
          break;
      }
      this.updateTableRequest$2(this.getTable$1(J.get$name$x(table)), table);
    }, "call$1", "get$forceUpdateDueToNewPosition", 2, 0, 515, 159, "forceUpdateDueToNewPosition"],
    updateTableRequest$2: [function(originalTable, table) {
      var updateTableRequest, req, t1;
      if (originalTable == null || table == null)
        return;
      updateTableRequest = new S.UpdateTableRequest(null, null);
      updateTableRequest.oldTable = originalTable;
      updateTableRequest.table = table;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(updateTableRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableController_updateTableRequest_closure(this, originalTable, table, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$2", "get$updateTableRequest", 4, 0, 703, 704, 267, "updateTableRequest"],
    deleteTable$1: [function(table) {
      var deleteTableRequest, req, t1;
      deleteTableRequest = new S.DeleteTableRequest(null);
      deleteTableRequest.table = table;
      req = this._HTTPRequestController.executeBaseCanvasModelRequest$1(deleteTableRequest);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(req, C.EventStreamProvider_readystatechange._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TableController_deleteTable_closure(this, table, req)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", "get$deleteTable", 2, 0, 626, 267, "deleteTable"],
    _recreateForeignKeys$1: [function(table) {
      var t1, weakTable, t2, tableField, t3, subTableField, specializedTable;
      for (t1 = this.relationshipController.getTablesWeakedByRelationshipFrom$1(table), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        weakTable = t1._current;
        for (t2 = J.get$iterator$ax(weakTable.deleteForeignKey$1(table)); t2.moveNext$0() === true;) {
          tableField = t2.get$current();
          this.borderInteractionController.deleteCanvasModel$1(tableField);
          for (t3 = J.get$iterator$ax(tableField.getFields$0()); t3.moveNext$0() === true;) {
            subTableField = t3.get$current();
            this.borderInteractionController.deleteCanvasModel$1(subTableField);
          }
        }
        this._copyPrimaryKeyToForeignKey$2(table, weakTable);
        this.updateTableRequest$2(this.getTable$1(J.get$name$x(weakTable)), weakTable);
      }
      if (this.diagramController.isLogical$0())
        for (t1 = this.relationshipController.getTablesNotWeakedByRelationshipFrom$1(table), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          weakTable = t1._current;
          for (t2 = J.get$iterator$ax(weakTable.deleteForeignKey$1(table)); t2.moveNext$0() === true;) {
            tableField = t2.get$current();
            this.borderInteractionController.deleteCanvasModel$1(tableField);
            for (t3 = J.get$iterator$ax(tableField.getFields$0()); t3.moveNext$0() === true;) {
              subTableField = t3.get$current();
              this.borderInteractionController.deleteCanvasModel$1(subTableField);
            }
          }
          this._copyNonPrimaryKeyToForeignKey$2(table, weakTable);
          this.updateTableRequest$2(this.getTable$1(J.get$name$x(weakTable)), weakTable);
        }
      for (t1 = this.specializationController.getSpecializedTables$1(table), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        specializedTable = t1._current;
        for (t2 = J.get$iterator$ax(specializedTable.deleteForeignKey$1(table)); t2.moveNext$0() === true;) {
          tableField = t2.get$current();
          this.borderInteractionController.deleteCanvasModel$1(tableField);
          for (t3 = J.get$iterator$ax(tableField.getFields$0()); t3.moveNext$0() === true;) {
            subTableField = t3.get$current();
            this.borderInteractionController.deleteCanvasModel$1(subTableField);
          }
        }
        this._copyPrimaryKeyToForeignKey$2(table, specializedTable);
        this.updateTableRequest$2(this.getTable$1(J.get$name$x(specializedTable)), specializedTable);
      }
    }, "call$1", "get$_recreateForeignKeys", 2, 0, 626, 267, "_recreateForeignKeys"],
    _copyPrimaryKeyToForeignKey$2: [function(parentTable, childTable) {
      var t1, clonedParentTable, parentPrimaryKeys, t2, tableField, t3, t4, subTableField, t5, i;
      parentTable.deletePrimaryKeyFieldsWithSameName$1(childTable);
      t1 = J.getInterceptor$x(parentTable);
      clonedParentTable = t1.clone$0(parentTable);
      parentPrimaryKeys = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t2 = J.get$iterator$ax(clonedParentTable.getFields$0()); t2.moveNext$0() === true;) {
        tableField = t2.get$current();
        if (tableField.get$primaryKey() === true) {
          t3 = t1.get$id(parentTable);
          t4 = new S.ForeignKey(null, null);
          t4.value = true;
          t4.foreignTableId = t3;
          tableField.set$foreignKey(t4);
          for (t3 = J.get$iterator$ax(tableField.getFields$0()); t3.moveNext$0() === true;) {
            subTableField = t3.get$current();
            t4 = t1.get$id(parentTable);
            t5 = new S.ForeignKey(null, null);
            t5.value = true;
            t5.foreignTableId = t4;
            subTableField.set$foreignKey(t5);
            J.set$id$x(subTableField, null);
          }
          J.set$id$x(tableField, null);
          parentPrimaryKeys.push(tableField);
        }
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(parentPrimaryKeys, parentPrimaryKeys.length, 0, null), [H.getTypeArgumentByIndex(parentPrimaryKeys, 0)]), i = 0; t1.moveNext$0();) {
        tableField = t1._current;
        J.insert$2$ax(childTable.getFields$0(), i, tableField);
        ++i;
      }
    }, "call$2", "get$_copyPrimaryKeyToForeignKey", 4, 0, 703, 176, 177, "_copyPrimaryKeyToForeignKey"],
    _copyNonPrimaryKeyToForeignKey$2: [function(parentTable, childTable) {
      var t1, clonedParentTable, parentPrimaryKeys, t2, tableField, t3, t4, subTableField, t5, i;
      parentTable.deleteNonPrimaryKeyFieldsWithSameName$1(childTable);
      t1 = J.getInterceptor$x(parentTable);
      clonedParentTable = t1.clone$0(parentTable);
      parentPrimaryKeys = H.setRuntimeTypeInfo([], [S.TableField]);
      for (t2 = J.get$iterator$ax(clonedParentTable.getFields$0()); t2.moveNext$0() === true;) {
        tableField = t2.get$current();
        if (tableField.get$primaryKey() === true) {
          t3 = t1.get$id(parentTable);
          t4 = new S.ForeignKey(null, null);
          t4.value = true;
          t4.foreignTableId = t3;
          tableField.set$foreignKey(t4);
          for (t3 = J.get$iterator$ax(tableField.getFields$0()); t3.moveNext$0() === true;) {
            subTableField = t3.get$current();
            t4 = t1.get$id(parentTable);
            t5 = new S.ForeignKey(null, null);
            t5.value = true;
            t5.foreignTableId = t4;
            subTableField.set$foreignKey(t5);
            J.set$id$x(subTableField, null);
          }
          J.set$id$x(tableField, null);
          parentPrimaryKeys.push(tableField);
        }
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(parentPrimaryKeys, parentPrimaryKeys.length, 0, null), [H.getTypeArgumentByIndex(parentPrimaryKeys, 0)]), i = 0; t1.moveNext$0();) {
        tableField = t1._current;
        tableField.set$primaryKey(false);
        J.insert$2$ax(childTable.getFields$0(), i, tableField);
        ++i;
      }
    }, "call$2", "get$_copyNonPrimaryKeyToForeignKey", 4, 0, 703, 176, 177, "_copyNonPrimaryKeyToForeignKey"],
    deleteAllForeignKeys$1: [function(table) {
      var t1, tv, t2, t3, tableField, t4, subTableField;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tv = t1._current;
        t2 = J.getInterceptor$x(tv);
        for (t3 = J.get$iterator$ax(t2.get$table(tv).deleteForeignKey$1(table)); t3.moveNext$0() === true;) {
          tableField = t3.get$current();
          this.borderInteractionController.deleteCanvasModel$1(tableField);
          for (t4 = J.get$iterator$ax(tableField.getFields$0()); t4.moveNext$0() === true;) {
            subTableField = t4.get$current();
            this.borderInteractionController.deleteCanvasModel$1(subTableField);
          }
        }
        t3 = t2.get$table(tv);
        this.updateTableRequest$2(this.getTable$1(J.get$name$x(t2.get$table(tv))), t3);
      }
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$1", "get$deleteAllForeignKeys", 2, 0, 626, 267, "deleteAllForeignKeys"],
    resetModelLocation$3: [function(baseCanvasModel, baseFieldsPosition, initialCanvasModelPosition) {
      var t1, baseField, t2, baseSubField, t3;
      t1 = J.getInterceptor$x(baseCanvasModel);
      t1.set$x(baseCanvasModel, initialCanvasModelPosition.x);
      t1.set$y(baseCanvasModel, initialCanvasModelPosition.y);
      for (t1 = J.get$iterator$ax(baseCanvasModel.getFields$0()); t1.moveNext$0() === true;) {
        baseField = t1.get$current();
        t2 = J.getInterceptor$x(baseField);
        t2.set$x(baseField, J.get$x$x(baseFieldsPosition.$index(0, baseField)));
        t2.set$y(baseField, J.get$y$x(baseFieldsPosition.$index(0, baseField)));
        for (t2 = J.get$iterator$ax(baseField.getFields$0()); t2.moveNext$0() === true;) {
          baseSubField = t2.get$current();
          t3 = J.getInterceptor$x(baseSubField);
          t3.set$x(baseSubField, J.get$x$x(baseFieldsPosition.$index(0, baseSubField)));
          t3.set$y(baseSubField, J.get$y$x(baseFieldsPosition.$index(0, baseSubField)));
        }
      }
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$3", "get$resetModelLocation", 6, 0, 634, 159, 635, 628, "resetModelLocation"],
    showModal$1: [function(_, table) {
      var t1 = this.tableModal;
      if (t1 != null)
        t1.cancelSubmitListener$0();
      this.tableModal = this.tableModalFactory.newTableModal$3(table, this, this.diagramController.isPhysical$0());
    }, "call$1", "get$showModal", 2, 0, 626, 267, "showModal"],
    drawAllTables$0: [function() {
      var t1, tv;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tv = t1._current;
        if (this.diagramController.isPhysical$0())
          tv.setPhysical$1(true);
        else
          tv.setPhysical$1(false);
        tv.draw$0();
      }
    }, "call$0", "get$drawAllTables", 0, 0, 137, "drawAllTables"],
    drawToggledOptimization$0: [function() {
      for (var t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.drawToggled$0();
    }, "call$0", "get$drawToggledOptimization", 0, 0, 137, "drawToggledOptimization"],
    drag$4: [function(baseCanvasModel, initialCanvasModelPosition, initialClientCord, newClientCord) {
      var t1, newX, newY, draggedTableView;
      t1 = J.getInterceptor$x(initialCanvasModelPosition);
      newX = J.$add$ns(t1.get$x(initialCanvasModelPosition), J.$sub$n(newClientCord.x, initialClientCord.x));
      newY = J.$add$ns(t1.get$y(initialCanvasModelPosition), J.$sub$n(newClientCord.y, initialClientCord.y));
      if (J.$lt$n(newX, 5) === true)
        newX = 5;
      if (J.$lt$n(newY, 5) === true)
        newY = 5;
      if (this.preferencesController.preferences.grid === true) {
        newX = J.$mul$ns(J.round$0$n(J.$div$n(newX, 15)), 15);
        newY = J.$mul$ns(J.round$0$n(J.$div$n(newY, 15)), 15);
      }
      baseCanvasModel.updateLocation$1(H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.abs$0$n(newX), 0.5), J.$add$ns(J.abs$0$n(newY), 0.5)), [null]));
      draggedTableView = this._getTableView$1(baseCanvasModel);
      if (draggedTableView != null)
        draggedTableView.updateFillingColorGradient$0();
      this.borderInteractionController.calculateConnectionsLocation$0();
    }, "call$4", "get$drag", 8, 0, 627, 159, 628, 629, 630, "drag"],
    highlightTable$2: [function(table, $status) {
      var tableView = this._getTableView$1(table);
      if ($status)
        tableView.set$highlighted(true);
      else
        tableView.set$highlighted(false);
    }, "call$2", "get$highlightTable", 2, 2, 705, 116, 267, 642, "highlightTable"],
    toggle$1: [function(baseCanvasModel) {
      var tableView, t1, tv, t2, tf, t3;
      tableView = this._getTableView$1(baseCanvasModel);
      if (tableView != null) {
        tableView.set$toggled(true);
        return;
      }
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tv = t1._current;
        for (t2 = J.get$iterator$ax(J.get$table$x(tv).get$tableFields()); t2.moveNext$0() === true;) {
          tf = t2.get$current();
          if (J.$eq(tf, baseCanvasModel)) {
            tv.set$toggledTableField(baseCanvasModel);
            return;
          }
          t3 = J.get$iterator$ax(tf.get$baseSubFields());
          if (t3.moveNext$0() === true) {
            t3.get$current();
            tv.set$toggledTableField(baseCanvasModel);
            return;
          }
        }
      }
    }, "call$1", "get$toggle", 2, 0, 515, 159, "toggle"],
    untoggleTables$0: [function() {
      var t1, tableView;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tableView = t1._current;
        tableView.set$toggled(false);
        tableView.set$toggledTableField(null);
      }
    }, "call$0", "get$untoggleTables", 0, 0, 137, "untoggleTables"],
    _getTableView$1: [function(table) {
      var t1, tableView;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tableView = t1._current;
        if (J.$eq(J.get$table$x(tableView), table))
          return tableView;
      }
    }, "call$1", "get$_getTableView", 2, 0, 706, 267, "_getTableView"],
    getTable$1: [function(tableName) {
      var t1, tableView, t2;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        tableView = t1._current;
        t2 = J.getInterceptor$x(tableView);
        if (J.$eq(J.get$name$x(t2.get$table(tableView)), tableName))
          return t2.get$table(tableView);
      }
    }, "call$1", "get$getTable", 2, 0, 707, 708, "getTable"],
    getClickedTable$1: [function(canvasMousePosition) {
      var t1, t2, t3, t4, t5, tableView, t6;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = canvasMousePosition.x, t3 = J.getInterceptor$n(t2), t4 = canvasMousePosition.y, t5 = J.getInterceptor$n(t4); t1.moveNext$0();) {
        tableView = t1._current;
        t6 = J.getInterceptor$x(tableView);
        if (t3.$gt(t2, J.get$x$x(t6.get$table(tableView))) === true && t3.$lt(t2, J.$add$ns(J.get$x$x(t6.get$table(tableView)), J.get$width$x(t6.get$table(tableView)))) === true && t5.$gt(t4, J.get$y$x(t6.get$table(tableView))) === true && t5.$lt(t4, J.$add$ns(J.get$y$x(t6.get$table(tableView)), J.get$height$x(t6.get$table(tableView)))) === true)
          return t6.get$table(tableView);
      }
      return;
    }, "call$1", "get$getClickedTable", 2, 0, 709, 551, "getClickedTable"],
    getClickedTableField$1: [function(canvasMousePosition) {
      var t1, t2, t3, t4, t5, t6, tableField, t7, subTableField, t8;
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = canvasMousePosition.x, t3 = J.getInterceptor$n(t2), t4 = canvasMousePosition.y, t5 = J.getInterceptor$n(t4); t1.moveNext$0();)
        for (t6 = J.get$iterator$ax(J.get$table$x(t1._current).get$tableFields()); t6.moveNext$0() === true;) {
          tableField = t6.get$current();
          t7 = J.getInterceptor$x(tableField);
          if (t3.$gt(t2, t7.get$x(tableField)) === true && t3.$lt(t2, J.$add$ns(t7.get$x(tableField), t7.get$width(tableField))) === true && t5.$gt(t4, t7.get$y(tableField)) === true && t5.$lt(t4, J.$add$ns(t7.get$y(tableField), t7.get$height(tableField))) === true)
            return tableField;
          for (t7 = J.get$iterator$ax(tableField.get$baseSubFields()); t7.moveNext$0() === true;) {
            subTableField = t7.get$current();
            t8 = J.getInterceptor$x(subTableField);
            if (t3.$gt(t2, t8.get$x(subTableField)) === true && t3.$lt(t2, J.$add$ns(t8.get$x(subTableField), t8.get$width(subTableField))) === true && t5.$gt(t4, t8.get$y(subTableField)) === true && t5.$lt(t4, J.$add$ns(t8.get$y(subTableField), t8.get$height(subTableField))) === true)
              return subTableField;
          }
        }
      return;
    }, "call$1", "get$getClickedTableField", 2, 0, 710, 551, "getClickedTableField"],
    TableController$3: [function(ctx, tableViewFactory, tableModalFactory) {
      this.ctx = ctx;
      this.tableViewFactory = tableViewFactory;
      this.tableModalFactory = tableModalFactory;
      this.tableViews = tableViewFactory.tableViews;
    }, null, null, 6, 0, 711, 155, 712, 713, ""]
  },
  "+TableController": 0,
  TableController_validate_closure: {
    "^": "Closure:567;table_0-,tableModal_1-,req_2-",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.req_2;
      if (t1.readyState === 4) {
        t2 = t1.status;
        if (t2 === 200 || t2 === 0 || t2 === 204)
          this.tableModal_1.receiveErrorsFromTableValidation$2(this.table_0, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        else if (t2 === 422)
          this.tableModal_1.receiveErrorsFromTableValidation$2(this.table_0, C.JsonCodec_null_null.decode$1(t1.responseText));
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ TableController_validate_closure": 0,
  TableController_createTableRequest_closure: {
    "^": "Closure:567;this_0-,table_1-,userCreated_2-,req_3-",
    call$1: [function(e) {
      var t1, tableMapped, t2;
      t1 = this.req_3;
      if (t1.readyState === 4)
        if (t1.status === 201) {
          tableMapped = C.JsonCodec_null_null.decode$1(t1.responseText);
          t1 = this.table_1;
          J.set$id$x(t1, J.$index$asx(tableMapped, "id"));
          t2 = this.this_0;
          t2._mapFieldsIds$4(t1, tableMapped, "table_fields", "table_sub_fields");
          t2._createTable$2(t1, this.userCreated_2);
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ TableController_createTableRequest_closure": 0,
  TableController_updateTableRequest_closure: {
    "^": "Closure:567;this_0-,originalTable_1-,table_2-,req_3-",
    call$1: [function(e) {
      var t1, t2, tableMapped, t3, t4, tableView;
      t1 = this.req_3;
      if (t1.readyState === 4) {
        t2 = t1.status;
        if (t2 === 200 || t2 === 0 || t2 === 204) {
          tableMapped = C.JsonCodec_null_null.decode$1(t1.responseText);
          t2 = this.table_2;
          J.set$id$x(t2, J.$index$asx(tableMapped, "id"));
          t3 = this.this_0;
          t3._mapFieldsIds$4(t2, tableMapped, "table_fields", "table_sub_fields");
          t4 = this.originalTable_1;
          t3.updateCanvasModel$2(t4, t2);
          tableView = t3._getTableView$1(t4);
          tableView.updateTable$1(t2);
          tableView.calcSizeProperties$0();
          t3.borderInteractionController.calculateConnectionsLocation$0();
          t3.relationshipController.updateRelationshipsWithTable$1(t2);
          t3._recreateForeignKeys$1(t2);
          t1.abort();
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ TableController_updateTableRequest_closure": 0,
  TableController_deleteTable_closure: {
    "^": "Closure:567;this_0-,table_1-,req_2-",
    call$1: [function(e) {
      var t1, t2, t3, tableView, tableField, t4, subTableField;
      t1 = this.req_2;
      if (t1.readyState === 4) {
        t2 = t1.status;
        if (t2 === 200 || t2 === 0 || t2 === 204) {
          t2 = this.this_0;
          t3 = this.table_1;
          tableView = t2._getTableView$1(t3);
          C.JSArray_methods.remove$1(t2.tableViews, tableView);
          t2.relationshipController.deleteRelationshipsFromTable$1(t3);
          t2.specializationController.deleteSpecializationFromTable$1(t3);
          t2.borderInteractionController.deleteCanvasModel$1(t3);
          t2.borderInteractionController.calculateConnectionsLocation$0();
          for (t3 = J.get$iterator$ax(t3.getFields$0()); t3.moveNext$0() === true;) {
            tableField = t3.get$current();
            t2.borderInteractionController.deleteCanvasModel$1(tableField);
            for (t4 = J.get$iterator$ax(tableField.getFields$0()); t4.moveNext$0() === true;) {
              subTableField = t4.get$current();
              t2.borderInteractionController.deleteCanvasModel$1(subTableField);
            }
          }
          t1.abort();
        } else
          window.alert("Erro! Envie um e-mail para ecopat@gmail.com");
      }
    }, "call$1", null, 2, 0, 567, 22, "call"],
    $isFunction: true
  },
  "+ TableController_deleteTable_closure": 0,
  TableField: {
    "^": "BaseField;name-,dataType-,primaryKey-,foreignKey-,nulls-,composite-,multivalued-,derived-,baseSubFields-,diagramId-,x-,y-,width-,height-,centralBorderPoints-,borderUtilization-,borderConnectionPoints-,id-",
    isForeignKey$0: [function() {
      if (J.$eq(J.get$value$x(this.foreignKey), true))
        return true;
      else
        return false;
    }, "call$0", "get$isForeignKey", 0, 0, 346, "isForeignKey"],
    toJson$0: [function() {
    }, "call$0", "get$toJson", 0, 0, 20, "toJson"],
    toMap$2: [function(destroy, oldBaseField) {
      var fieldMap, mappedSubFields, t1, oldTableSubField;
      fieldMap = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      if (destroy === true)
        fieldMap.$indexSet(0, "_destroy", 1);
      fieldMap.$indexSet(0, "name", this.name);
      fieldMap.$indexSet(0, "id", this.id);
      fieldMap.$indexSet(0, "x", this.x);
      fieldMap.$indexSet(0, "y", this.y);
      fieldMap.$indexSet(0, "primary_key", this.primaryKey);
      fieldMap.$indexSet(0, "foreignkey", J.get$value$x(this.foreignKey));
      fieldMap.$indexSet(0, "nulls", this.nulls);
      fieldMap.$indexSet(0, "composite", this.composite);
      fieldMap.$indexSet(0, "multivalued", this.multivalued);
      fieldMap.$indexSet(0, "derived", this.derived);
      fieldMap.$indexSet(0, "data_type", this.dataType);
      if (!J.$eq(J.get$length$asx(this.baseSubFields), 0)) {
        mappedSubFields = H.setRuntimeTypeInfo([], [P.Map]);
        for (t1 = J.get$iterator$ax(this.baseSubFields); t1.moveNext$0() === true;)
          mappedSubFields.push(t1.get$current().toMap$0());
        if (oldBaseField != null)
          for (t1 = J.get$iterator$ax(oldBaseField.getFields$0()); t1.moveNext$0() === true;) {
            oldTableSubField = t1.get$current();
            if (!this.hasField$1(J.get$name$x(oldTableSubField)))
              mappedSubFields.push(oldTableSubField.toMap$1(true));
          }
        fieldMap.$indexSet(0, "table_sub_fields_attributes", mappedSubFields);
      }
      return fieldMap;
    }, function() {
      return this.toMap$2(null, null);
    }, "toMap$0", function(destroy) {
      return this.toMap$2(destroy, null);
    }, "toMap$1", "call$2", null, null, "get$toMap", 0, 4, 498, 116, 116, 499, 500, "toMap"],
    getFields$0: [function() {
      return this.baseSubFields;
    }, "call$0", "get$getFields", 0, 0, 497, "getFields"],
    TableField$fromJsonMap$1: [function(map) {
      var t1, t2, i, tableField;
      t1 = J.getInterceptor$asx(map);
      this.diagramId = t1.$index(map, "diagram_id");
      this.id = t1.$index(map, "id");
      this.x = t1.$index(map, "x");
      this.y = t1.$index(map, "y");
      this.name = t1.$index(map, "name");
      this.width = 1;
      this.height = 1;
      this.primaryKey = t1.$index(map, "primary_key");
      t2 = new S.ForeignKey(null, null);
      t2.value = false;
      t2.foreignTableId = -1;
      this.foreignKey = t2;
      this.nulls = t1.$index(map, "nulls");
      this.composite = t1.$index(map, "composite");
      this.multivalued = t1.$index(map, "multivalued");
      this.derived = t1.$index(map, "derived");
      this.dataType = t1.$index(map, "data_type");
      this.baseSubFields = [];
      if (t1.$index(map, "table_sub_fields") != null) {
        i = 0;
        while (true) {
          t2 = J.get$length$asx(t1.$index(map, "table_sub_fields"));
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          tableField = S.TableField$fromJsonMap(J.$index$asx(t1.$index(map, "table_sub_fields"), i));
          J.add$1$ax(this.baseSubFields, tableField);
          ++i;
        }
      }
    }, null, null, 2, 0, 191, 181, "fromJsonMap"],
    TableField$10: [function(id, $name, primaryKey, foreignKey, dataType, nulls, composite, multivalued, derived, baseSubFields) {
      this.id = id;
      this.name = $name;
      this.primaryKey = primaryKey;
      this.foreignKey = foreignKey;
      this.nulls = nulls;
      this.composite = composite;
      this.multivalued = multivalued;
      this.derived = derived;
      this.dataType = dataType;
      if (baseSubFields == null)
        this.baseSubFields = [];
      else
        this.baseSubFields = baseSubFields;
    }, null, null, 20, 0, 195, 171, 40, 184, 185, 178, 186, 187, 188, 189, 190, ""],
    $isTableField: true,
    static: {TableField$: [function(id, $name, primaryKey, foreignKey, dataType, nulls, composite, multivalued, derived, baseSubFields) {
        var t1 = new S.TableField(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.TableField$10(id, $name, primaryKey, foreignKey, dataType, nulls, composite, multivalued, derived, baseSubFields);
        return t1;
      }, null, null, 20, 0, 195, 171, 40, 184, 185, 178, 186, 187, 188, 189, 190, "new TableField"], TableField$fromJsonMap: [function(map) {
        var t1 = new S.TableField(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.BaseCanvasModel$3(0, 0, 0);
        t1.TableField$fromJsonMap$1(map);
        return t1;
      }, null, null, 2, 0, 191, 181, "new TableField$fromJsonMap"]}
  },
  "+TableField": 0,
  ConceptualTableView: {
    "^": "TableView;table:coloph$ConceptualTableView$table*-,baseFieldGluers-,canvasEllipseDrawer-,borderInteractionController-,physical-,table-,highlighted-,_largestNameSize-,_borderSize-,tableNameGradient-,toggledTableField-,tableController-,TOGGLE_SQUARE_SIZE-,TABLE_HEADER_LINE-,SPACE_BETWEEN_FIELDS-,TABLE_HEADER_CONSIDERATION-,TABLE_HEADER_SIZE-,SPACE_AFTER_SEPARATION_LINE-,ctx-,toggled-",
    glueTableFields$0: [function() {
      var baseFieldGluer, t1, tableField, t2, t3, subBaseFieldGluer, subTableField, t4;
      this.baseFieldGluers = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      baseFieldGluer = S.BaseFieldGluer$(this.coloph$ConceptualTableView$table, this.ctx, this.borderInteractionController);
      for (t1 = J.get$iterator$ax(this.coloph$ConceptualTableView$table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (tableField.isForeignKey$0() === true)
          continue;
        t2 = J.getInterceptor$x(tableField);
        if (J.$eq(t2.get$x(tableField), 0) && J.$eq(t2.get$y(tableField), 0))
          baseFieldGluer.glue$1(tableField);
        else {
          t3 = J.measureText$1$x(baseFieldGluer.ctx, t2.get$name(tableField)).width;
          if (typeof t3 !== "number")
            return t3.$add();
          t2.set$width(tableField, t3 + 20);
          t2.set$height(tableField, 30);
          baseFieldGluer.createBorderConnection$1(tableField);
        }
        this.baseFieldGluers.$indexSet(0, this.coloph$ConceptualTableView$table, baseFieldGluer);
        if (!J.$eq(J.get$length$asx(tableField.get$baseSubFields()), 0)) {
          t2 = this.ctx;
          t3 = this.borderInteractionController;
          subBaseFieldGluer = new S.BaseFieldGluer(null, null, null, null, null, null);
          subBaseFieldGluer.glueObject = tableField;
          subBaseFieldGluer.ctx = t2;
          subBaseFieldGluer.borderInteractionController = t3;
          subBaseFieldGluer.tableFieldGlues = [];
          subBaseFieldGluer.fieldsIndex = 0;
          subBaseFieldGluer.outerBorderScale = 3;
          for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
            subTableField = t2.get$current();
            t3 = J.getInterceptor$x(subTableField);
            if (J.$eq(t3.get$x(subTableField), 0) && J.$eq(t3.get$y(subTableField), 0))
              subBaseFieldGluer.glue$1(subTableField);
            else {
              t4 = J.measureText$1$x(subBaseFieldGluer.ctx, t3.get$name(subTableField)).width;
              if (typeof t4 !== "number")
                return t4.$add();
              t3.set$width(subTableField, t4 + 20);
              t3.set$height(subTableField, 30);
              subBaseFieldGluer.createBorderConnection$1(subTableField);
            }
            this.baseFieldGluers.$indexSet(0, tableField, subBaseFieldGluer);
          }
        }
      }
    }, "call$0", "get$glueTableFields", 0, 0, 137, "glueTableFields"],
    updateTable$1: [function(updatedTable) {
      var baseFieldGluer, t1, tableField, t2, t3, subBaseFieldGluer, subTableField;
      this.coloph$ConceptualTableView$table = updatedTable;
      this.baseFieldGluers.clear$0(0);
      baseFieldGluer = S.BaseFieldGluer$(updatedTable, this.ctx, this.borderInteractionController);
      for (t1 = J.get$iterator$ax(this.coloph$ConceptualTableView$table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (tableField.isForeignKey$0() === true)
          continue;
        if (tableField.hasAPosition$0() === true)
          baseFieldGluer.createBorderConnection$1(tableField);
        else
          baseFieldGluer.glue$1(tableField);
        this.baseFieldGluers.$indexSet(0, this.coloph$ConceptualTableView$table, baseFieldGluer);
        if (!J.$eq(J.get$length$asx(tableField.get$baseSubFields()), 0)) {
          t2 = this.ctx;
          t3 = this.borderInteractionController;
          subBaseFieldGluer = new S.BaseFieldGluer(null, null, null, null, null, null);
          subBaseFieldGluer.glueObject = tableField;
          subBaseFieldGluer.ctx = t2;
          subBaseFieldGluer.borderInteractionController = t3;
          subBaseFieldGluer.tableFieldGlues = [];
          subBaseFieldGluer.fieldsIndex = 0;
          subBaseFieldGluer.outerBorderScale = 3;
          for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;) {
            subTableField = t2.get$current();
            if (subTableField.hasAPosition$0() === true)
              subBaseFieldGluer.createBorderConnection$1(subTableField);
            else
              subBaseFieldGluer.glue$1(subTableField);
            this.baseFieldGluers.$indexSet(0, tableField, subBaseFieldGluer);
          }
        }
      }
    }, "call$1", "get$updateTable", 2, 0, 626, 714, "updateTable"],
    calcSizeProperties$0: [function() {
      this._largestNameSize = J.measureText$1$x(this.ctx, J.get$name$x(this.coloph$ConceptualTableView$table)).width;
      J.set$width$x(this.coloph$ConceptualTableView$table, this._calcTableWidthSize$0());
      J.set$height$x(this.coloph$ConceptualTableView$table, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this.TABLE_HEADER_SIZE * 2.5 / 15)) * 15);
      this._borderSize = J.$div$n(J.$sub$n(J.get$width$x(this.coloph$ConceptualTableView$table), this._largestNameSize), 2);
    }, "call$0", "get$calcSizeProperties", 0, 0, 16, "calcSizeProperties"],
    _calcTableWidthSize$0: [function() {
      var largerSize = this._largestNameSize;
      if (typeof largerSize !== "number")
        return largerSize.$add();
      return C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0((largerSize + 30) / 15)) * 15;
    }, "call$0", "get$_calcTableWidthSize", 0, 0, 16, "_calcTableWidthSize"],
    draw$0: [function() {
      var t1, baseFieldGluersList, t2, tableFieldGlue, tableField, widthTableName, textXLocation, textYLocation;
      J.set$lineWidth$x(this.ctx, 1);
      J.set$strokeStyle$x(this.ctx, "black");
      J.set$lineWidth$x(this.ctx, 1.618033988);
      t1 = this.baseFieldGluers;
      baseFieldGluersList = t1.get$values(t1);
      for (t1 = baseFieldGluersList._iterable, t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t1.get$iterator(t1), baseFieldGluersList._f), [H.getTypeArgumentByIndex(baseFieldGluersList, 0), H.getTypeArgumentByIndex(baseFieldGluersList, 1)]); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(t1._current.get$tableFieldGlues()); t2.moveNext$0() === true;) {
          tableFieldGlue = t2.get$current();
          if (tableFieldGlue.arePointsNull$0() !== true) {
            J.beginPath$0$x(this.ctx);
            J.moveTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(tableFieldGlue.get$tablePoint().get$point())), J.toInt$0$n(J.get$y$x(tableFieldGlue.get$tablePoint().get$point())));
            J.lineTo$2$x(this.ctx, J.toInt$0$n(J.get$x$x(tableFieldGlue.get$tableFieldPoint().get$point())), J.toInt$0$n(J.get$y$x(tableFieldGlue.get$tableFieldPoint().get$point())));
            J.closePath$0$x(this.ctx);
            J.stroke$0$x(this.ctx);
          }
        }
      for (t1 = J.get$iterator$ax(this.coloph$ConceptualTableView$table.get$tableFields()); t1.moveNext$0() === true;) {
        tableField = t1.get$current();
        if (tableField.isForeignKey$0() === true)
          continue;
        this._drawTableField$1(tableField);
        for (t2 = J.get$iterator$ax(tableField.get$baseSubFields()); t2.moveNext$0() === true;)
          this._drawTableField$1(t2.get$current());
      }
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      this._drawTableShadow$0();
      t1 = this.highlighted;
      t2 = this.ctx;
      if (t1)
        J.set$strokeStyle$x(t2, "grey");
      else
        J.set$strokeStyle$x(t2, "black");
      J.set$lineWidth$x(this.ctx, 1.618033988);
      J.set$fillStyle$x(this.ctx, "black");
      J.beginPath$0$x(this.ctx);
      J.rect$4$x(this.ctx, J.get$x$x(this.coloph$ConceptualTableView$table), J.get$y$x(this.coloph$ConceptualTableView$table), J.get$width$x(this.coloph$ConceptualTableView$table), J.get$height$x(this.coloph$ConceptualTableView$table));
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      if (this.coloph$ConceptualTableView$table.isWeakEntity$0() === true) {
        J.set$lineWidth$x(this.ctx, 0.5);
        J.rect$4$x(this.ctx, J.$add$ns(J.get$x$x(this.coloph$ConceptualTableView$table), 3.5), J.$add$ns(J.get$y$x(this.coloph$ConceptualTableView$table), 3.5), J.$sub$n(J.get$width$x(this.coloph$ConceptualTableView$table), 7), J.$sub$n(J.get$height$x(this.coloph$ConceptualTableView$table), 7));
        J.set$lineWidth$x(this.ctx, 1.618033988);
      }
      this.updateFillingColorGradient$0();
      J.set$fillStyle$x(this.ctx, this.tableNameGradient);
      J.fillRect$4$x(this.ctx, J.get$x$x(this.coloph$ConceptualTableView$table), J.get$y$x(this.coloph$ConceptualTableView$table), J.get$width$x(this.coloph$ConceptualTableView$table), J.get$height$x(this.coloph$ConceptualTableView$table));
      J.strokeRect$4$x(this.ctx, J.get$x$x(this.coloph$ConceptualTableView$table), J.get$y$x(this.coloph$ConceptualTableView$table), J.get$width$x(this.coloph$ConceptualTableView$table), J.get$height$x(this.coloph$ConceptualTableView$table));
      J.set$fillStyle$x(this.ctx, "black");
      widthTableName = J.measureText$1$x(this.ctx, J.get$name$x(this.coloph$ConceptualTableView$table)).width;
      t1 = J.get$x$x(this.coloph$ConceptualTableView$table);
      t2 = J.$div$n(J.get$width$x(this.coloph$ConceptualTableView$table), 2);
      if (typeof widthTableName !== "number")
        return widthTableName.$div();
      textXLocation = J.$add$ns(t1, J.$sub$n(t2, widthTableName / 2));
      textYLocation = J.$add$ns(J.$add$ns(J.get$y$x(this.coloph$ConceptualTableView$table), J.$div$n(J.get$height$x(this.coloph$ConceptualTableView$table), 2)), 5);
      J.fillText$3$x(this.ctx, J.get$name$x(this.coloph$ConceptualTableView$table), textXLocation, textYLocation);
      J.stroke$0$x(this.ctx);
      this.drawToggled$0();
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    drawToggled$0: [function() {
      if (this.toggled === true)
        this._toggle$0();
      if (this.toggledTableField != null)
        this._toggleTableField$0();
    }, "call$0", "get$drawToggled", 0, 0, 137, "drawToggled"],
    _toggleTableField$0: [function() {
      var togglingPoints, t1, p, t2;
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.toggledTableField), J.$div$n(J.get$width$x(this.toggledTableField), 2)), 2), J.$sub$n(J.get$y$x(this.toggledTableField), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(this.toggledTableField), 2), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledTableField), 2), J.$div$n(J.get$height$x(this.toggledTableField), 2))), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$add$ns(J.$sub$n(J.get$x$x(this.toggledTableField), 2), J.get$width$x(this.toggledTableField)), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledTableField), 2), J.$div$n(J.get$height$x(this.toggledTableField), 2))), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.toggledTableField), J.$div$n(J.get$width$x(this.toggledTableField), 2)), 2), J.$add$ns(J.$sub$n(J.get$y$x(this.toggledTableField), 2), J.get$height$x(this.toggledTableField))), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggleTableField", 0, 0, 16, "_toggleTableField"],
    _drawTableField$1: [function(tableField) {
      var t1, dashedBorder, a, b, c, d;
      t1 = J.getInterceptor$x(tableField);
      this.canvasEllipseDrawer.draw$7(J.$add$ns(t1.get$x(tableField), 3), J.$add$ns(t1.get$y(tableField), 3), t1.get$width(tableField), t1.get$height(tableField), "#696969", "#696969", false);
      dashedBorder = tableField.get$derived() === true && true;
      this.canvasEllipseDrawer.draw$7(t1.get$x(tableField), t1.get$y(tableField), t1.get$width(tableField), t1.get$height(tableField), "white", "black", dashedBorder);
      if (tableField.get$multivalued() === true)
        this.canvasEllipseDrawer.draw$7(J.$add$ns(t1.get$x(tableField), 3), J.$add$ns(t1.get$y(tableField), 3), J.$sub$n(t1.get$width(tableField), 6), J.$sub$n(t1.get$height(tableField), 6), "white", "black", dashedBorder);
      J.fillText$3$x(this.ctx, t1.get$name(tableField), J.$add$ns(t1.get$x(tableField), 10), J.$add$ns(t1.get$y(tableField), 20));
      J.stroke$0$x(this.ctx);
      if (J.$eq(tableField.get$primaryKey(), true)) {
        J.set$strokeStyle$x(this.ctx, "black");
        J.set$lineWidth$x(this.ctx, 1);
        J.beginPath$0$x(this.ctx);
        a = J.$add$ns(t1.get$x(tableField), 10);
        b = J.$add$ns(J.$add$ns(t1.get$y(tableField), 20), 2);
        a = J.toInt$0$n(a);
        b = J.toInt$0$n(b);
        c = J.$add$ns(J.$sub$n(J.$add$ns(t1.get$x(tableField), t1.get$width(tableField)), 10), 2);
        d = J.$add$ns(J.$add$ns(t1.get$y(tableField), 20), 2);
        c = J.toInt$0$n(c);
        d = J.toInt$0$n(d);
        J.moveTo$2$x(this.ctx, a, b);
        J.lineTo$2$x(this.ctx, c, d);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
      }
    }, "call$1", "get$_drawTableField", 2, 0, 679, 677, "_drawTableField"],
    updateFillingColorGradient$0: [function() {
      this.tableNameGradient = null;
      var t1 = J.createLinearGradient$4$x(this.ctx, J.get$x$x(this.coloph$ConceptualTableView$table), J.get$y$x(this.coloph$ConceptualTableView$table), J.$add$ns(J.get$x$x(this.coloph$ConceptualTableView$table), J.get$width$x(this.coloph$ConceptualTableView$table)), J.$add$ns(J.get$y$x(this.coloph$ConceptualTableView$table), J.get$height$x(this.coloph$ConceptualTableView$table)));
      this.tableNameGradient = t1;
      t1.addColorStop(0, "#BCE8F1");
      this.tableNameGradient.addColorStop(1, "#80CFFF");
    }, "call$0", "get$updateFillingColorGradient", 0, 0, 137, "updateFillingColorGradient"]
  },
  "+ConceptualTableView": 0,
  LogicalTableView: {
    "^": "TableView;onlyPrimaryKeys-,noPrimaryKeys-,_tableFieldShifter-,blankPrimaryKeyTableField-,blankNormalTableField-,borderInteractionController-,physical-,table-,highlighted-,_largestNameSize-,_borderSize-,tableNameGradient-,toggledTableField-,tableController-,TOGGLE_SQUARE_SIZE-,TABLE_HEADER_LINE-,SPACE_BETWEEN_FIELDS-,TABLE_HEADER_CONSIDERATION-,TABLE_HEADER_SIZE-,SPACE_AFTER_SEPARATION_LINE-,ctx-,toggled-",
    draw$0: [function() {
      var t1, t2, sizeTableName, t3, textXLocation, tf;
      this._tableFieldShifter = this.TABLE_HEADER_LINE;
      this._drawTableShadow$0();
      t1 = this.highlighted;
      t2 = this.ctx;
      if (t1)
        J.set$strokeStyle$x(t2, "grey");
      else
        J.set$strokeStyle$x(t2, "black");
      J.set$lineWidth$x(this.ctx, 1.618033988);
      J.set$fillStyle$x(this.ctx, "black");
      J.beginPath$0$x(this.ctx);
      J.rect$4$x(this.ctx, J.get$x$x(this.table), J.get$y$x(this.table), J.get$width$x(this.table), J.get$height$x(this.table));
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      J.set$fillStyle$x(this.ctx, "white");
      J.fillRect$4$x(this.ctx, J.get$x$x(this.table), J.get$y$x(this.table), J.get$width$x(this.table), J.get$height$x(this.table));
      J.stroke$0$x(this.ctx);
      J.beginPath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 0);
      t1 = this.TABLE_HEADER_SIZE;
      J.rect$4$x(this.ctx, J.get$x$x(this.table), J.get$y$x(this.table), J.get$width$x(this.table), t1);
      J.set$fillStyle$x(this.ctx, this.tableNameGradient);
      J.fill$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
      J.set$lineWidth$x(this.ctx, 1.618033988);
      J.stroke$0$x(this.ctx);
      J.set$fillStyle$x(this.ctx, "black");
      sizeTableName = J.measureText$1$x(this.ctx, J.get$name$x(this.table)).width;
      t2 = J.get$x$x(this.table);
      t3 = J.$div$n(J.get$width$x(this.table), 2);
      if (typeof sizeTableName !== "number")
        return sizeTableName.$div();
      textXLocation = J.$add$ns(t2, J.$sub$n(t3, sizeTableName / 2));
      J.fillText$3$x(this.ctx, J.get$name$x(this.table), textXLocation, J.$add$ns(J.get$y$x(this.table), 14));
      J.stroke$0$x(this.ctx);
      if (this.noPrimaryKeys === true)
        this._drawTableField$1(this.blankPrimaryKeyTableField);
      else {
        this._drawTablePrimaryKeys$0();
        this._drawForeignKeys$0();
      }
      J.beginPath$0$x(this.ctx);
      J.moveTo$2$x(this.ctx, J.get$x$x(this.table), J.$add$ns(J.$add$ns(J.$add$ns(J.get$y$x(this.table), t1), this._tableFieldShifter), 2));
      J.lineTo$2$x(this.ctx, J.$add$ns(J.get$x$x(this.table), J.get$width$x(this.table)), J.$add$ns(J.$add$ns(J.$add$ns(J.get$y$x(this.table), t1), this._tableFieldShifter), 2));
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
      t1 = this._tableFieldShifter;
      if (typeof t1 !== "number")
        return t1.$add();
      this._tableFieldShifter = t1 + this.SPACE_AFTER_SEPARATION_LINE;
      if (this.onlyPrimaryKeys === true)
        this._drawTableField$1(this.blankNormalTableField);
      else
        for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
          tf = t1.get$current();
          if (J.$eq(tf.get$primaryKey(), false))
            this._drawTableField$1(tf);
        }
      if (this.toggled === true)
        this._toggle$0();
    }, "call$0", "get$draw", 0, 0, 137, "draw"],
    _drawForeignKeys$0: [function() {
      var t1, tf;
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
        tf = t1.get$current();
        if (J.$eq(tf.get$primaryKey(), true) && J.$eq(J.get$value$x(tf.get$foreignKey()), true))
          this._drawTableField$1(tf);
      }
    }, "call$0", "get$_drawForeignKeys", 0, 0, 137, "_drawForeignKeys"],
    _drawTablePrimaryKeys$0: [function() {
      var t1, tf;
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
        tf = t1.get$current();
        if (J.$eq(tf.get$primaryKey(), true) && J.$eq(J.get$value$x(tf.get$foreignKey()), false))
          this._drawTableField$1(tf);
      }
    }, "call$0", "get$_drawTablePrimaryKeys", 0, 0, 137, "_drawTablePrimaryKeys"],
    _drawTableField$1: [function(tf) {
      var t1, $name;
      J.beginPath$0$x(this.ctx);
      t1 = J.getInterceptor$x(tf);
      if (!J.$eq(t1.get$name(tf), "")) {
        $name = J.$eq(J.get$value$x(tf.get$foreignKey()), true) ? H.S(t1.get$name(tf)) + " (FK)" : t1.get$name(tf);
        if (this.physical === true)
          $name = J.$add$ns(J.$add$ns($name, " "), tf.get$dataType());
        J.fillText$3$x(this.ctx, $name, J.$add$ns(J.get$x$x(this.table), this._borderSize), J.$add$ns(J.$add$ns(J.get$y$x(this.table), this.TABLE_HEADER_CONSIDERATION), this._tableFieldShifter));
      }
      J.stroke$0$x(this.ctx);
      J.closePath$0$x(this.ctx);
      t1 = this._tableFieldShifter;
      if (typeof t1 !== "number")
        return t1.$add();
      this._tableFieldShifter = t1 + this.SPACE_BETWEEN_FIELDS;
    }, "call$1", "get$_drawTableField", 2, 0, 679, 715, "_drawTableField"],
    calcSizeProperties$0: [function() {
      var t1, t2, tableNameSize, largestTableFieldSize, largerSize;
      this.noPrimaryKeys = !this._isTherePrimaryKey$0() || false;
      this.onlyPrimaryKeys = this._isThereOnlyPrimaryKeys$0() && true;
      this._calcLargestNameSize$0();
      t1 = this.table;
      t2 = J.getInterceptor$x(t1);
      tableNameSize = J.measureText$1$x(this.ctx, t2.get$name(t1)).width;
      largestTableFieldSize = this._largestNameSize;
      if (typeof tableNameSize !== "number")
        return tableNameSize.$gt();
      if (typeof largestTableFieldSize !== "number")
        return H.iae(largestTableFieldSize);
      if (tableNameSize > largestTableFieldSize)
        largerSize = tableNameSize;
      else
        largerSize = largestTableFieldSize;
      t2.set$width(t1, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0((largerSize + 30) / 15)) * 15);
      J.set$height$x(this.table, this._calcTableHeightSize$0());
      this._borderSize = J.$div$n(J.$sub$n(J.get$width$x(this.table), this._largestNameSize), 2);
    }, "call$0", "get$calcSizeProperties", 0, 0, 137, "calcSizeProperties"],
    _calcLargestNameSize$0: [function() {
      var t1, tf, tableFieldNameSize, t2;
      this._largestNameSize = 0;
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;) {
        tf = t1.get$current();
        tableFieldNameSize = J.measureText$1$x(this.ctx, J.get$name$x(tf)).width;
        if (J.$eq(J.get$value$x(tf.get$foreignKey()), true)) {
          t2 = J.measureText$1$x(this.ctx, " (FK)").width;
          if (typeof tableFieldNameSize !== "number")
            return tableFieldNameSize.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          tableFieldNameSize += t2;
        }
        if (this.physical === true) {
          t2 = J.measureText$1$x(this.ctx, tf.get$dataType()).width;
          if (typeof tableFieldNameSize !== "number")
            return tableFieldNameSize.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          tableFieldNameSize += t2;
        }
        t2 = this._largestNameSize;
        if (typeof tableFieldNameSize !== "number")
          return tableFieldNameSize.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (tableFieldNameSize > t2)
          this._largestNameSize = tableFieldNameSize;
      }
    }, "call$0", "get$_calcLargestNameSize", 0, 0, 137, "_calcLargestNameSize"],
    _calcTableHeightSize$0: [function() {
      var size, t1, t2;
      size = this.TABLE_HEADER_SIZE + 10;
      for (t1 = J.get$iterator$ax(this.table.get$tableFields()), t2 = this.SPACE_BETWEEN_FIELDS; t1.moveNext$0() === true;) {
        t1.get$current();
        size += t2;
      }
      return C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0((this.noPrimaryKeys === true || this.onlyPrimaryKeys === true ? size + t2 : size) / 15)) * 15;
    }, "call$0", "get$_calcTableHeightSize", 0, 0, 428, "_calcTableHeightSize"],
    _isTherePrimaryKey$0: [function() {
      for (var t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;)
        if (J.$eq(t1.get$current().get$primaryKey(), true))
          return true;
      return false;
    }, "call$0", "get$_isTherePrimaryKey", 0, 0, 346, "_isTherePrimaryKey"],
    _isThereOnlyPrimaryKeys$0: [function() {
      for (var t1 = J.get$iterator$ax(this.table.get$tableFields()); t1.moveNext$0() === true;)
        if (J.$eq(t1.get$current().get$primaryKey(), false))
          return false;
      return true;
    }, "call$0", "get$_isThereOnlyPrimaryKeys", 0, 0, 346, "_isThereOnlyPrimaryKeys"],
    drawToggled$0: [function() {
    }, "call$0", "get$drawToggled", 0, 0, 137, "drawToggled"],
    updateFillingColorGradient$0: [function() {
      this.tableNameGradient = null;
      var t1 = J.createLinearGradient$4$x(this.ctx, J.get$x$x(this.table), J.get$y$x(this.table), J.$add$ns(J.get$x$x(this.table), J.get$width$x(this.table)), J.$add$ns(J.get$y$x(this.table), this.TABLE_HEADER_SIZE));
      this.tableNameGradient = t1;
      t1.addColorStop(0, "#BCE8F1");
      this.tableNameGradient.addColorStop(1, "#80CFFF");
    }, "call$0", "get$updateFillingColorGradient", 0, 0, 137, "updateFillingColorGradient"],
    LogicalTableView$4: [function(ctx, table, borderInteractionController, tableController) {
      var t1 = new S.ForeignKey(null, null);
      t1.value = false;
      t1.foreignTableId = -1;
      this.blankPrimaryKeyTableField = S.TableField$(0, "", true, t1, "", false, false, false, false, null);
      t1 = new S.ForeignKey(null, null);
      t1.value = false;
      t1.foreignTableId = -1;
      this.blankNormalTableField = S.TableField$(0, "", false, t1, "", false, false, false, false, null);
      this.calcSizeProperties$0();
      this.updateFillingColorGradient$0();
    }, null, null, 8, 0, 716, 155, 267, 156, 164, ""]
  },
  "+LogicalTableView": 0,
  TableView: {
    "^": "BaseView;borderInteractionController<-,table*-,highlighted?-,toggledTableField?-,tableController<-",
    updateTable$1: [function(updatedTable) {
      this.set$table(0, updatedTable);
    }, "call$1", "get$updateTable", 2, 0, 626, 714, "updateTable"],
    _toggle$0: [function() {
      var togglingPoints, t1, p, t2;
      J.set$strokeStyle$x(this.ctx, "black");
      J.set$lineWidth$x(this.ctx, 1);
      togglingPoints = H.setRuntimeTypeInfo([], [P.Point]);
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(this.get$table(this)), 2), J.$sub$n(J.get$y$x(this.get$table(this)), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.get$table(this)), J.get$width$x(this.get$table(this))), 2), J.$sub$n(J.get$y$x(this.get$table(this)), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.get$x$x(this.get$table(this)), 2), J.$sub$n(J.$add$ns(J.get$y$x(this.get$table(this)), J.get$height$x(this.get$table(this))), 2)), [null]));
      togglingPoints.push(H.setRuntimeTypeInfo(new P.Point(J.$sub$n(J.$add$ns(J.get$x$x(this.get$table(this)), J.get$width$x(this.get$table(this))), 2), J.$sub$n(J.$add$ns(J.get$y$x(this.get$table(this)), J.get$height$x(this.get$table(this))), 2)), [null]));
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(togglingPoints, togglingPoints.length, 0, null), [H.getTypeArgumentByIndex(togglingPoints, 0)]); t1.moveNext$0();) {
        p = t1._current;
        J.beginPath$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 2);
        t2 = J.getInterceptor$x(p);
        J.rect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.set$fillStyle$x(this.ctx, "#00FF00");
        J.fillRect$4$x(this.ctx, t2.get$x(p), t2.get$y(p), 5, 5);
        J.closePath$0$x(this.ctx);
        J.stroke$0$x(this.ctx);
        J.set$lineWidth$x(this.ctx, 1);
      }
    }, "call$0", "get$_toggle", 0, 0, 137, "_toggle"],
    _drawTableShadow$0: [function() {
      J.set$strokeStyle$x(this.ctx, "#696969");
      J.rect$4$x(this.ctx, J.$add$ns(J.get$x$x(this.get$table(this)), 3), J.$add$ns(J.get$y$x(this.get$table(this)), 3), J.get$width$x(this.get$table(this)), J.get$height$x(this.get$table(this)));
      J.set$fillStyle$x(this.ctx, "#696969");
      J.fillRect$4$x(this.ctx, J.$add$ns(J.get$x$x(this.get$table(this)), 3), J.$add$ns(J.get$y$x(this.get$table(this)), 3), J.get$width$x(this.get$table(this)), J.get$height$x(this.get$table(this)));
      J.stroke$0$x(this.ctx);
    }, "call$0", "get$_drawTableShadow", 0, 0, 137, "_drawTableShadow"],
    setPhysical$1: [function(physical) {
      this.physical = physical;
      this.calcSizeProperties$0();
    }, "call$1", "get$setPhysical", 2, 0, 658, 688, "setPhysical"]
  },
  "+TableView": 0,
  TableViewFactory: {
    "^": "ViewFactory;tableViews-,ctx-,logicalViews-,conceptualViews-",
    newTableView$3: [function(table, borderInteractionController, tableController) {
      var t1, tableView, t2;
      if (this.logicalViews === true) {
        t1 = this.ctx;
        tableView = new S.LogicalTableView(null, null, null, null, null, null, null, null, null, null, null, null, null, null, 5, 3, 15, 30, 19, 5, null, null);
        tableView.table = table;
        tableView.highlighted = false;
        tableView.toggled = false;
        tableView.ctx = t1;
        tableView.borderInteractionController = borderInteractionController;
        tableView.tableController = tableController;
        table.updateCentralBorderPoints$0();
        tableView.LogicalTableView$4(t1, table, borderInteractionController, tableController);
      } else
        tableView = null;
      if (this.conceptualViews === true) {
        t1 = this.ctx;
        tableView = new S.ConceptualTableView(null, null, null, null, null, null, null, null, null, null, null, null, 5, 3, 15, 30, 19, 5, null, null);
        tableView.coloph$ConceptualTableView$table = table;
        tableView.highlighted = false;
        tableView.toggled = false;
        tableView.ctx = t1;
        tableView.borderInteractionController = borderInteractionController;
        tableView.tableController = tableController;
        table.updateCentralBorderPoints$0();
        tableView._largestNameSize = J.measureText$1$x(t1, J.get$name$x(table)).width;
        J.set$width$x(table, tableView._calcTableWidthSize$0());
        J.set$height$x(tableView.coloph$ConceptualTableView$table, C.JSNumber_methods.toInt$0(C.JSDouble_methods.roundToDouble$0(3.1666666666666665)) * 15);
        tableView._borderSize = J.$div$n(J.$sub$n(J.get$width$x(tableView.coloph$ConceptualTableView$table), tableView._largestNameSize), 2);
        tableView.updateFillingColorGradient$0();
        t2 = new S.CanvasEllipseDrawer(null);
        t2.ctx = t1;
        tableView.canvasEllipseDrawer = t2;
        tableView.glueTableFields$0();
      }
      this.tableViews.push(tableView);
      return tableView;
    }, "call$3", "get$newTableView", 6, 0, 717, 267, 156, 164, "newTableView"],
    recreateViews$0: [function() {
      var copiedViews, borderInteractionController, tableController, t1;
      if (this.tableViews.length !== 0) {
        copiedViews = this._copyViews$0();
        if (0 >= copiedViews.length)
          return H.ioore(copiedViews, 0);
        borderInteractionController = copiedViews[0].get$borderInteractionController();
        if (0 >= copiedViews.length)
          return H.ioore(copiedViews, 0);
        tableController = copiedViews[0].get$tableController();
        C.JSArray_methods.set$length(this.tableViews, 0);
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(copiedViews, copiedViews.length, 0, null), [H.getTypeArgumentByIndex(copiedViews, 0)]); t1.moveNext$0();)
          this.newTableView$3(J.get$table$x(t1._current), borderInteractionController, tableController);
      }
    }, "call$0", "get$recreateViews", 0, 0, 137, "recreateViews"],
    _copyViews$0: [function() {
      var copiedViews, t1;
      copiedViews = [];
      for (t1 = this.tableViews, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        copiedViews.push(t1._current);
      return copiedViews;
    }, "call$0", "get$_copyViews", 0, 0, 718, "_copyViews"]
  },
  "+TableViewFactory": 0
}],
["", "coloph.dart", , A, {
  "^": "",
  main: [function() {
    S.MainController$(document.querySelector("#canvas"));
  }, "call$0", "main$closure", 0, 0, 137, "main"]
},
1],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: [function(iterable, f) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      f.call$1(t1._current);
  }, "call$2", "IterableMixinWorkaround_forEach$closure", 4, 0, 202, 199, 203, "forEach"],
  IterableMixinWorkaround_toStringIterable: [function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  }, "call$3", "IterableMixinWorkaround_toStringIterable$closure", 6, 0, 204, 199, 205, 206, "toStringIterable"],
  IterableMixinWorkaround_setRangeList: [function(list, start, end, from, skipCount) {
    var $length;
    if (start < 0 || start > list.length)
      H.throwExpression(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      H.throwExpression(P.RangeError$range(end, start, list.length));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(new P.StateError("Not enough elements"));
    H.Lists_copy(from, skipCount, list, start, $length);
  }, "call$5", "IterableMixinWorkaround_setRangeList$closure", 10, 0, 207, 101, 208, 209, 141, 200, "setRangeList"],
  Lists_copy: [function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  }, "call$5", "Lists_copy$closure", 10, 0, 210, 211, 212, 213, 214, 215, "copy"],
  Lists_indexOf: [function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  }, "call$4", "Lists_indexOf$closure", 8, 0, 216, 217, 218, 121, 219, "indexOf"],
  Sort__doSort: [function(a, left, right, compare) {
    if (J.$le$n(J.$sub$n(right, left), 32) === true)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  }, "call$4", "Sort__doSort$closure", 8, 0, 220, 217, 221, 222, 223, "_doSort"],
  Sort__insertionSort: [function(a, left, right, compare) {
    var i, t1, t2, el, j, t3;
    for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right) === true; i = t2.$add(i, 1)) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        t3 = J.getInterceptor$n(j);
        if (!(t3.$gt(j, left) === true && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0) === true))
          break;
        t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
        j = t3.$sub(j, 1);
      }
      t1.$indexSet(a, j, el);
    }
  }, "call$4", "Sort__insertionSort$closure", 8, 0, 220, 217, 221, 222, 223, "_insertionSort"],
  Sort__dualPivotQuicksort: [function(a, left, right, compare) {
    var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, less0, great0, pivots_are_equal;
    t1 = J.getInterceptor$n(right);
    sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
    t2 = J.getInterceptor$ns(left);
    index1 = t2.$add(left, sixth);
    index5 = t1.$sub(right, sixth);
    index3 = J.$tdiv$n(t2.$add(left, right), 2);
    t3 = J.getInterceptor$n(index3);
    index2 = t3.$sub(index3, sixth);
    index4 = t3.$add(index3, sixth);
    t3 = J.getInterceptor$asx(a);
    el1 = t3.$index(a, index1);
    el2 = t3.$index(a, index2);
    el3 = t3.$index(a, index3);
    el4 = t3.$index(a, index4);
    el5 = t3.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0) === true) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0) === true) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0) === true) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0) === true) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0) === true) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t3.$indexSet(a, index1, el1);
    t3.$indexSet(a, index3, el3);
    t3.$indexSet(a, index5, el5);
    t3.$indexSet(a, index2, t3.$index(a, left));
    t3.$indexSet(a, index4, t3.$index(a, right));
    less = t2.$add(left, 1);
    great = t1.$sub(right, 1);
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0) === true) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else
          for (; true;) {
            comp = compare.call$2(t3.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0) === true) {
              great = J.$sub$n(great, 1);
              continue;
            } else {
              t4 = J.getInterceptor$n(great);
              if (t2.$lt(comp, 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0) === true) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$gt$n(compare.call$2(ak, el4), 0) === true)
          for (; true;)
            if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0) === true) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k) === true)
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t1 = J.getInterceptor$n(less);
    t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
    t3.$indexSet(a, t1.$sub(less, 1), el2);
    t2 = J.getInterceptor$ns(great);
    t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
    t3.$indexSet(a, t2.$add(great, 1), el4);
    H.Sort__doSort(a, left, t1.$sub(less, 2), compare);
    H.Sort__doSort(a, t2.$add(great, 2), right, compare);
    if (pivots_are_equal)
      return;
    if (t1.$lt(less, index1) === true && t2.$gt(great, index5) === true) {
      for (; J.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
        less = J.$add$ns(less, 1);
      for (; J.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
        great = J.$sub$n(great, 1);
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k) === true)
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  }, "call$4", "Sort__dualPivotQuicksort$closure", 8, 0, 220, 217, 221, 222, 223, "_dualPivotQuicksort"],
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: [function(_) {
      return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_0", ret: [P.Iterator, E]};
      }, this.$receiver, "ListIterable");
    }, "iterator"],
    forEach$1: [function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E0", void: true, args: [{func: "void__E0", void: true, args: [E]}]};
      }, this.$receiver, "ListIterable");
    }, 719, "forEach"],
    get$isEmpty: [function(_) {
      return J.$eq(this.get$length(this), 0);
    }, null, null, 1, 0, 346, "isEmpty"],
    map$1: [function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E0", ret: P.Iterable, args: [{func: "dynamic__E0", args: [E]}]};
      }, this.$receiver, "ListIterable");
    }, 203, "map"],
    skip$1: [function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int0", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "ListIterable");
    }, 215, "skip"],
    toList$1$growable: [function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool0", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "ListIterable");
    }, 316, 317, "toList"],
    $isEfficientLength: true
  },
  "+ListIterable": 0,
  SubListIterable: {
    "^": "ListIterable;_iterable-,_start-,_endOrLength-",
    get$_endIndex: [function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length) === true)
        return $length;
      return t1;
    }, null, null, 1, 0, 394, "_endIndex"],
    get$_startIndex: [function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length) === true)
        return $length;
      return t1;
    }, null, null, 1, 0, 394, "_startIndex"],
    get$length: [function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length) === true)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length) === true)
        return J.$sub$n($length, t1);
      return J.$sub$n(t2, t1);
    }, null, null, 1, 0, 394, "length"],
    elementAt$1: [function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) === true || J.$ge$n(realIndex, this.get$_endIndex()) === true)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    }, "call$1", "get$elementAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int0", ret: E, args: [J.JSInt]};
      }, this.$receiver, "SubListIterable");
    }, 12, "elementAt"],
    skip$1: [function(_, count) {
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int1", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "SubListIterable");
    }, 215, "skip"],
    take$1: [function(_, count) {
      var t1, t2, newEnd;
      if (J.$lt$n(count, 0) === true)
        throw H.wrapException(P.RangeError$value(count));
      t1 = this._endOrLength;
      t2 = this._start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), null);
      else {
        newEnd = J.$add$ns(t2, count);
        if (J.$lt$n(t1, newEnd) === true)
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, null);
      }
    }, "call$1", "get$take", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int1", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "SubListIterable");
    }, 215, "take"],
    SubListIterable$3: [function(_iterable, _start, _endOrLength, $E) {
      var t1, t2, t3;
      t1 = this._start;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0) === true)
        throw H.wrapException(P.RangeError$value(t1));
      t3 = this._endOrLength;
      if (t3 != null) {
        if (J.$lt$n(t3, 0) === true)
          throw H.wrapException(P.RangeError$value(t3));
        if (t2.$gt(t1, t3) === true)
          throw H.wrapException(P.RangeError$range(t1, 0, t3));
      }
    }, null, null, 6, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "dynamic__Iterable_int_int", args: [[P.Iterable, E], J.JSInt, J.JSInt]};
      }, this.$receiver, "SubListIterable");
    }, 196, 197, 198, ""],
    static: {SubListIterable$: [function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }, null, null, 6, 0, function() {
        return H.computeSignature(function(E) {
          return {func: "dynamic__Iterable_int_int", args: [[P.Iterable, E], J.JSInt, J.JSInt]};
        }, this.$receiver, "SubListIterable");
      }, 196, 197, 198, "new SubListIterable"]}
  },
  "+SubListIterable": 0,
  ListIterator: {
    "^": "Object;_iterable-,_length-,_index-,_current-",
    get$current: [function() {
      return this._current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_", ret: E};
      }, this.$receiver, "ListIterator");
    }, "current"],
    moveNext$0: [function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (!J.$eq(this._length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+ListIterator": 0,
  MappedIterable: {
    "^": "IterableBase;_iterable-,_f-",
    get$iterator: [function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "Iterator_1", ret: [P.Iterator, T]};
      }, this.$receiver, "MappedIterable");
    }, "iterator"],
    get$length: [function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      var t1 = this._iterable;
      return t1.get$isEmpty(t1);
    }, null, null, 1, 0, 346, "isEmpty"],
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: [function(iterable, $function, $S, $T) {
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }, "call$2", null, 4, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: "MappedIterable__Iterable_T__S", ret: [H.MappedIterable, S, T], args: [P.Iterable, {func: "T__S", ret: T, args: [S]}]};
        }, this.$receiver, "MappedIterable");
      }, 199, 15, "new MappedIterable"]}
  },
  "+MappedIterable": 0,
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable-,_f-",
    $isEfficientLength: true
  },
  "+EfficientLengthMappedIterable": 0,
  MappedIterator: {
    "^": "Iterator;_current-,_iterator-,_f-",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: [function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"],
    get$current: [function() {
      return this._current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "T_", ret: T};
      }, this.$receiver, "MappedIterator");
    }, "current"],
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  "+MappedIterator": 0,
  MappedListIterable: {
    "^": "ListIterable;_source-,_f-",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: [function(_) {
      return J.get$length$asx(this._source);
    }, null, null, 1, 0, 394, "length"],
    elementAt$1: [function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    }, "call$1", "get$elementAt", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "T__int", ret: T, args: [J.JSInt]};
      }, this.$receiver, "MappedListIterable");
    }, 12, "elementAt"],
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  "+MappedListIterable": 0,
  WhereIterable: {
    "^": "IterableBase;_iterable-,_f-",
    get$iterator: [function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_2", ret: [P.Iterator, E]};
      }, this.$receiver, "WhereIterable");
    }, "iterator"]
  },
  "+WhereIterable": 0,
  WhereIterator: {
    "^": "Iterator;_iterator-,_f-",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: [function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"],
    get$current: [function() {
      return this._iterator.get$current();
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_0", ret: E};
      }, this.$receiver, "WhereIterator");
    }, "current"]
  },
  "+WhereIterator": 0,
  SkipIterable: {
    "^": "IterableBase;_iterable-,_skipCount-",
    skip$1: [function(_, n) {
      return H.SkipIterable_SkipIterable(this._iterable, this._skipCount + n, H.getTypeArgumentByIndex(this, 0));
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int2", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "SkipIterable");
    }, 293, "skip"],
    get$iterator: [function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_3", ret: [P.Iterator, E]};
      }, this.$receiver, "SkipIterable");
    }, "iterator"],
    SkipIterable$_$2: [function(_iterable, _skipCount, $E) {
    }, null, null, 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "dynamic__Iterable_int", args: [[P.Iterable, E], J.JSInt]};
      }, this.$receiver, "SkipIterable");
    }, 196, 201, "_"],
    static: {SkipIterable_SkipIterable: [function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, "call$2", null, 4, 0, function() {
        return H.computeSignature(function(E) {
          return {func: "SkipIterable__Iterable_int", ret: [H.SkipIterable, E], args: [[P.Iterable, E], J.JSInt]};
        }, this.$receiver, "SkipIterable");
      }, 199, 200, "new SkipIterable"], SkipIterable$_: [function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }, null, null, 4, 0, function() {
        return H.computeSignature(function(E) {
          return {func: "dynamic__Iterable_int", args: [[P.Iterable, E], J.JSInt]};
        }, this.$receiver, "SkipIterable");
      }, 196, 201, "new SkipIterable$_"]}
  },
  "+SkipIterable": 0,
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable-,_skipCount-",
    get$length: [function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0) === true)
        return $length;
      return 0;
    }, null, null, 1, 0, 394, "length"],
    $isEfficientLength: true
  },
  "+EfficientLengthSkipIterable": 0,
  SkipIterator: {
    "^": "Iterator;_iterator-,_skipCount-",
    moveNext$0: [function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"],
    get$current: [function() {
      return this._iterator.get$current();
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_1", ret: E};
      }, this.$receiver, "SkipIterator");
    }, "current"]
  },
  "+SkipIterator": 0,
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: [function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    }, null, null, 3, 0, 397, 425, "length"],
    add$1: [function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E1", void: true, args: [E]};
      }, this.$receiver, "FixedLengthListMixin");
    }, 38, "add"],
    insert$2: [function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E0", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "FixedLengthListMixin");
    }, 12, 38, "insert"],
    remove$1: [function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }, "call$1", "get$remove", 2, 0, 422, 218, "remove"],
    clear$0: [function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    removeAt$1: [function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int1", ret: E, args: [J.JSInt]};
      }, this.$receiver, "FixedLengthListMixin");
    }, 12, "removeAt"]
  },
  "+FixedLengthListMixin": 0,
  Symbol0: {
    "^": "Object;_name<-",
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    }, null, null, 1, 0, 394, "hashCode"],
    toString$0: [function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    }, "call$0", "get$toString", 0, 0, 16, "toString"],
    $isSymbol0: true,
    $isSymbol: true,
    static: {"^": "Symbol_reservedWordRE-,Symbol_publicIdentifierRE-,Symbol_identifierRE-,Symbol_operatorRE-,Symbol_publicSymbolPattern-,Symbol_symbolPattern-"}
  },
  "+Symbol": 0
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  computeMangledNames: [function(jsMangledNames, isGlobal) {
    var keys, result, t1, t2, key, value, t3;
    keys = H.extractKeys(jsMangledNames);
    result = H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, J.JSString]);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(keys, keys.length, 0, null), [H.getTypeArgumentByIndex(keys, 0)]), t2 = !isGlobal; t1.moveNext$0();) {
      key = t1._current;
      value = jsMangledNames[key];
      result.$indexSet(0, key, value);
      if (t2) {
        t3 = J.getInterceptor$s(key);
        if (t3.startsWith$1(key, "get$") === true)
          result.$indexSet(0, "set$" + H.S(t3.substring$1(key, 4)), value + "=");
      }
    }
    return result;
  }, "call$2", "computeMangledNames$closure", 4, 0, 224, 225, 226, "computeMangledNames"],
  extractKeys: [function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }, "call$1", "extractKeys$closure", 2, 0, 227, 228, "extractKeys"]
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _registerErrorHandler: [function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return zone.registerBinaryCallback$1(errorHandler);
    else
      return zone.registerUnaryCallback$1(errorHandler);
  }, "call$2", "_registerErrorHandler$closure", 4, 0, 229, 230, 231, "_registerErrorHandler"],
  _asyncRunCallbackLoop: [function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.get$next();
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  }, "call$0", "_asyncRunCallbackLoop$closure", 0, 0, 137, "_asyncRunCallbackLoop"],
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 137, "_asyncRunCallback"],
  _scheduleAsyncCallback: [function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  }, "call$1", "_scheduleAsyncCallback$closure", 2, 0, 235, 34, "_scheduleAsyncCallback"],
  scheduleMicrotask: [function(callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone)) {
      $.Zone__current.scheduleMicrotask$1(callback);
      return;
    }
    t1 = $.Zone__current;
    t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
  }, "call$1", "scheduleMicrotask$closure", 2, 0, 236, 34, "scheduleMicrotask"],
  StreamController_StreamController: [function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
  }, "call$5$onCancel$onListen$onPause$onResume$sync", null, 0, 11, function() {
    return H.computeSignature(function(T) {
      return {func: "StreamController___args0_void__void__void__bool", ret: [P.StreamController, T], named: {onCancel: {func: "args0"}, onListen: {func: "void_", void: true}, onPause: {func: "void_", void: true}, onResume: {func: "void_", void: true}, sync: J.JSBool}};
    }, this.$receiver, "StreamController");
  }, 116, 116, 116, 116, 237, 238, 239, 240, 241, 242, "new StreamController"],
  _runGuarded: [function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.handleUncaughtError$2(e, s);
    }

  }, "call$1", "_runGuarded$closure", 2, 0, 243, 244, "_runGuarded"],
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 235, 38, "_nullDataHandler"],
  _nullErrorHandler: [function(error, stackTrace) {
    $.Zone__current.handleUncaughtError$2(error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 245, 116, 246, 247, "_nullErrorHandler"],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 137, "_nullDoneHandler"],
  _runUserCode: [function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  }, "call$3", "_runUserCode$closure", 6, 0, 248, 249, 250, 251, "_runUserCode"],
  _cancelAndError: [function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  }, "call$4", "_cancelAndError$closure", 8, 0, 252, 253, 254, 246, 247, "_cancelAndError"],
  _cancelAndErrorClosure: [function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  }, "call$2", "_cancelAndErrorClosure$closure", 4, 0, 255, 253, 254, "_cancelAndErrorClosure"],
  _cancelAndValue: [function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  }, "call$3", "_cancelAndValue$closure", 6, 0, 256, 253, 254, 38, "_cancelAndValue"],
  Timer_Timer: [function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
  }, "call$2", null, 4, 0, 257, 258, 34, "new Timer"],
  _createTimer: [function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  }, "call$2", "_createTimer$closure", 4, 0, 257, 258, 34, "_createTimer"],
  Zone__enter: [function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  }, "call$1", "Zone__enter$closure", 2, 0, 259, 231, "_enter"],
  _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  }, "call$5", "_rootHandleUncaughtError$closure", 10, 0, 260, 261, 262, 231, 246, 247, "_rootHandleUncaughtError"],
  _rootRun: [function($self, $parent, zone, f) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$4", "_rootRun$closure", 8, 0, 263, 261, 262, 231, 203, "_rootRun"],
  _rootRunUnary: [function($self, $parent, zone, f, arg) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$5", "_rootRunUnary$closure", 10, 0, 264, 261, 262, 231, 203, 265, "_rootRunUnary"],
  _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$6", "_rootRunBinary$closure", 12, 0, 266, 261, 262, 231, 203, 78, 79, "_rootRunBinary"],
  _AsyncError: {
    "^": "Object;error>-,stackTrace<-",
    $isError: true
  },
  "+_AsyncError": 0,
  _BroadcastStream: {
    "^": "_ControllerStream;_controller-"
  },
  "+_BroadcastStream": 0,
  _BroadcastSubscription: {
    "^": "_ControllerSubscription;_eventState@-,_async$_next@-,_async$_previous@-,_controller-,_async$_onData-,_onError-,_onDone-,_zone-,_state-,_cancelFuture-,_pending-",
    get$_controller: [function() {
      return this._controller;
    }, null, null, 1, 0, 720, "_controller"],
    _expectsEvent$1: [function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    }, "call$1", "get$_expectsEvent", 2, 0, 8, 721, "_expectsEvent"],
    _toggleEventId$0: [function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    }, "call$0", "get$_toggleEventId", 0, 0, 137, "_toggleEventId"],
    get$_isFiring: [function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    }, null, null, 1, 0, 346, "_isFiring"],
    _setRemoveAfterFiring$0: [function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    }, "call$0", "get$_setRemoveAfterFiring", 0, 0, 346, "_setRemoveAfterFiring"],
    get$_removeAfterFiring: [function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    }, null, null, 1, 0, 346, "_removeAfterFiring"],
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 137, "_onPause"],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 137, "_onResume"],
    static: {"^": "_BroadcastSubscription__STATE_EVENT_ID-,_BroadcastSubscription__STATE_FIRING-,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING-"}
  },
  "+_BroadcastSubscription": 0,
  _BroadcastStreamController: {
    "^": "Object;_async$_next@-,_async$_previous@-",
    get$isPaused: [function() {
      return false;
    }, null, null, 1, 0, 346, "isPaused"],
    _ensureDoneFuture$0: [function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = P._Future$(null);
      this._doneFuture = t1;
      return t1;
    }, "call$0", "get$_ensureDoneFuture", 0, 0, 722, "_ensureDoneFuture"],
    _removeListener$1: [function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_async$_next();
      previous.set$_async$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    }, "call$1", "get$_removeListener", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void___BroadcastSubscription", void: true, args: [[P._BroadcastSubscription, T]]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 253, "_removeListener"],
    _subscribe$1: [function(cancelOnError) {
      var t1, t2, subscription;
      if ((this._state & 4) !== 0)
        throw H.wrapException(new P.StateError("Subscribing to closed stream"));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, t2, null, null);
      subscription.$builtinTypeInfo = this.$builtinTypeInfo;
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t2 = this._async$_previous;
      subscription._async$_previous = t2;
      subscription._async$_next = this;
      t2.set$_async$_next(subscription);
      this._async$_previous = subscription;
      subscription._eventState = this._state & 1;
      if (this._async$_next === subscription)
        P._runGuarded(this._onListen);
      return subscription;
    }, "call$1", "get$_subscribe", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__bool", ret: [P.StreamSubscription, T], args: [J.JSBool]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 723, "_subscribe"],
    _recordCancel$1: [function(subscription) {
      if (subscription.get$_async$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._async$_next === this)
          this._callOnCancel$0();
      }
    }, "call$1", "get$_recordCancel", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Future___BroadcastSubscription", ret: P.Future, args: [[P._BroadcastSubscription, T]]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 253, "_recordCancel"],
    _recordPause$1: [function(subscription) {
    }, "call$1", "get$_recordPause", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__StreamSubscription", void: true, args: [[P.StreamSubscription, T]]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 253, "_recordPause"],
    _recordResume$1: [function(subscription) {
    }, "call$1", "get$_recordResume", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__StreamSubscription", void: true, args: [[P.StreamSubscription, T]]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 253, "_recordResume"],
    _addEventError$0: [function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    }, "call$0", "get$_addEventError", 0, 0, 724, "_addEventError"],
    add$1: [function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 335, "add"],
    addError$2: [function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 725, 116, 246, 247, "addError"],
    close$0: [function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    }, "call$0", "get$close", 0, 0, 726, "close"],
    _async$_add$1: [function(data) {
      this._sendData$1(data);
    }, "call$1", "get$_async$_add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 335, "_add"],
    _addError$2: [function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    }, "call$2", "get$_addError", 4, 0, 727, 246, 247, "_addError"],
    _close$0: [function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state = this._state & 4294967287;
      C.JSNull_methods.complete$0(addState);
    }, "call$0", "get$_close", 0, 0, 137, "_close"],
    _forEachListener$1: [function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
      link = this._async$_next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_async$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_async$_next();
      this._state = this._state & 4294967293;
      if (this._async$_next === this)
        this._callOnCancel$0();
    }, "call$1", "get$_forEachListener", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__void___BufferingStreamSubscription", void: true, args: [{func: "void___BufferingStreamSubscription", void: true, args: [[P._BufferingStreamSubscription, T]]}]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 719, "_forEachListener"],
    _callOnCancel$0: [function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }, "call$0", "get$_callOnCancel", 0, 0, 137, "_callOnCancel"]
  },
  "+_BroadcastStreamController": 0,
  _SyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen-,_onCancel-,_state-,_async$_next-,_async$_previous-,_addStreamState-,_doneFuture-",
    _sendData$1: [function(data) {
      var t1 = this._async$_next;
      if (t1 === this)
        return;
      if (t1.get$_async$_next() === this) {
        this._state = this._state | 2;
        this._async$_next._async$_add$1(data);
        this._state = this._state & 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
        return;
      }
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    }, "call$1", "get$_sendData", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T0", void: true, args: [T]};
      }, this.$receiver, "_SyncBroadcastStreamController");
    }, 335, "_sendData"],
    _sendError$2: [function(error, stackTrace) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    }, "call$2", "get$_sendError", 4, 0, 727, 246, 247, "_sendError"],
    _sendDone$0: [function() {
      if (this._async$_next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    }, "call$0", "get$_sendDone", 0, 0, 137, "_sendDone"]
  },
  "+_SyncBroadcastStreamController": 0,
  _SyncBroadcastStreamController__sendData_closure: {
    "^": "Closure;this_0-,data_1-",
    call$1: [function(subscription) {
      subscription._async$_add$1(this.data_1);
    }, "call$1", null, 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.$receiver, "_SyncBroadcastStreamController");
    }, 253, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  "+ _SyncBroadcastStreamController__sendData_closure": 0,
  _SyncBroadcastStreamController__sendError_closure: {
    "^": "Closure;this_0-,error_1-,stackTrace_2-",
    call$1: [function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    }, "call$1", null, 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.$receiver, "_SyncBroadcastStreamController");
    }, 253, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  "+ _SyncBroadcastStreamController__sendError_closure": 0,
  _SyncBroadcastStreamController__sendDone_closure: {
    "^": "Closure;this_0-",
    call$1: [function(subscription) {
      subscription._close$0();
    }, "call$1", null, 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.$receiver, "_SyncBroadcastStreamController");
    }, 253, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  "+ _SyncBroadcastStreamController__sendDone_closure": 0,
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  "+Future": 0,
  _Future: {
    "^": "Object;_state-,_zone<-,_resultOrListeners-,_nextListener@-,_onValueCallback-,_errorTestCallback-,_onErrorCallback-,_whenCompleteActionCallback-",
    get$_isComplete: [function() {
      return this._state >= 4;
    }, null, null, 1, 0, 346, "_isComplete"],
    get$_hasValue: [function() {
      return this._state === 4;
    }, null, null, 1, 0, 346, "_hasValue"],
    get$_hasError: [function() {
      return this._state === 8;
    }, null, null, 1, 0, 346, "_hasError"],
    set$_isChained: [function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    }, null, null, 3, 0, 656, 38, "_isChained"],
    get$_onValue: [function() {
      return this._state === 2 ? null : this._onValueCallback;
    }, null, null, 1, 0, 728, "_onValue"],
    get$_errorTest: [function() {
      return this._state === 2 ? null : this._errorTestCallback;
    }, null, null, 1, 0, 729, "_errorTest"],
    get$_onError: [function() {
      return this._state === 2 ? null : this._onErrorCallback;
    }, null, null, 1, 0, 730, "_onError"],
    get$_whenCompleteAction: [function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    }, null, null, 1, 0, 731, "_whenCompleteAction"],
    then$2$onError: [function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(f), null, P._registerErrorHandler(onError, $.Zone__current), null), [null]);
      this._addListener$1(result);
      return result;
    }, "call$2$onError", "get$then", 2, 3, function() {
      return H.computeSignature(function(T) {
        return {func: "Future__dynamic__T__Function", ret: P.Future, args: [{func: "dynamic__T", args: [T]}], named: {onError: P.Function}};
      }, this.$receiver, "_Future");
    }, 116, 203, 251, "then"],
    whenComplete$1: [function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(action));
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    }, "call$1", "get$whenComplete", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Future__args0", ret: [P.Future, T], args: [{func: "args0"}]};
      }, this.$receiver, "_Future");
    }, 719, "whenComplete"],
    get$_value: [function() {
      return this._resultOrListeners;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T_0", ret: T};
      }, this.$receiver, "_Future");
    }, "_value"],
    get$_error: [function() {
      return this._resultOrListeners;
    }, null, null, 1, 0, 732, "_error"],
    _setValue$1: [function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    }, "call$1", "get$_setValue", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T1", void: true, args: [T]};
      }, this.$receiver, "_Future");
    }, 38, "_setValue"],
    _setError$2: [function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    }, "call$2", "get$_setError", 4, 0, 727, 246, 247, "_setError"],
    _addListener$1: [function(listener) {
      if (this._state >= 4)
        this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
      else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    }, "call$1", "get$_addListener", 2, 0, 733, 392, "_addListener"],
    _removeListeners$0: [function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    }, "call$0", "get$_removeListeners", 0, 0, 722, "_removeListeners"],
    _complete$1: [function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    }, "call$1", "get$_complete", 2, 0, 235, 38, "_complete"],
    _completeWithValue$1: [function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    }, "call$1", "get$_completeWithValue", 2, 0, 235, 38, "_completeWithValue"],
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 245, 116, 246, 247, "_completeError"],
    _asyncComplete$1: [function(value) {
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
    }, "call$1", "get$_asyncComplete", 2, 0, 235, 38, "_asyncComplete"],
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE-,_Future__PENDING_COMPLETE-,_Future__CHAINED-,_Future__VALUE-,_Future__ERROR-", _Future$: [function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, null, null, 0, 0, 16, "new _Future"], _Future__chainForeignFuture: [function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, "call$2", "_Future__chainForeignFuture$closure", 4, 0, 232, 50, 109, "_chainForeignFuture"], _Future__chainCoreFuture: [function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, "call$2", "_Future__chainCoreFuture$closure", 4, 0, 233, 50, 109, "_chainCoreFuture"], _Future__propagateMultipleListeners: [function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, "call$2", "_Future__propagateMultipleListeners$closure", 4, 0, 233, 50, 234, "_propagateMultipleListeners"], _Future__propagateToListeners: [function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, sourceValue, t4, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (t2.get$_isComplete() !== true)
            return;
          hasError = t1.source_4.get$_hasError();
          t2 = hasError === true;
          if (t2 && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() === true ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t4 = !t2;
          if (!t4 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (t2 && t1.source_4.get$_zone().inSameErrorZone$1(zone) !== true) {
              asyncError = t1.source_4.get$_error();
              t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t4) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }, "call$2", "_Future__propagateToListeners$closure", 4, 0, 233, 50, 234, "_propagateToListeners"]}
  },
  "+_Future": 0,
  _Future__addListener_closure: {
    "^": "Closure:16;this_0-,listener_1-",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _Future__addListener_closure": 0,
  _Future__chainForeignFuture_closure: {
    "^": "Closure:0;target_0-",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, 0, 38, "call"],
    $isFunction: true
  },
  "+ _Future__chainForeignFuture_closure": 0,
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:734;target_1-",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, 734, 116, 246, 247, "call"],
    $isFunction: true
  },
  "+ _Future__chainForeignFuture_closure0": 0,
  _Future__asyncComplete_closure0: {
    "^": "Closure:16;this_0-,coreFuture_1-",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _Future__asyncComplete_closure0": 0,
  _Future__asyncComplete_closure: {
    "^": "Closure:16;this_2-,value_3-",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _Future__asyncComplete_closure": 0,
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:346;box_1-,listener_3-,sourceValue_4-,zone_5-",
    call$0: [function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }, "call$0", null, 0, 0, 346, "call"],
    $isFunction: true
  },
  "+ _Future__propagateToListeners_handleValueCallback": 0,
  _Future__propagateToListeners_handleError: {
    "^": "Closure:137;box_2-,box_1-,listener_6-,zone_7-",
    call$0: [function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _Future__propagateToListeners_handleError": 0,
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:137;box_2-,box_1-,hasError_8-,listener_9-,zone_10-",
    call$0: [function() {
      var t1, e, s, exception, t2, t3;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t1.completeResult_0 = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8 === true) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _Future__propagateToListeners_handleWhenCompleteCallback": 0,
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:0;box_2-,listener_11-",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, 0, 735, "call"],
    $isFunction: true
  },
  "+ _Future__propagateToListeners_handleWhenCompleteCallback_closure": 0,
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:734;box_0-,listener_12-",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, 734, 116, 246, 247, "call"],
    $isFunction: true
  },
  "+ _Future__propagateToListeners_handleWhenCompleteCallback_closure0": 0,
  _AsyncCallbackEntry: {
    "^": "Object;callback-,next@-",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  "+_AsyncCallbackEntry": 0,
  Stream: {
    "^": "Object;",
    map$1: [function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Stream__dynamic__T", ret: P.Stream, args: [{func: "dynamic__T0", args: [T]}]};
      }, this.$receiver, "Stream");
    }, 736, "map"],
    forEach$1: [function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Future__void__T", ret: P.Future, args: [{func: "void__T2", void: true, args: [T]}]};
      }, this.$receiver, "Stream");
    }, 719, "forEach"],
    get$length: [function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }, null, null, 1, 0, 737, "length"],
    get$isEmpty: [function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    }, null, null, 1, 0, 738, "isEmpty"],
    toList$0: [function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    }, "call$0", "get$toList", 0, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Future_2", ret: [P.Future, [J.JSArray, T]]};
      }, this.$receiver, "Stream");
    }, "toList"],
    skip$1: [function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Stream__int", ret: [P.Stream, T], args: [J.JSInt]};
      }, this.$receiver, "Stream");
    }, 215, "skip"]
  },
  "+Stream": 0,
  Stream_forEach_closure: {
    "^": "Closure;box_0-,this_1-,action_2-,future_3-",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.$receiver, "Stream");
    }, 218, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  "+ Stream_forEach_closure": 0,
  Stream_forEach__closure: {
    "^": "Closure:16;action_4-,element_5-",
    call$0: [function() {
      return this.action_4.call$1(this.element_5);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ Stream_forEach__closure": 0,
  Stream_forEach__closure0: {
    "^": "Closure:0;",
    call$1: [function(_) {
    }, "call$1", null, 2, 0, 0, 538, "call"],
    $isFunction: true
  },
  "+ Stream_forEach__closure0": 0,
  Stream_forEach_closure0: {
    "^": "Closure:16;future_6-",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ Stream_forEach_closure0": 0,
  Stream_length_closure: {
    "^": "Closure:0;box_0-",
    call$1: [function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }, "call$1", null, 2, 0, 0, 538, "call"],
    $isFunction: true
  },
  "+ Stream_length_closure": 0,
  Stream_length_closure0: {
    "^": "Closure:16;box_0-,future_1-",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ Stream_length_closure0": 0,
  Stream_isEmpty_closure: {
    "^": "Closure:0;box_0-,future_1-",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, 0, 538, "call"],
    $isFunction: true
  },
  "+ Stream_isEmpty_closure": 0,
  Stream_isEmpty_closure0: {
    "^": "Closure:16;future_2-",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ Stream_isEmpty_closure0": 0,
  Stream_toList_closure: {
    "^": "Closure;this_0-,result_1-",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.$receiver, "Stream");
    }, 335, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  "+ Stream_toList_closure": 0,
  Stream_toList_closure0: {
    "^": "Closure:16;result_2-,future_3-",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ Stream_toList_closure0": 0,
  StreamSubscription: {
    "^": "Object;"
  },
  "+StreamSubscription": 0,
  StreamController: {
    "^": "Object;"
  },
  "+StreamController": 0,
  _StreamController: {
    "^": "Object;",
    get$isPaused: [function() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
    }, null, null, 1, 0, 346, "isPaused"],
    get$_pendingEvents: [function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    }, null, null, 1, 0, 739, "_pendingEvents"],
    _ensurePendingEvents$0: [function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      state.get$varData();
      return state.get$varData();
    }, "call$0", "get$_ensurePendingEvents", 0, 0, 740, "_ensurePendingEvents"],
    get$_subscription: [function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    }, null, null, 1, 0, 741, "_subscription"],
    _badEventState$0: [function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    }, "call$0", "get$_badEventState", 0, 0, 724, "_badEventState"],
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, H.setRuntimeTypeInfo(new P._DelayedData(value, null), [H.getRuntimeTypeArgument(this, "_StreamController", 0)]));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T3", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }, 38, "add"],
    _async$_add$1: [function(value) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, H.setRuntimeTypeInfo(new P._DelayedData(value, null), [H.getRuntimeTypeArgument(this, "_StreamController", 0)]));
    }, "call$1", "get$_async$_add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T3", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }, 38, "_add"],
    _addError$2: [function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
    }, "call$2", "get$_addError", 4, 0, 727, 246, 247, "_addError"],
    _subscribe$1: [function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    }, "call$1", "get$_subscribe", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__bool0", ret: [P.StreamSubscription, T], args: [J.JSBool]};
      }, this.$receiver, "_StreamController");
    }, 723, "_subscribe"],
    _recordCancel$1: [function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }, "call$1", "get$_recordCancel", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Future__StreamSubscription", ret: P.Future, args: [[P.StreamSubscription, T]]};
      }, this.$receiver, "_StreamController");
    }, 253, "_recordCancel"],
    _recordPause$1: [function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.pause$0(0);
      P._runGuarded(this.get$_onPause());
    }, "call$1", "get$_recordPause", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__StreamSubscription0", void: true, args: [[P.StreamSubscription, T]]};
      }, this.$receiver, "_StreamController");
    }, 253, "_recordPause"],
    _recordResume$1: [function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.resume$0();
      P._runGuarded(this.get$_onResume());
    }, "call$1", "get$_recordResume", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__StreamSubscription0", void: true, args: [[P.StreamSubscription, T]]};
      }, this.$receiver, "_StreamController");
    }, 253, "_recordResume"]
  },
  "+_StreamController": 0,
  _StreamController__subscribe_closure: {
    "^": "Closure:16;this_0-",
    call$0: [function() {
      P._runGuarded(this.this_0.get$_onListen());
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _StreamController__subscribe_closure": 0,
  _StreamController__recordCancel_complete: {
    "^": "Closure:137;this_0-",
    call$0: [function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _StreamController__recordCancel_complete": 0,
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: [function(data) {
      this.get$_subscription()._async$_add$1(data);
    }, "call$1", "get$_sendData", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T4", void: true, args: [T]};
      }, this.$receiver, "_SyncStreamControllerDispatch");
    }, 335, "_sendData"],
    _sendError$2: [function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    }, "call$2", "get$_sendError", 4, 0, 727, 246, 247, "_sendError"]
  },
  "+_SyncStreamControllerDispatch": 0,
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: [function(data) {
      this.get$_subscription()._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    }, "call$1", "get$_sendData", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T5", void: true, args: [T]};
      }, this.$receiver, "_AsyncStreamControllerDispatch");
    }, 335, "_sendData"],
    _sendError$2: [function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
    }, "call$2", "get$_sendError", 4, 0, 727, 246, 247, "_sendError"]
  },
  "+_AsyncStreamControllerDispatch": 0,
  _NoCallbacks: {
    "^": "Object;",
    get$_onListen: [function() {
      return;
    }, null, null, 1, 0, 742, "_onListen"],
    get$_onPause: [function() {
      return;
    }, null, null, 1, 0, 742, "_onPause"],
    get$_onResume: [function() {
      return;
    }, null, null, 1, 0, 742, "_onResume"],
    get$_onCancel: [function() {
      return;
    }, null, null, 1, 0, 742, "_onCancel"]
  },
  "+_NoCallbacks": 0,
  _NoCallbackAsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch+_NoCallbacks;_varData-,_state-,_doneFuture-"
  },
  "+_NoCallbackAsyncStreamController": 0,
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _NoCallbackSyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch+_NoCallbacks;_varData-,_state-,_doneFuture-"
  },
  "+_NoCallbackSyncStreamController": 0,
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _ControllerStream: {
    "^": "_StreamImpl;_controller-",
    _createSubscription$1: [function(cancelOnError) {
      return this._controller._subscribe$1(cancelOnError);
    }, "call$1", "get$_createSubscription", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__bool1", ret: [P.StreamSubscription, T], args: [J.JSBool]};
      }, this.$receiver, "_ControllerStream");
    }, 723, "_createSubscription"],
    get$hashCode: [function(_) {
      return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    }, null, null, 1, 0, 394, "hashCode"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._controller === this._controller;
    }, "call$1", "get$==", 2, 0, 422, 140, "=="],
    $is_ControllerStream: true
  },
  "+_ControllerStream": 0,
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_controller<-,_async$_onData-,_onError-,_onDone-,_zone-,_state-,_cancelFuture-,_pending-",
    _onCancel$0: [function() {
      return this.get$_controller()._recordCancel$1(this);
    }, "call$0", "get$_onCancel", 0, 0, 726, "_onCancel"],
    _onPause$0: [function() {
      this.get$_controller()._recordPause$1(this);
    }, "call$0", "get$_onPause", 0, 0, 137, "_onPause"],
    _onResume$0: [function() {
      this.get$_controller()._recordResume$1(this);
    }, "call$0", "get$_onResume", 0, 0, 137, "_onResume"]
  },
  "+_ControllerSubscription": 0,
  _EventSink: {
    "^": "Object;"
  },
  "+_EventSink": 0,
  _EventDispatch: {
    "^": "Object;"
  },
  "+_EventDispatch": 0,
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData-,_onError<-,_onDone-,_zone<-,_state-,_cancelFuture-,_pending-",
    _setPendingEvents$1: [function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    }, "call$1", "get$_setPendingEvents", 2, 0, 743, 744, "_setPendingEvents"],
    onData$1: [function(handleData) {
      this._async$_onData = this._zone.registerUnaryCallback$1(handleData);
    }, "call$1", "get$onData", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__void__T", void: true, args: [{func: "void__T6", void: true, args: [T]}]};
      }, this.$receiver, "_BufferingStreamSubscription");
    }, 745, "onData"],
    onError$1: [function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    }, "call$1", "get$onError", 2, 0, 746, 52, "onError"],
    onDone$1: [function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._onDone = this._zone.registerCallback$1(handleDone);
    }, "call$1", "get$onDone", 2, 0, 236, 747, "onDone"],
    pause$1: [function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    }, function($receiver) {
      return this.pause$1($receiver, null);
    }, "pause$0", "call$1", null, "get$pause", 0, 2, 748, 116, 749, "pause"],
    resume$0: [function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    }, "call$0", "get$resume", 0, 0, 137, "resume"],
    cancel$0: [function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    }, "call$0", "get$cancel", 0, 0, 726, "cancel"],
    get$_isInputPaused: [function() {
      return (this._state & 4) !== 0;
    }, null, null, 1, 0, 346, "_isInputPaused"],
    get$isPaused: [function() {
      return this._state >= 128;
    }, null, null, 1, 0, 346, "isPaused"],
    _cancel$0: [function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    }, "call$0", "get$_cancel", 0, 0, 137, "_cancel"],
    _async$_add$1: [function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    }, "call$1", "get$_async$_add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T6", void: true, args: [T]};
      }, this.$receiver, "_BufferingStreamSubscription");
    }, 335, "_add"],
    _addError$2: [function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    }, "call$2", "get$_addError", 4, 0, 727, 246, 247, "_addError"],
    _close$0: [function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    }, "call$0", "get$_close", 0, 0, 137, "_close"],
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 137, "_onPause"],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 137, "_onResume"],
    _onCancel$0: [function() {
    }, "call$0", "get$_onCancel", 0, 0, 726, "_onCancel"],
    _addPending$1: [function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    }, "call$1", "get$_addPending", 2, 0, 750, 751, "_addPending"],
    _sendData$1: [function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    }, "call$1", "get$_sendData", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T6", void: true, args: [T]};
      }, this.$receiver, "_BufferingStreamSubscription");
    }, 335, "_sendData"],
    _sendError$2: [function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    }, "call$2", "get$_sendError", 4, 0, 752, 246, 247, "_sendError"],
    _sendDone$0: [function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    }, "call$0", "get$_sendDone", 0, 0, 137, "_sendDone"],
    _guardCallback$1: [function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    }, "call$1", "get$_guardCallback", 2, 0, 235, 34, "_guardCallback"],
    _checkState$1: [function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    }, "call$1", "get$_checkState", 2, 0, 658, 753, "_checkState"],
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR-,_BufferingStreamSubscription__STATE_CLOSED-,_BufferingStreamSubscription__STATE_INPUT_PAUSED-,_BufferingStreamSubscription__STATE_CANCELED-,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL-,_BufferingStreamSubscription__STATE_IN_CALLBACK-,_BufferingStreamSubscription__STATE_HAS_PENDING-,_BufferingStreamSubscription__STATE_PAUSE_COUNT-,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT-"}
  },
  "+_BufferingStreamSubscription": 0,
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:137;this_0-,error_1-,stackTrace_2-",
    call$0: [function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      if (t2.inSameErrorZone$1($.Zone__current) !== true)
        $.Zone__current.handleUncaughtError$2(this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _BufferingStreamSubscription__sendError_sendError": 0,
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:137;this_0-",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, 137, "call"],
    $isFunction: true
  },
  "+ _BufferingStreamSubscription__sendDone_sendDone": 0,
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: [function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    }, function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }, "listen$1", function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }, "listen$3$onDone$onError", "call$4$cancelOnError$onDone$onError", null, null, "get$listen", 2, 7, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__void__T__bool_void__Function", ret: [P.StreamSubscription, T], args: [{func: "void__T7", void: true, args: [T]}], named: {cancelOnError: J.JSBool, onDone: {func: "void_", void: true}, onError: P.Function}};
      }, this.$receiver, "_StreamImpl");
    }, 116, 116, 116, 754, 251, 755, 723, "listen"],
    _createSubscription$1: [function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }, "call$1", "get$_createSubscription", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "_BufferingStreamSubscription__bool", ret: [P._BufferingStreamSubscription, T], args: [J.JSBool]};
      }, this.$receiver, "_StreamImpl");
    }, 723, "_createSubscription"]
  },
  "+_StreamImpl": 0,
  _DelayedEvent: {
    "^": "Object;next@-"
  },
  "+_DelayedEvent": 0,
  _DelayedData: {
    "^": "_DelayedEvent;value>-,next-",
    perform$1: [function(dispatch) {
      dispatch._sendData$1(this.value);
    }, "call$1", "get$perform", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void___EventDispatch", void: true, args: [[P._EventDispatch, T]]};
      }, this.$receiver, "_DelayedData");
    }, 756, "perform"]
  },
  "+_DelayedData": 0,
  _DelayedError: {
    "^": "_DelayedEvent;error>-,stackTrace<-,next-",
    perform$1: [function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }, "call$1", "get$perform", 2, 0, 757, 756, "perform"]
  },
  "+_DelayedError": 0,
  _DelayedDone: {
    "^": "Object;",
    perform$1: [function(dispatch) {
      dispatch._sendDone$0();
    }, "call$1", "get$perform", 2, 0, 757, 756, "perform"],
    get$next: [function() {
      return;
    }, null, null, 1, 0, 758, "next"],
    set$next: [function(_) {
      throw H.wrapException(new P.StateError("No events after a done."));
    }, null, null, 3, 0, 750, 538, "next"]
  },
  "+_DelayedDone": 0,
  _PendingEvents: {
    "^": "Object;",
    schedule$1: [function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    }, "call$1", "get$schedule", 2, 0, 757, 756, "schedule"],
    cancelSchedule$0: [function() {
      if (this._state === 1)
        this._state = 3;
    }, "call$0", "get$cancelSchedule", 0, 0, 137, "cancelSchedule"]
  },
  "+_PendingEvents": 0,
  _PendingEvents_schedule_closure: {
    "^": "Closure:16;this_0-,dispatch_1-",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _PendingEvents_schedule_closure": 0,
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent-,lastPendingEvent-,_state-",
    get$isEmpty: [function(_) {
      return this.lastPendingEvent == null;
    }, null, null, 1, 0, 346, "isEmpty"],
    add$1: [function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    }, "call$1", "get$add", 2, 0, 750, 751, "add"],
    handleNext$1: [function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }, "call$1", "get$handleNext", 2, 0, 757, 756, "handleNext"],
    clear$0: [function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }, "call$0", "get$clear", 0, 0, 137, "clear"]
  },
  "+_StreamImplEvents": 0,
  _cancelAndError_closure: {
    "^": "Closure:16;future_0-,error_1-,stackTrace_2-",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _cancelAndError_closure": 0,
  _cancelAndErrorClosure_closure: {
    "^": "Closure:759;subscription_0-,future_1-",
    call$2: [function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }, "call$2", null, 4, 0, 759, 246, 247, "call"],
    $isFunction: true
  },
  "+ _cancelAndErrorClosure_closure": 0,
  _cancelAndValue_closure: {
    "^": "Closure:16;future_0-,value_1-",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _cancelAndValue_closure": 0,
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: [function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    }, function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }, "listen$1", function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }, "listen$3$onDone$onError", "call$4$cancelOnError$onDone$onError", null, null, "get$listen", 2, 7, function() {
      return H.computeSignature(function(S, T) {
        return {func: "StreamSubscription__void__T__bool_void__Function0", ret: [P.StreamSubscription, T], args: [{func: "void__T8", void: true, args: [T]}], named: {cancelOnError: J.JSBool, onDone: {func: "void_", void: true}, onError: P.Function}};
      }, this.$receiver, "_ForwardingStream");
    }, 116, 116, 116, 754, 251, 755, 723, "listen"],
    _handleData$2: [function(data, sink) {
      sink._async$_add$1(data);
    }, "call$2", "get$_handleData", 4, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S__EventSink", void: true, args: [S, [P._EventSink, T]]};
      }, this.$receiver, "_ForwardingStream");
    }, 335, 760, "_handleData"],
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  "+_ForwardingStream": 0,
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream-,_subscription-,_async$_onData-,_onError-,_onDone-,_zone-,_state-,_cancelFuture-,_pending-",
    _async$_add$1: [function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    }, "call$1", "get$_async$_add", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__T9", void: true, args: [T]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 335, "_add"],
    _addError$2: [function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    }, "call$2", "get$_addError", 4, 0, 727, 246, 247, "_addError"],
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 137, "_onPause"],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 137, "_onResume"],
    _onCancel$0: [function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    }, "call$0", "get$_onCancel", 0, 0, 726, "_onCancel"],
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 335, "_handleData"],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 752, 246, 247, "_handleError"],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 137, "_handleDone"],
    _ForwardingStreamSubscription$2: [function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    }, null, null, 4, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "dynamic___ForwardingStream_bool", args: [[P._ForwardingStream, S, T], J.JSBool]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 761, 723, ""],
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  "+_ForwardingStreamSubscription": 0,
  _MapStream: {
    "^": "_ForwardingStream;_transform-,_async$_source-",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: [function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      sink._async$_add$1(outputEvent);
    }, "call$2", "get$_handleData", 4, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S__EventSink0", void: true, args: [S, [P._EventSink, T]]};
      }, this.$receiver, "_MapStream");
    }, 762, 760, "_handleData"]
  },
  "+_MapStream": 0,
  _SkipStream: {
    "^": "_ForwardingStream;_remaining-,_async$_source-",
    _handleData$2: [function(inputEvent, sink) {
      var t1 = this._remaining;
      if (t1 > 0) {
        this._remaining = t1 - 1;
        return;
      }
      sink._async$_add$1(inputEvent);
    }, "call$2", "get$_handleData", 4, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T__EventSink", void: true, args: [T, [P._EventSink, T]]};
      }, this.$receiver, "_SkipStream");
    }, 762, 760, "_handleData"],
    _SkipStream$2: [function(source, count, $T) {
    }, null, null, 4, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__Stream_int", args: [[P.Stream, T], J.JSInt]};
      }, this.$receiver, "_SkipStream");
    }, 50, 215, ""],
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  "+_SkipStream": 0,
  Timer: {
    "^": "Object;"
  },
  "+Timer": 0,
  ZoneDelegate: {
    "^": "Object;"
  },
  "+ZoneDelegate": 0,
  Zone: {
    "^": "Object;"
  },
  "+Zone": 0,
  _BaseZone: {
    "^": "Object;",
    inSameErrorZone$1: [function(otherZone) {
      return this.get$_errorZone() === otherZone.get$_errorZone();
    }, "call$1", "get$inSameErrorZone", 2, 0, 763, 764, "inSameErrorZone"],
    runGuarded$1: [function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    }, "call$1", "get$runGuarded", 2, 0, 765, 203, "runGuarded"],
    runUnaryGuarded$2: [function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    }, "call$2", "get$runUnaryGuarded", 4, 0, 766, 203, 265, "runUnaryGuarded"],
    runBinaryGuarded$3: [function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    }, "call$3", "get$runBinaryGuarded", 6, 0, 767, 203, 78, 79, "runBinaryGuarded"],
    bindCallback$2$runGuarded: [function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    }, function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    }, "bindCallback$1", "call$2$runGuarded", null, "get$bindCallback", 2, 3, 768, 316, 203, 769, "bindCallback"],
    bindUnaryCallback$2$runGuarded: [function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    }, "call$2$runGuarded", "get$bindUnaryCallback", 2, 3, 770, 316, 203, 769, "bindUnaryCallback"]
  },
  "+_BaseZone": 0,
  _BaseZone_bindCallback_closure: {
    "^": "Closure:16;this_0-,registered_1-",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _BaseZone_bindCallback_closure": 0,
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:16;this_2-,registered_3-",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _BaseZone_bindCallback_closure0": 0,
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:0;this_0-,registered_1-",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }, "call$1", null, 2, 0, 0, 265, "call"],
    $isFunction: true
  },
  "+ _BaseZone_bindUnaryCallback_closure": 0,
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:0;this_2-,registered_3-",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }, "call$1", null, 2, 0, 0, 265, "call"],
    $isFunction: true
  },
  "+ _BaseZone_bindUnaryCallback_closure0": 0,
  _rootHandleUncaughtError_closure: {
    "^": "Closure:16;error_0-,stackTrace_1-",
    call$0: [function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _rootHandleUncaughtError_closure": 0,
  _rootHandleUncaughtError__closure: {
    "^": "Closure:16;error_2-,stackTrace_3-",
    call$0: [function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _rootHandleUncaughtError__closure": 0,
  _RootZone: {
    "^": "_BaseZone;",
    get$_errorZone: [function() {
      return this;
    }, null, null, 1, 0, 771, "_errorZone"],
    inSameErrorZone$1: [function(otherZone) {
      return J.$eq(otherZone.get$_errorZone(), this);
    }, "call$1", "get$inSameErrorZone", 2, 0, 763, 764, "inSameErrorZone"],
    $index: [function(_, key) {
      return;
    }, "call$1", "get$[]", 2, 0, 111, 60, "[]"],
    handleUncaughtError$2: [function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    }, "call$2", "get$handleUncaughtError", 4, 0, 759, 246, 247, "handleUncaughtError"],
    run$1: [function(f) {
      return P._rootRun(this, null, this, f);
    }, "call$1", "get$run", 2, 0, 765, 203, "run"],
    runUnary$2: [function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    }, "call$2", "get$runUnary", 4, 0, 766, 203, 265, "runUnary"],
    runBinary$3: [function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    }, "call$3", "get$runBinary", 6, 0, 767, 203, 78, 79, "runBinary"],
    registerCallback$1: [function(f) {
      return f;
    }, "call$1", "get$registerCallback", 2, 0, 772, 203, "registerCallback"],
    registerUnaryCallback$1: [function(f) {
      return f;
    }, "call$1", "get$registerUnaryCallback", 2, 0, 773, 203, "registerUnaryCallback"],
    registerBinaryCallback$1: [function(f) {
      return f;
    }, "call$1", "get$registerBinaryCallback", 2, 0, 774, 203, "registerBinaryCallback"],
    scheduleMicrotask$1: [function(f) {
      P._scheduleAsyncCallback(C.C__RootZone !== this ? this.bindCallback$1(f) : f);
    }, "call$1", "get$scheduleMicrotask", 2, 0, 236, 203, "scheduleMicrotask"],
    createTimer$2: [function(duration, f) {
      return P._createTimer(duration, C.C__RootZone !== this ? this.bindCallback$1(f) : f);
    }, "call$2", "get$createTimer", 4, 0, 257, 258, 203, "createTimer"]
  },
  "+_RootZone": 0
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 35, 217, 268, "_defaultEquals"],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 47, 217, "_defaultHashCode"],
  HashMap_HashMap: [function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  }, "call$3$equals$hashCode$isValidKey", null, 0, 7, function() {
    return H.computeSignature(function(K, V) {
      return {func: "HashMap___bool__K_K_int__K_bool__dynamic", ret: [P.HashMap, K, V], named: {equals: {func: "bool__K_K", ret: J.JSBool, args: [K, K]}, hashCode: {func: "int__K", ret: J.JSInt, args: [K]}, isValidKey: {func: "bool__dynamic", ret: J.JSBool, args: [null]}}};
    }, this.$receiver, "HashMap");
  }, 116, 116, 116, 269, 270, 271, "new HashMap"],
  HashMap_HashMap$identity: [function($K, $V) {
    return H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [$K, $V]);
  }, "call$0", null, 0, 0, function() {
    return H.computeSignature(function(K, V) {
      return {func: "HashMap_", ret: [P.HashMap, K, V]};
    }, this.$receiver, "HashMap");
  }, "new HashMap$identity"],
  HashSet_HashSet$identity: [function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  }, "call$0", null, 0, 0, function() {
    return H.computeSignature(function(E) {
      return {func: "HashSet_", ret: [P.HashSet, E]};
    }, this.$receiver, "HashSet");
  }, "new HashSet$identity"],
  _iterableToString: [function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  }, "call$1", "_iterableToString$closure", 2, 0, 272, 199, "_iterableToString"],
  _iterablePartsToStrings: [function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  }, "call$2", "_iterablePartsToStrings$closure", 4, 0, 273, 199, 274, "_iterablePartsToStrings"],
  LinkedHashMap_LinkedHashMap: [function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  }, "call$3$equals$hashCode$isValidKey", null, 0, 7, function() {
    return H.computeSignature(function(K, V) {
      return {func: "LinkedHashMap___bool__K_K_int__K_bool__dynamic", ret: [P.LinkedHashMap, K, V], named: {equals: {func: "bool__K_K0", ret: J.JSBool, args: [K, K]}, hashCode: {func: "int__K0", ret: J.JSInt, args: [K]}, isValidKey: {func: "bool__dynamic", ret: J.JSBool, args: [null]}}};
    }, this.$receiver, "LinkedHashMap");
  }, 116, 116, 116, 269, 270, 271, "new LinkedHashMap"],
  LinkedHashSet_LinkedHashSet: [function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  }, "call$3$equals$hashCode$isValidKey", null, 0, 7, function() {
    return H.computeSignature(function(E) {
      return {func: "LinkedHashSet___bool__E_E_int__E_bool__dynamic", ret: [P.LinkedHashSet, E], named: {equals: {func: "bool__E_E", ret: J.JSBool, args: [E, E]}, hashCode: {func: "int__E", ret: J.JSInt, args: [E]}, isValidKey: {func: "bool__dynamic", ret: J.JSBool, args: [null]}}};
    }, this.$receiver, "LinkedHashSet");
  }, 116, 116, 116, 269, 270, 271, "new LinkedHashSet"],
  Maps_mapToString: [function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  }, "call$1", "Maps_mapToString$closure", 2, 0, 275, 276, "mapToString"],
  _HashMap: {
    "^": "Object;_collection$_length-,_strings-,_nums-,_rest-,_keys-",
    get$length: [function(_) {
      return this._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this._collection$_length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    get$keys: [function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_", ret: [P.Iterable, K]};
      }, this.$receiver, "_HashMap");
    }, "keys"],
    get$values: [function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_0", ret: [P.Iterable, V]};
      }, this.$receiver, "_HashMap");
    }, "values"],
    containsKey$1: [function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    }, "call$1", "get$containsKey", 2, 0, 422, 60, "containsKey"],
    $index: [function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object", ret: V, args: [P.Object]};
      }, this.$receiver, "_HashMap");
    }, 60, "[]"],
    $indexSet: [function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__K_V", void: true, args: [K, V]};
      }, this.$receiver, "_HashMap");
    }, 60, 38, "[]="],
    remove$1: [function(_, key) {
      var rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return bucket.splice(index, 2)[1];
      }
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object", ret: V, args: [P.Object]};
      }, this.$receiver, "_HashMap");
    }, 60, "remove"],
    clear$0: [function(_) {
      if (this._collection$_length > 0) {
        this._keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    forEach$1: [function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__void__K_V", void: true, args: [{func: "void__K_V", void: true, args: [K, V]}]};
      }, this.$receiver, "_HashMap");
    }, 719, "forEach"],
    _computeKeys$0: [function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    }, "call$0", "get$_computeKeys", 0, 0, 471, "_computeKeys"],
    _addHashTableEntry$3: [function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    }, "call$3", "get$_addHashTableEntry", 6, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__dynamic_K_V", void: true, args: [null, K, V]};
      }, this.$receiver, "_HashMap");
    }, 267, 60, 38, "_addHashTableEntry"],
    _removeHashTableEntry$2: [function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return value;
      } else
        return;
    }, "call$2", "get$_removeHashTableEntry", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__dynamic_Object", ret: V, args: [null, P.Object]};
      }, this.$receiver, "_HashMap");
    }, 267, 60, "_removeHashTableEntry"],
    _computeHashCode$1: [function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 60, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 60, "_findBucketIndex"],
    $isMap: true,
    static: {_HashMap__getTableEntry: [function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, "call$2", "_HashMap__getTableEntry$closure", 4, 0, 59, 267, 60, "_getTableEntry"], _HashMap__setTableEntry: [function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, "call$3", "_HashMap__setTableEntry$closure", 6, 0, 61, 267, 60, 38, "_setTableEntry"], _HashMap__newHashTable: [function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }, "call$0", "_HashMap__newHashTable$closure", 0, 0, 16, "_newHashTable"]}
  },
  "+_HashMap": 0,
  _HashMap_values_closure: {
    "^": "Closure:0;this_0-",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, 0, 777, "call"],
    $isFunction: true
  },
  "+ _HashMap_values_closure": 0,
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length-,_strings-,_nums-,_rest-,_keys-",
    _computeHashCode$1: [function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 60, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 60, "_findBucketIndex"]
  },
  "+_IdentityHashMap": 0,
  HashMapKeyIterable: {
    "^": "IterableBase;_map-",
    get$length: [function(_) {
      return this._map._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._map._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$iterator: [function(_) {
      var t1 = this._map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_4", ret: [P.Iterator, E]};
      }, this.$receiver, "HashMapKeyIterable");
    }, "iterator"],
    forEach$1: [function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E1", void: true, args: [{func: "void__E2", void: true, args: [E]}]};
      }, this.$receiver, "HashMapKeyIterable");
    }, 203, "forEach"],
    $isEfficientLength: true
  },
  "+HashMapKeyIterable": 0,
  HashMapKeyIterator: {
    "^": "Object;_map-,_keys-,_offset-,_collection$_current-",
    get$current: [function() {
      return this._collection$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_2", ret: E};
      }, this.$receiver, "HashMapKeyIterator");
    }, "current"],
    moveNext$0: [function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+HashMapKeyIterator": 0,
  _LinkedHashMap: {
    "^": "Object;_collection$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
    get$length: [function(_) {
      return this._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this._collection$_length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    get$keys: [function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_1", ret: [P.Iterable, K]};
      }, this.$receiver, "_LinkedHashMap");
    }, "keys"],
    get$values: [function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_2", ret: [P.Iterable, V]};
      }, this.$receiver, "_LinkedHashMap");
    }, "values"],
    containsKey$1: [function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    }, "call$1", "get$containsKey", 2, 0, 422, 60, "containsKey"],
    $index: [function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_collection$_value();
      }
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object0", ret: V, args: [P.Object]};
      }, this.$receiver, "_LinkedHashMap");
    }, 60, "[]"],
    $indexSet: [function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_collection$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__K_V0", void: true, args: [K, V]};
      }, this.$receiver, "_LinkedHashMap");
    }, 60, 38, "[]="],
    remove$1: [function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_collection$_value();
      }
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object0", ret: V, args: [P.Object]};
      }, this.$receiver, "_LinkedHashMap");
    }, 60, "remove"],
    clear$0: [function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    forEach$1: [function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_collection$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__void__K_V0", void: true, args: [{func: "void__K_V0", void: true, args: [K, V]}]};
      }, this.$receiver, "_LinkedHashMap");
    }, 719, "forEach"],
    _addHashTableEntry$3: [function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    }, "call$3", "get$_addHashTableEntry", 6, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__dynamic_K_V0", void: true, args: [null, K, V]};
      }, this.$receiver, "_LinkedHashMap");
    }, 267, 60, 38, "_addHashTableEntry"],
    _removeHashTableEntry$2: [function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    }, "call$2", "get$_removeHashTableEntry", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__dynamic_Object0", ret: V, args: [null, P.Object]};
      }, this.$receiver, "_LinkedHashMap");
    }, 267, 60, "_removeHashTableEntry"],
    _newLinkedCell$2: [function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    }, "call$2", "get$_newLinkedCell", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "LinkedHashMapCell__K_V", ret: P.LinkedHashMapCell, args: [K, V]};
      }, this.$receiver, "_LinkedHashMap");
    }, 60, 38, "_newLinkedCell"],
    _unlinkCell$1: [function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    }, "call$1", "get$_unlinkCell", 2, 0, 778, 779, "_unlinkCell"],
    _computeHashCode$1: [function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 60, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 60, "_findBucketIndex"],
    toString$0: [function(_) {
      return P.Maps_mapToString(this);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: [function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }, "call$0", "_LinkedHashMap__newHashTable$closure", 0, 0, 16, "_newHashTable"]}
  },
  "+_LinkedHashMap": 0,
  _LinkedHashMap_values_closure: {
    "^": "Closure:0;this_0-",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, 0, 777, "call"],
    $isFunction: true
  },
  "+ _LinkedHashMap_values_closure": 0,
  LinkedHashMapCell: {
    "^": "Object;_key<-,_collection$_value@-,_next@-,_previous@-"
  },
  "+LinkedHashMapCell": 0,
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map-",
    get$length: [function(_) {
      return this._map._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._map._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$iterator: [function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._cell = t1._first;
      return t2;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_5", ret: [P.Iterator, E]};
      }, this.$receiver, "LinkedHashMapKeyIterable");
    }, "iterator"],
    forEach$1: [function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E2", void: true, args: [{func: "void__E3", void: true, args: [E]}]};
      }, this.$receiver, "LinkedHashMapKeyIterable");
    }, 203, "forEach"],
    $isEfficientLength: true
  },
  "+LinkedHashMapKeyIterable": 0,
  LinkedHashMapKeyIterator: {
    "^": "Object;_map-,_modifications-,_cell-,_collection$_current-",
    get$current: [function() {
      return this._collection$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_3", ret: E};
      }, this.$receiver, "LinkedHashMapKeyIterator");
    }, "current"],
    moveNext$0: [function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+LinkedHashMapKeyIterator": 0,
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: [function(_) {
      var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_6", ret: [P.Iterator, E]};
      }, this.$receiver, "_HashSet");
    }, "iterator"],
    get$length: [function(_) {
      return this._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this._collection$_length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    contains$1: [function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    }, "call$1", "get$contains", 2, 0, 422, 1, "contains"],
    lookup$1: [function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    }, "call$1", "get$lookup", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__Object", ret: E, args: [P.Object]};
      }, this.$receiver, "_HashSet");
    }, 1, "lookup"],
    add$1: [function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        this._collection$_length = this._collection$_length + 1;
        this._elements = null;
        return true;
      }
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "bool__E", ret: J.JSBool, args: [E]};
      }, this.$receiver, "_HashSet");
    }, 218, "add"],
    remove$1: [function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        bucket.splice(index, 1);
        return true;
      }
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    clear$0: [function(_) {
      if (this._collection$_length > 0) {
        this._elements = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    _computeElements$0: [function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    }, "call$0", "get$_computeElements", 0, 0, 471, "_computeElements"],
    _addHashTableEntry$2: [function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }, "call$2", "get$_addHashTableEntry", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "bool__dynamic_E", ret: J.JSBool, args: [null, E]};
      }, this.$receiver, "_HashSet");
    }, 267, 218, "_addHashTableEntry"],
    _removeHashTableEntry$2: [function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        return true;
      } else
        return false;
    }, "call$2", "get$_removeHashTableEntry", 4, 0, 780, 267, 218, "_removeHashTableEntry"],
    _computeHashCode$1: [function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 218, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 218, "_findBucketIndex"],
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+_HashSet": 0,
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length-,_strings-,_nums-,_rest-,_elements-",
    _computeHashCode$1: [function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 60, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 218, "_findBucketIndex"]
  },
  "+_IdentityHashSet": 0,
  HashSetIterator: {
    "^": "Object;_set-,_elements-,_offset-,_collection$_current-",
    get$current: [function() {
      return this._collection$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_4", ret: E};
      }, this.$receiver, "HashSetIterator");
    }, "current"],
    moveNext$0: [function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+HashSetIterator": 0,
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length-,_strings-,_nums-,_rest-,_first-,_last-,_modifications-",
    get$iterator: [function(_) {
      var t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(this, this._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_7", ret: [P.Iterator, E]};
      }, this.$receiver, "_LinkedHashSet");
    }, "iterator"],
    get$length: [function(_) {
      return this._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this._collection$_length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    contains$1: [function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    }, "call$1", "get$contains", 2, 0, 422, 1, "contains"],
    lookup$1: [function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_collection$_element();
      }
    }, "call$1", "get$lookup", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__Object0", ret: E, args: [P.Object]};
      }, this.$receiver, "_LinkedHashSet");
    }, 1, "lookup"],
    forEach$1: [function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E3", void: true, args: [{func: "void__E4", void: true, args: [E]}]};
      }, this.$receiver, "_LinkedHashSet");
    }, 719, "forEach"],
    add$1: [function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "bool__E0", ret: J.JSBool, args: [E]};
      }, this.$receiver, "_LinkedHashSet");
    }, 218, "add"],
    addAll$1: [function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0() === true;)
        this.add$1(0, t1.get$current());
    }, "call$1", "get$addAll", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__Iterable1", void: true, args: [[P.Iterable, E]]};
      }, this.$receiver, "_LinkedHashSet");
    }, 781, "addAll"],
    remove$1: [function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      }
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    clear$0: [function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    _addHashTableEntry$2: [function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    }, "call$2", "get$_addHashTableEntry", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "bool__dynamic_E0", ret: J.JSBool, args: [null, E]};
      }, this.$receiver, "_LinkedHashSet");
    }, 267, 218, "_addHashTableEntry"],
    _removeHashTableEntry$2: [function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    }, "call$2", "get$_removeHashTableEntry", 4, 0, 780, 267, 218, "_removeHashTableEntry"],
    _newLinkedCell$1: [function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    }, "call$1", "get$_newLinkedCell", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "LinkedHashSetCell__E", ret: P.LinkedHashSetCell, args: [E]};
      }, this.$receiver, "_LinkedHashSet");
    }, 218, "_newLinkedCell"],
    _unlinkCell$1: [function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    }, "call$1", "get$_unlinkCell", 2, 0, 782, 779, "_unlinkCell"],
    _computeHashCode$1: [function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    }, "call$1", "get$_computeHashCode", 2, 0, 47, 218, "_computeHashCode"],
    _findBucketIndex$2: [function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    }, "call$2", "get$_findBucketIndex", 4, 0, 775, 776, 218, "_findBucketIndex"],
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+_LinkedHashSet": 0,
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<-,_next@-,_previous@-"
  },
  "+LinkedHashSetCell": 0,
  LinkedHashSetIterator: {
    "^": "Object;_set-,_modifications-,_cell-,_collection$_current-",
    get$current: [function() {
      return this._collection$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_5", ret: E};
      }, this.$receiver, "LinkedHashSetIterator");
    }, "current"],
    moveNext$0: [function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+LinkedHashSetIterator": 0,
  HashMap: {
    "^": "Object;",
    $isMap: true
  },
  "+HashMap": 0,
  _HashSetBase: {
    "^": "IterableBase;",
    toList$1$growable: [function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getTypeArgumentByIndex(this, 0)]);
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool1", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "_HashSetBase");
    }, 316, 317, "toList"],
    toString$0: [function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+_HashSetBase": 0,
  HashSet: {
    "^": "Object;",
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+HashSet": 0,
  IterableBase: {
    "^": "Object;",
    map$1: [function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E1", ret: P.Iterable, args: [{func: "dynamic__E1", args: [E]}]};
      }, this.$receiver, "IterableBase");
    }, 203, "map"],
    forEach$1: [function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E4", void: true, args: [{func: "void__E5", void: true, args: [E]}]};
      }, this.$receiver, "IterableBase");
    }, 203, "forEach"],
    join$1: [function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "")
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        } while (iterator.moveNext$0());
      else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer._contents = buffer._contents + separator;
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        }
      }
      return buffer._contents;
    }, "call$1", "get$join", 0, 2, 783, 312, 784, "join"],
    toList$1$growable: [function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool2", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "IterableBase");
    }, 316, 317, "toList"],
    get$length: [function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return !this.get$iterator(this).moveNext$0();
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return !this.get$isEmpty(this);
    }, null, null, 1, 0, 346, "isNotEmpty"],
    skip$1: [function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int3", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "IterableBase");
    }, 293, "skip"],
    elementAt$1: [function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    }, "call$1", "get$elementAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int2", ret: E, args: [J.JSInt]};
      }, this.$receiver, "IterableBase");
    }, 12, "elementAt"],
    toString$0: [function(_) {
      return P._iterableToString(this);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isIterable: true,
    $asIterable: null
  },
  "+IterableBase": 0,
  LinkedHashMap: {
    "^": "Object;",
    $isMap: true
  },
  "+LinkedHashMap": 0,
  LinkedHashSet: {
    "^": "Object;",
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+LinkedHashSet": 0,
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+ListBase": 0,
  ListMixin: {
    "^": "Object;",
    get$iterator: [function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_8", ret: [P.Iterator, E]};
      }, this.$receiver, "ListMixin");
    }, "iterator"],
    elementAt$1: [function(receiver, index) {
      return this.$index(receiver, index);
    }, "call$1", "get$elementAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int3", ret: E, args: [J.JSInt]};
      }, this.$receiver, "ListMixin");
    }, 12, "elementAt"],
    forEach$1: [function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E5", void: true, args: [{func: "void__E6", void: true, args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 719, "forEach"],
    get$isEmpty: [function(receiver) {
      return J.$eq(this.get$length(receiver), 0);
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(receiver) {
      return !this.get$isEmpty(receiver);
    }, null, null, 1, 0, 346, "isNotEmpty"],
    where$1: [function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }, "call$1", "get$where", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__bool__E", ret: [P.Iterable, E], args: [{func: "bool__E1", ret: J.JSBool, args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 785, "where"],
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E2", ret: P.Iterable, args: [{func: "dynamic__E2", args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 203, "map"],
    skip$1: [function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    }, "call$1", "get$skip", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__int4", ret: [P.Iterable, E], args: [J.JSInt]};
      }, this.$receiver, "ListMixin");
    }, 215, "skip"],
    toList$1$growable: [function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        result = H.setRuntimeTypeInfo(Array(t1), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool3", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "ListMixin");
    }, 316, 317, "toList"],
    add$1: [function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, J.$add$ns(t1, 1));
      this.$indexSet(receiver, t1, element);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E6", void: true, args: [E]};
      }, this.$receiver, "ListMixin");
    }, 218, "add"],
    remove$1: [function(receiver, element) {
      var i, t1;
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
          this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
          return true;
        }
        ++i;
      }
      return false;
    }, "call$1", "get$remove", 2, 0, 422, 218, "remove"],
    clear$0: [function(receiver) {
      this.set$length(receiver, 0);
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    setRange$4: [function(receiver, start, end, iterable, skipCount) {
      var t1, t2, $length, t3, t4, i;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true)
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      t2 = J.getInterceptor$n(end);
      if (t2.$lt(end, start) === true || t2.$gt(end, this.get$length(receiver)) === true)
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = t2.$sub(end, start);
      t2 = J.getInterceptor($length);
      if (t2.$eq($length, 0))
        return;
      t3 = J.getInterceptor$n(skipCount);
      if (t3.$lt(skipCount, 0) === true)
        throw H.wrapException(new P.ArgumentError(skipCount));
      t4 = J.getInterceptor$asx(iterable);
      if (J.$gt$n(t3.$add(skipCount, $length), t4.get$length(iterable)) === true)
        throw H.wrapException(new P.StateError("Not enough elements"));
      if (t3.$lt(skipCount, start) === true)
        for (i = t2.$sub($length, 1); t2 = J.getInterceptor$n(i), t2.$ge(i, 0) === true; i = t2.$sub(i, 1))
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(iterable, t3.$add(skipCount, i)));
      else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i)
          this.$indexSet(receiver, t1.$add(start, i), t4.$index(iterable, t3.$add(skipCount, i)));
      }
    }, "call$4", "get$setRange", 6, 2, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_int_Iterable__int", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, E]], opt: [J.JSInt]};
      }, this.$receiver, "ListMixin");
    }, 295, 208, 209, 199, 200, "setRange"],
    indexOf$2: [function(receiver, element, startIndex) {
      var t1, i;
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (startIndex >= t1)
        return -1;
      i = startIndex;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(receiver, i), element))
          return i;
        ++i;
      }
      return -1;
    }, function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    }, "indexOf$1", "call$2", null, "get$indexOf", 2, 2, 424, 295, 218, 121, "indexOf"],
    insert$2: [function(receiver, index, element) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = index > t1;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(receiver)));
      if (index === this.get$length(receiver)) {
        this.add$1(receiver, element);
        return;
      }
      this.set$length(receiver, J.$add$ns(this.get$length(receiver), 1));
      this.setRange$4(receiver, index + 1, this.get$length(receiver), receiver, index);
      this.$indexSet(receiver, index, element);
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E1", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "ListMixin");
    }, 12, 218, "insert"],
    removeAt$1: [function(receiver, index) {
      var result = this.$index(receiver, index);
      this.setRange$4(receiver, index, J.$sub$n(this.get$length(receiver), 1), receiver, J.$add$ns(index, 1));
      this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
      return result;
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int3", ret: E, args: [J.JSInt]};
      }, this.$receiver, "ListMixin");
    }, 12, "removeAt"],
    toString$0: [function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+ListMixin": 0,
  Maps_mapToString_closure: {
    "^": "Closure:59;box_0-,result_1-",
    call$2: [function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }, "call$2", null, 4, 0, 59, 786, 787, "call"],
    $isFunction: true
  },
  "+ Maps_mapToString_closure": 0,
  ListQueue: {
    "^": "IterableBase;_table-,_head-,_tail-,_modificationCount-",
    get$iterator: [function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_9", ret: [P.Iterator, E]};
      }, this.$receiver, "ListQueue");
    }, "iterator"],
    forEach$1: [function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    }, "call$1", "get$forEach", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__void__E6", void: true, args: [{func: "void__E7", void: true, args: [E]}]};
      }, this.$receiver, "ListQueue");
    }, 719, "forEach"],
    get$isEmpty: [function(_) {
      return this._head === this._tail;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$length: [function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    }, null, null, 1, 0, 394, "length"],
    toList$1$growable: [function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, function() {
      return H.computeSignature(function(E) {
        return {func: "List___bool4", ret: [J.JSArray, E], named: {growable: J.JSBool}};
      }, this.$receiver, "ListQueue");
    }, 316, 317, "toList"],
    add$1: [function(_, element) {
      this._add$1(element);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E7", void: true, args: [E]};
      }, this.$receiver, "ListQueue");
    }, 218, "add"],
    remove$1: [function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(i);
          this._modificationCount = this._modificationCount + 1;
          return true;
        }
      }
      return false;
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    clear$0: [function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        this._modificationCount = this._modificationCount + 1;
      }
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    toString$0: [function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    _add$1: [function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    }, "call$1", "get$_add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E7", void: true, args: [E]};
      }, this.$receiver, "ListQueue");
    }, 218, "_add"],
    _remove$1: [function(offset) {
      var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
      t1 = this._table;
      t2 = t1.length;
      mask = t2 - 1;
      t3 = this._head;
      t4 = this._tail;
      if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
        for (i = offset; i !== t3; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t2)
            return H.ioore(t1, prevOffset);
          t4 = t1[prevOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        this._head = (t3 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t3 = (t4 - 1 & mask) >>> 0;
        this._tail = t3;
        for (i = offset; i !== t3; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t2)
            return H.ioore(t1, nextOffset);
          t4 = t1[nextOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        return offset;
      }
    }, "call$1", "get$_remove", 2, 0, 342, 788, "_remove"],
    _grow$0: [function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    }, "call$0", "get$_grow", 0, 0, 137, "_grow"],
    _writeToList$1: [function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
        t1 = this._tail;
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return this._tail + firstPartSize;
      }
    }, "call$1", "get$_writeToList", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "int__List", ret: J.JSInt, args: [[J.JSArray, E]]};
      }, this.$receiver, "ListQueue");
    }, 109, "_writeToList"],
    ListQueue$1: [function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    }, null, null, 0, 2, 789, 116, 790, ""],
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {"^": "ListQueue__INITIAL_CAPACITY-"}
  },
  "+ListQueue": 0,
  _ListQueueIterator: {
    "^": "Object;_queue-,_end-,_modificationCount-,_collection$_position-,_collection$_current-",
    get$current: [function() {
      return this._collection$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_6", ret: E};
      }, this.$receiver, "_ListQueueIterator");
    }, "current"],
    moveNext$0: [function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"]
  },
  "+_ListQueueIterator": 0
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDart: [function(json, reviver) {
    var revive = new P._convertJsonToDart_closure();
    return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
  }, "call$2", "_convertJsonToDart$closure", 4, 0, 277, 278, 279, "_convertJsonToDart"],
  _parseJson: [function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(new P.ArgumentError(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e)));
    }

    return P._convertJsonToDart(parsed, reviver);
  }, "call$2", "_parseJson$closure", 4, 0, 283, 50, 279, "_parseJson"],
  _defaultToEncodable: [function(object) {
    return object.toJson$0();
  }, "call$1", "_defaultToEncodable$closure", 2, 0, 284, 1, "_defaultToEncodable"],
  _convertJsonToDart_closure: {
    "^": "Closure:59;",
    call$2: [function(key, value) {
      return value;
    }, "call$2", null, 4, 0, 59, 60, 38, "call"],
    $isFunction: true
  },
  "+ _convertJsonToDart_closure": 0,
  _convertJsonToDart_walk: {
    "^": "Closure:0;revive_0-",
    call$1: [function(e) {
      var list, t1, i, keys, map, key, proto;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        list = e;
        for (t1 = this.revive_0, i = 0; i < list.length; ++i)
          list[i] = t1.call$2(i, this.call$1(list[i]));
        return list;
      }
      keys = Object.keys(e);
      map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
        key = keys[i];
        map.$indexSet(0, key, t1.call$2(key, this.call$1(e[key])));
      }
      proto = e.__proto__;
      if (typeof proto !== "undefined" && proto !== Object.prototype)
        map.$indexSet(0, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
      return map;
    }, "call$1", null, 2, 0, 0, 22, "call"],
    $isFunction: true
  },
  "+ _convertJsonToDart_walk": 0,
  Codec: {
    "^": "Object;"
  },
  "+Codec": 0,
  Converter: {
    "^": "Object;"
  },
  "+Converter": 0,
  JsonUnsupportedObjectError: {
    "^": "Error;unsupportedObject-,cause-",
    toString$0: [function(_) {
      if (this.cause != null)
        return "Converting object to an encodable object failed.";
      else
        return "Converting object did not return an encodable object.";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {JsonUnsupportedObjectError$: [function(unsupportedObject, cause) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
      }, null, null, 2, 3, 280, 116, 281, 282, "new JsonUnsupportedObjectError"]}
  },
  "+JsonUnsupportedObjectError": 0,
  JsonCyclicError: {
    "^": "JsonUnsupportedObjectError;unsupportedObject-,cause-",
    toString$0: [function(_) {
      return "Cyclic error in JSON stringify";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {JsonCyclicError$: [function(object) {
        return new P.JsonCyclicError(object, null);
      }, null, null, 2, 0, 111, 1, "new JsonCyclicError"]}
  },
  "+JsonCyclicError": 0,
  JsonCodec: {
    "^": "Codec;_reviver-,_toEncodable-",
    decode$2$reviver: [function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    }, function(source) {
      return this.decode$2$reviver(source, null);
    }, "decode$1", "call$2$reviver", null, "get$decode", 2, 3, 791, 116, 50, 279, "decode"],
    encode$2$toEncodable: [function(value, toEncodable) {
      return P._JsonStringifier_stringify(value, this.get$encoder()._toEncodableFunction);
    }, function(value) {
      return this.encode$2$toEncodable(value, null);
    }, "encode$1", "call$2$toEncodable", null, "get$encode", 2, 3, 792, 116, 38, 286, "encode"],
    get$encoder: [function() {
      return C.JsonEncoder_null;
    }, null, null, 1, 0, 793, "encoder"],
    get$decoder: [function() {
      return C.JsonDecoder_null;
    }, null, null, 1, 0, 794, "decoder"],
    $asCodec: function() {
      return [P.Object, J.JSString];
    }
  },
  "+JsonCodec": 0,
  JsonEncoder: {
    "^": "Converter;_toEncodableFunction-",
    $asConverter: function() {
      return [P.Object, J.JSString];
    }
  },
  "+JsonEncoder": 0,
  JsonDecoder: {
    "^": "Converter;_reviver-",
    $asConverter: function() {
      return [J.JSString, P.Object];
    }
  },
  "+JsonDecoder": 0,
  _JsonStringifier: {
    "^": "Object;_toEncodable-,_sink-,_seen-",
    _toEncodable$1: function(arg0) {
      return this._toEncodable.call$1(arg0);
    },
    escape$1: [function(s) {
      var t1, $length, t2, offset, i, charCode, t3, str, charCodes, t4;
      t1 = J.getInterceptor$asx(s);
      $length = t1.get$length(s);
      if (typeof $length !== "number")
        return H.iae($length);
      t2 = this._sink;
      offset = 0;
      i = 0;
      for (; i < $length; ++i) {
        charCode = t1.codeUnitAt$1(s, i);
        t3 = J.getInterceptor$n(charCode);
        if (t3.$gt(charCode, 92) === true)
          continue;
        if (t3.$lt(charCode, 32) === true) {
          if (i > offset) {
            str = t1.substring$2(s, offset, i);
            str = typeof str === "string" ? str : H.S(str);
            t2._contents = t2._contents + str;
          }
          offset = i + 1;
          charCodes = P.List_List$filled(1, 92, J.JSInt);
          t4 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t4;
          switch (charCode) {
            case 8:
              charCodes = P.List_List$filled(1, 98, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 9:
              charCodes = P.List_List$filled(1, 116, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 10:
              charCodes = P.List_List$filled(1, 110, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 12:
              charCodes = P.List_List$filled(1, 102, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 13:
              charCodes = P.List_List$filled(1, 114, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            default:
              charCodes = P.List_List$filled(1, 117, J.JSInt);
              t4 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t4;
              charCodes = P.List_List$filled(1, 48, J.JSInt);
              t4 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t4;
              charCodes = P.List_List$filled(1, 48, J.JSInt);
              t4 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t4;
              t4 = J.$and$n(t3.$shr(charCode, 4), 15);
              t4 = t4 < 10 ? 48 + t4 : 87 + t4;
              charCodes = P.List_List$filled(1, t4, J.JSInt);
              t4 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t4;
              t3 = t3.$and(charCode, 15);
              t3 = t3 < 10 ? 48 + t3 : 87 + t3;
              charCodes = P.List_List$filled(1, t3, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
          }
        } else if (t3.$eq(charCode, 34) || t3.$eq(charCode, 92)) {
          if (i > offset) {
            str = t1.substring$2(s, offset, i);
            str = typeof str === "string" ? str : H.S(str);
            t2._contents = t2._contents + str;
          }
          offset = i + 1;
          charCodes = P.List_List$filled(1, 92, J.JSInt);
          t3 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t3;
          charCodes = P.List_List$filled(1, charCode, J.JSInt);
          t3 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t3;
        }
      }
      if (offset === 0) {
        str = typeof s === "string" ? s : H.S(s);
        t2._contents = t2._contents + str;
      } else if (offset < $length) {
        str = t1.substring$2(s, offset, $length);
        str = typeof str === "string" ? str : H.S(str);
        t2._contents = t2._contents + str;
      }
    }, "call$1", "get$escape", 2, 0, 99, 123, "escape"],
    checkCycle$1: [function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
      }
      t1.push(object);
    }, "call$1", "get$checkCycle", 2, 0, 235, 1, "checkCycle"],
    stringifyValue$1: [function(object) {
      var customJson, e, t1, exception;
      if (!this.stringifyJsonValue$1(object)) {
        this.checkCycle$1(object);
        try {
          customJson = this._toEncodable$1(object);
          if (!this.stringifyJsonValue$1(customJson)) {
            t1 = P.JsonUnsupportedObjectError$(object, null);
            throw H.wrapException(t1);
          }
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
        }

      }
    }, "call$1", "get$stringifyValue", 2, 0, 235, 1, "stringifyValue"],
    stringifyJsonValue$1: [function(object) {
      var t1, t2, i, t3, separator, key;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        this._sink.write$1(C.JSNumber_methods.toString$0(object));
        return true;
      } else if (object === true) {
        this._sink.write$1("true");
        return true;
      } else if (object === false) {
        this._sink.write$1("false");
        return true;
      } else if (object == null) {
        this._sink.write$1("null");
        return true;
      } else if (typeof object === "string") {
        t1 = this._sink;
        t1.write$1("\"");
        this.escape$1(object);
        t1.write$1("\"");
        return true;
      } else {
        t1 = J.getInterceptor(object);
        if (!!t1.$isList) {
          this.checkCycle$1(object);
          t2 = this._sink;
          t2.write$1("[");
          if (J.$gt$n(t1.get$length(object), 0) === true) {
            this.stringifyValue$1(t1.$index(object, 0));
            i = 1;
            while (true) {
              t3 = t1.get$length(object);
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(i < t3))
                break;
              t2._contents = t2._contents + ",";
              this.stringifyValue$1(t1.$index(object, i));
              ++i;
            }
          }
          t2.write$1("]");
          this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          this.checkCycle$1(object);
          t2 = this._sink;
          t2.write$1("{");
          for (t3 = J.get$iterator$ax(object.get$keys()), separator = "\""; t3.moveNext$0(); separator = ",\"") {
            key = t3.get$current();
            t2._contents = t2._contents + separator;
            this.escape$1(key);
            t2._contents = t2._contents + "\":";
            this.stringifyValue$1(t1.$index(object, key));
          }
          t2.write$1("}");
          this._removeSeen$1(object);
          return true;
        } else
          return false;
      }
    }, "call$1", "get$stringifyJsonValue", 2, 0, 30, 1, "stringifyJsonValue"],
    _removeSeen$1: [function(object) {
      var t1 = this._seen;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }, "call$1", "get$_removeSeen", 2, 0, 235, 1, "_removeSeen"],
    static: {"^": "_JsonStringifier_BACKSPACE-,_JsonStringifier_TAB-,_JsonStringifier_NEWLINE-,_JsonStringifier_CARRIAGE_RETURN-,_JsonStringifier_FORM_FEED-,_JsonStringifier_QUOTE-,_JsonStringifier_CHAR_0-,_JsonStringifier_BACKSLASH-,_JsonStringifier_CHAR_b-,_JsonStringifier_CHAR_f-,_JsonStringifier_CHAR_n-,_JsonStringifier_CHAR_r-,_JsonStringifier_CHAR_t-,_JsonStringifier_CHAR_u-", _JsonStringifier_stringify: [function(object, toEncodable) {
        var output;
        toEncodable = P._defaultToEncodable$closure();
        output = P.StringBuffer$("");
        new P._JsonStringifier(toEncodable, output, []).stringifyValue$1(object);
        return output._contents;
      }, "call$2", "_JsonStringifier_stringify$closure", 4, 0, 285, 1, 286, "stringify"]}
  },
  "+_JsonStringifier": 0
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: [function(namedArguments) {
    return;
  }, "call$1", "Function__toMangledNames$closure", 2, 0, 287, 64, "_toMangledNames"],
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 288, 217, 268, "compare"],
  Error_safeToString: [function(object) {
    var buffer, t1, i, t2, codeUnit, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10) {
            t2 = buffer._contents + "\\n";
            buffer._contents = t2;
          } else if (codeUnit === 13) {
            t2 = buffer._contents + "\\r";
            buffer._contents = t2;
          } else if (codeUnit === 9) {
            t2 = buffer._contents + "\\t";
            buffer._contents = t2;
          } else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            t2 = buffer._contents + t2;
            buffer._contents = t2;
          }
        else if (codeUnit === 92) {
          t2 = buffer._contents + "\\\\";
          buffer._contents = t2;
        } else if (codeUnit === 34) {
          t2 = buffer._contents + "\\\"";
          buffer._contents = t2;
        } else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t2 = buffer._contents + t2;
          buffer._contents = t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  }, "call$1", "Error_safeToString$closure", 2, 0, 53, 1, "safeToString"],
  Exception_Exception: [function(message) {
    return new P._ExceptionImplementation(message);
  }, "call$1", null, 0, 2, 311, 116, 26, "new Exception"],
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 313, 217, 268, "identical"],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 314, 1, "identityHashCode"],
  List_List$filled: [function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && fill != null)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  }, "call$2", null, 4, 0, function() {
    return H.computeSignature(function(E) {
      return {func: "List__int_E", ret: [J.JSArray, E], args: [J.JSInt, E]};
    }, this.$receiver, "List");
  }, 7, 315, "new List$filled"],
  List_List$from: [function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0() === true;)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  }, "call$2$growable", null, 2, 3, function() {
    return H.computeSignature(function(E) {
      return {func: "List__Iterable__bool", ret: [J.JSArray, E], args: [P.Iterable], named: {growable: J.JSBool}};
    }, this.$receiver, "List");
  }, 316, 140, 317, "new List$from"],
  print: [function(object) {
    var line = H.S(object);
    H.printString(line);
  }, "call$1", "print$closure", 2, 0, 318, 1, "print"],
  Function__toMangledNames_closure: {
    "^": "Closure:59;result_0-",
    call$2: [function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    }, "call$2", null, 4, 0, 59, 795, 38, "call"],
    $isFunction: true
  },
  "+ Function__toMangledNames_closure": 0,
  NoSuchMethodError_toString_closure: {
    "^": "Closure:796;box_0-",
    call$2: [function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      t1.i_1 = t1.i_1 + 1;
    }, "call$2", null, 4, 0, 796, 60, 38, "call"],
    $isFunction: true
  },
  "+ NoSuchMethodError_toString_closure": 0,
  Comparable: {
    "^": "Object;"
  },
  "+Comparable": 0,
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<-,isUtc-",
    $eq: [function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    compareTo$1: [function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    }, "call$1", "get$compareTo", 2, 0, 797, 140, "compareTo"],
    get$hashCode: [function(_) {
      return this.millisecondsSinceEpoch;
    }, null, null, 1, 0, 394, "hashCode"],
    toString$0: [function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    add$1: [function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
    }, "call$1", "get$add", 2, 0, 798, 258, "add"],
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: [function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
    }, null, null, 2, 3, 289, 237, 290, 291, "fromMillisecondsSinceEpoch"],
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY-,DateTime_TUESDAY-,DateTime_WEDNESDAY-,DateTime_THURSDAY-,DateTime_FRIDAY-,DateTime_SATURDAY-,DateTime_SUNDAY-,DateTime_DAYS_PER_WEEK-,DateTime_JANUARY-,DateTime_FEBRUARY-,DateTime_MARCH-,DateTime_APRIL-,DateTime_MAY-,DateTime_JUNE-,DateTime_JULY-,DateTime_AUGUST-,DateTime_SEPTEMBER-,DateTime_OCTOBER-,DateTime_NOVEMBER-,DateTime_DECEMBER-,DateTime_MONTHS_PER_YEAR-,DateTime__MAX_MILLISECONDS_SINCE_EPOCH-", DateTime$fromMillisecondsSinceEpoch: [function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, null, null, 2, 3, 289, 237, 290, 291, "new DateTime$fromMillisecondsSinceEpoch"], DateTime__fourDigits: [function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, "call$1", "DateTime__fourDigits$closure", 2, 0, 292, 293, "_fourDigits"], DateTime__threeDigits: [function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, "call$1", "DateTime__threeDigits$closure", 2, 0, 292, 293, "_threeDigits"], DateTime__twoDigits: [function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }, "call$1", "DateTime__twoDigits$closure", 2, 0, 292, 293, "_twoDigits"]}
  },
  "+DateTime": 0,
  Duration: {
    "^": "Object;_duration<-",
    $add: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$(0, 0, this._duration + t1, 0, 0, 0);
    }, "call$1", "get$+", 2, 0, 799, 140, "+"],
    $sub: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$(0, 0, this._duration - t1, 0, 0, 0);
    }, "call$1", "get$-", 2, 0, 799, 140, "-"],
    $mul: [function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    }, "call$1", "get$*", 2, 0, 800, 801, "*"],
    $tdiv: [function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    }, "call$1", "get$~/", 2, 0, 802, 803, "~/"],
    $lt: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._duration < t1;
    }, "call$1", "get$<", 2, 0, 804, 140, "<"],
    $gt: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._duration > t1;
    }, "call$1", "get$>", 2, 0, 804, 140, ">"],
    $le: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._duration <= t1;
    }, "call$1", "get$<=", 2, 0, 804, 140, "<="],
    $ge: [function(_, other) {
      var t1 = other.get$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._duration >= t1;
    }, "call$1", "get$>=", 2, 0, 804, 140, ">="],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      return this._duration & 0x1FFFFFFF;
    }, null, null, 1, 0, 394, "hashCode"],
    compareTo$1: [function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    }, "call$1", "get$compareTo", 2, 0, 805, 140, "compareTo"],
    toString$0: [function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND-,Duration_MILLISECONDS_PER_SECOND-,Duration_SECONDS_PER_MINUTE-,Duration_MINUTES_PER_HOUR-,Duration_HOURS_PER_DAY-,Duration_MICROSECONDS_PER_SECOND-,Duration_MICROSECONDS_PER_MINUTE-,Duration_MICROSECONDS_PER_HOUR-,Duration_MICROSECONDS_PER_DAY-,Duration_MILLISECONDS_PER_MINUTE-,Duration_MILLISECONDS_PER_HOUR-,Duration_MILLISECONDS_PER_DAY-,Duration_SECONDS_PER_HOUR-,Duration_SECONDS_PER_DAY-,Duration_MINUTES_PER_DAY-,Duration_ZERO-", Duration$: [function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }, null, null, 0, 13, 294, 295, 295, 295, 295, 295, 295, 296, 297, 298, 299, 33, 300, "new Duration"]}
  },
  "+Duration": 0,
  Duration_toString_sixDigits: {
    "^": "Closure:292;",
    call$1: [function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    }, "call$1", null, 2, 0, 292, 293, "call"],
    $isFunction: true
  },
  "+ Duration_toString_sixDigits": 0,
  Duration_toString_twoDigits: {
    "^": "Closure:292;",
    call$1: [function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    }, "call$1", null, 2, 0, 292, 293, "call"],
    $isFunction: true
  },
  "+ Duration_toString_twoDigits": 0,
  Error: {
    "^": "Object;",
    get$stackTrace: [function() {
      return new H._StackTrace(this.$thrownJsError, null);
    }, null, null, 1, 0, 806, "stackTrace"],
    $isError: true
  },
  "+Error": 0,
  NullThrownError: {
    "^": "Error;",
    toString$0: [function(_) {
      return "Throw of null.";
    }, "call$0", "get$toString", 0, 0, 20, "toString"]
  },
  "+NullThrownError": 0,
  ArgumentError: {
    "^": "Error;message-",
    toString$0: [function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {ArgumentError$: [function(message) {
        return new P.ArgumentError(message);
      }, null, null, 0, 2, 301, 116, 26, "new ArgumentError"]}
  },
  "+ArgumentError": 0,
  RangeError: {
    "^": "ArgumentError;message-",
    toString$0: [function(_) {
      return "RangeError: " + H.S(this.message);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {RangeError$: [function(message) {
        return new P.RangeError(message);
      }, null, null, 2, 0, 0, 26, "new RangeError"], RangeError$value: [function(value) {
        return new P.RangeError("value " + H.S(value));
      }, null, null, 2, 0, 302, 38, "new RangeError$value"], RangeError$range: [function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }, null, null, 6, 0, 303, 38, 208, 209, "new RangeError$range"]}
  },
  "+RangeError": 0,
  NoSuchMethodError: {
    "^": "Error;_core$_receiver-,_memberName-,_core$_arguments-,_namedArguments-,_existingArgumentNames-",
    toString$0: [function(_) {
      var t1, t2, t3, t4, t5, str, i;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      t2 = this._core$_arguments;
      if (t2 != null) {
        t3 = J.getInterceptor$asx(t2);
        t4 = 0;
        while (true) {
          t5 = t3.get$length(t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(t4 < t5))
            break;
          t4 = t1.i_1;
          if (t4 > 0) {
            t5 = t1.sb_0;
            t5._contents = t5._contents + ", ";
          }
          t5 = t1.sb_0;
          str = P.Error_safeToString(t3.$index(t2, t4));
          str = typeof str === "string" ? str : H.S(str);
          t5._contents = t5._contents + str;
          i = t1.i_1 + 1;
          t1.i_1 = i;
          t4 = i;
        }
      }
      t2 = this._namedArguments;
      if (t2 != null)
        J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {NoSuchMethodError$: [function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }, null, null, 8, 2, 304, 116, 58, 305, 63, 64, 306, "new NoSuchMethodError"]}
  },
  "+NoSuchMethodError": 0,
  UnsupportedError: {
    "^": "Error;message-",
    toString$0: [function(_) {
      return "Unsupported operation: " + this.message;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {UnsupportedError$: [function(message) {
        return new P.UnsupportedError(message);
      }, null, null, 2, 0, 48, 26, "new UnsupportedError"]}
  },
  "+UnsupportedError": 0,
  UnimplementedError: {
    "^": "Error;message-",
    toString$0: [function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $isError: true,
    static: {UnimplementedError$: [function(message) {
        return new P.UnimplementedError(message);
      }, null, null, 0, 2, 307, 116, 26, "new UnimplementedError"]}
  },
  "+UnimplementedError": 0,
  StateError: {
    "^": "Error;message-",
    toString$0: [function(_) {
      return "Bad state: " + this.message;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {StateError$: [function(message) {
        return new P.StateError(message);
      }, null, null, 2, 0, 48, 26, "new StateError"]}
  },
  "+StateError": 0,
  ConcurrentModificationError: {
    "^": "Error;modifiedObject-",
    toString$0: [function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {ConcurrentModificationError$: [function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }, null, null, 0, 2, 308, 116, 309, "new ConcurrentModificationError"]}
  },
  "+ConcurrentModificationError": 0,
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: [function(_) {
      return "Out of Memory";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$stackTrace: [function() {
      return;
    }, null, null, 1, 0, 806, "stackTrace"],
    $isError: true
  },
  "+OutOfMemoryError": 0,
  StackOverflowError: {
    "^": "Object;",
    toString$0: [function(_) {
      return "Stack Overflow";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$stackTrace: [function() {
      return;
    }, null, null, 1, 0, 806, "stackTrace"],
    $isError: true
  },
  "+StackOverflowError": 0,
  CyclicInitializationError: {
    "^": "Error;variableName-",
    toString$0: [function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {CyclicInitializationError$: [function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }, null, null, 0, 2, 307, 116, 310, "new CyclicInitializationError"]}
  },
  "+CyclicInitializationError": 0,
  Exception: {
    "^": "Object;"
  },
  "+Exception": 0,
  _ExceptionImplementation: {
    "^": "Object;message-",
    toString$0: [function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }, "call$0", "get$toString", 0, 0, 20, "toString"]
  },
  "+_ExceptionImplementation": 0,
  FormatException: {
    "^": "Object;message-",
    toString$0: [function(_) {
      return "FormatException: " + H.S(this.message);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {FormatException$: [function(message) {
        return new P.FormatException(message);
      }, null, null, 0, 2, 307, 312, 26, "new FormatException"]}
  },
  "+FormatException": 0,
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: [function(_) {
      return "IntegerDivisionByZeroException";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    static: {IntegerDivisionByZeroException$: [function() {
        return new P.IntegerDivisionByZeroException();
      }, null, null, 0, 0, 16, "new IntegerDivisionByZeroException"]}
  },
  "+IntegerDivisionByZeroException": 0,
  Expando: {
    "^": "Object;name>-",
    toString$0: [function(_) {
      return "Expando:" + H.S(this.name);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $index: [function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T__Object", ret: T, args: [P.Object]};
      }, this.$receiver, "Expando");
    }, 1, "[]"],
    $indexSet: [function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__Object_T", void: true, args: [P.Object, T]};
      }, this.$receiver, "Expando");
    }, 1, 38, "[]="],
    _getKey$0: [function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    }, "call$0", "get$_getKey", 0, 0, 20, "_getKey"],
    static: {"^": "Expando__KEY_PROPERTY_NAME-,Expando__EXPANDO_PROPERTY_NAME-,Expando__keyCount-"}
  },
  "+Expando": 0,
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  "+Function": 0,
  Invocation: {
    "^": "Object;"
  },
  "+Invocation": 0,
  Iterable: {
    "^": "Object;",
    $isIterable: true,
    $asIterable: null
  },
  "+Iterable": 0,
  Iterator: {
    "^": "Object;"
  },
  "+Iterator": 0,
  Map: {
    "^": "Object;",
    $isMap: true
  },
  "+Map": 0,
  Null: {
    "^": "Object;",
    toString$0: [function(_) {
      return "null";
    }, "call$0", "get$toString", 0, 0, 20, "toString"]
  },
  "+Null": 0,
  Object: {
    "^": ";",
    $eq: [function(_, other) {
      return this === other;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      return H.Primitives_objectHashCode(this);
    }, null, null, 1, 0, 394, "hashCode"],
    toString$0: [function(_) {
      return H.Primitives_objectToString(this);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    noSuchMethod$1: [function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, 420, 421, "noSuchMethod"],
    get$runtimeType: [function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    }, null, null, 1, 0, 416, "runtimeType"],
    $add: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("+", "$add", 0, [$0], []));
    },
    "++:1:0": 2,
    $and: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("&", "$and", 0, [$0], []));
    },
    "+&:1:0": 2,
    $div: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("/", "$div", 0, [$0], []));
    },
    "+/:1:0": 2,
    $ge: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">=", "$ge", 0, [$0], []));
    },
    "+>=:1:0": 2,
    $gt: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">", "$gt", 0, [$0], []));
    },
    "+>:1:0": 2,
    $index: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("[]", "$index", 0, [$0], []));
    },
    "+[]:1:0": 2,
    $indexSet: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
    },
    "+[]=:2:0": 2,
    $le: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<=", "$le", 0, [$0], []));
    },
    "+<=:1:0": 2,
    $lt: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<", "$lt", 0, [$0], []));
    },
    "+<:1:0": 2,
    $mul: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("*", "$mul", 0, [$0], []));
    },
    "+*:1:0": 2,
    $negate: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("unary-", "$negate", 0, [], []));
    },
    "+unary-:0:0": 2,
    $not: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("~", "$not", 0, [], []));
    },
    "+~:0:0": 2,
    $shl: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<<", "$shl", 0, [$0], []));
    },
    "+<<:1:0": 2,
    $shr: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">>", "$shr", 0, [$0], []));
    },
    "+>>:1:0": 2,
    $sub: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("-", "$sub", 0, [$0], []));
    },
    "+-:1:0": 2,
    $tdiv: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
    },
    "+~/:1:0": 2,
    $xor: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("^", "$xor", 0, [$0], []));
    },
    "+^:1:0": 2,
    __isolate_helper$_add$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_add", "__isolate_helper$_add$1", 0, [$0], []));
    },
    "+_add:1:0": 2,
    _addError$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_addError", "_addError$2", 0, [$0, $1], []));
    },
    "+_addError:2:0": 2,
    _addPending$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_addPending", "_addPending$1", 0, [$0], []));
    },
    "+_addPending:1:0": 2,
    _async$_add$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_add", "_async$_add$1", 0, [$0], []));
    },
    "+_add:1:0": 2,
    _completeError$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_completeError", "_completeError$2", 0, [$0, $1], []));
    },
    "+_completeError:2:0": 2,
    _completeWithValue$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_completeWithValue", "_completeWithValue$1", 0, [$0], []));
    },
    "+_completeWithValue:1:0": 2,
    _expectsEvent$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_expectsEvent", "_expectsEvent$1", 0, [$0], []));
    },
    "+_expectsEvent:1:0": 2,
    _removeListeners$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_removeListeners", "_removeListeners$0", 0, [], []));
    },
    "+_removeListeners:0:0": 2,
    _replaceChild$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_replaceChild", "_replaceChild$2", 0, [$0, $1], []));
    },
    "+_replaceChild:2:0": 2,
    _setError$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_setError", "_setError$2", 0, [$0, $1], []));
    },
    "+_setError:2:0": 2,
    _setRemoveAfterFiring$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_setRemoveAfterFiring", "_setRemoveAfterFiring$0", 0, [], []));
    },
    "+_setRemoveAfterFiring:0:0": 2,
    _setValue$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_setValue", "_setValue$1", 0, [$0], []));
    },
    "+_setValue:1:0": 2,
    _toggleEventId$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_toggleEventId", "_toggleEventId$0", 0, [], []));
    },
    "+_toggleEventId:0:0": 2,
    abs$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("abs", "abs$0", 0, [], []));
    },
    "+abs:0:0": 2,
    add$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$1", 0, [$0], []));
    },
    "+add:1:0": 2,
    addBorderConnection$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addBorderConnection", "addBorderConnection$1", 0, [$0], []));
    },
    "+addBorderConnection:1:0": 2,
    addBorderUtilization$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addBorderUtilization", "addBorderUtilization$1", 0, [$0], []));
    },
    "+addBorderUtilization:1:0": 2,
    addEventListener$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addEventListener", "addEventListener$3", 0, [$0, $1, $2], []));
    },
    "+addEventListener:3:0": 2,
    addSpecializedTable$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addSpecializedTable", "addSpecializedTable$1", 0, [$0], []));
    },
    "+addSpecializedTable:1:0": 2,
    arc$6: function($receiver, $0, $1, $2, $3, $4, $5) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("arc", "arc$6", 0, [$0, $1, $2, $3, $4, $5], []));
    },
    "+arc:6:0": 2,
    areBorderPointsDefined$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("areBorderPointsDefined", "areBorderPointsDefined$0", 0, [], []));
    },
    "+areBorderPointsDefined:0:0": 2,
    arePointsNull$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("arePointsNull", "arePointsNull$0", 0, [], []));
    },
    "+arePointsNull:0:0": 2,
    beginPath$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("beginPath", "beginPath$0", 0, [], []));
    },
    "+beginPath:0:0": 2,
    bezierCurveTo$6: function($receiver, $0, $1, $2, $3, $4, $5) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bezierCurveTo", "bezierCurveTo$6", 0, [$0, $1, $2, $3, $4, $5], []));
    },
    "+bezierCurveTo:6:0": 2,
    bindCallback$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindCallback", "bindCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    "+bindCallback:2:0:runGuarded": 2,
    bindUnaryCallback$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindUnaryCallback", "bindUnaryCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    "+bindUnaryCallback:2:0:runGuarded": 2,
    calcSizeProperties$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("calcSizeProperties", "calcSizeProperties$0", 0, [], []));
    },
    "+calcSizeProperties:0:0": 2,
    calculateConnectionsLocation$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("calculateConnectionsLocation", "calculateConnectionsLocation$0", 0, [], []));
    },
    "+calculateConnectionsLocation:0:0": 2,
    call$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$0", 0, [], []));
    },
    "+call:0:0": 2,
    call$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1", 0, [$0], []));
    },
    "+call:1:0": 2,
    call$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
    },
    "+call:2:0": 2,
    call$2$onError: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
    },
    "+call:2:0:onError": 2,
    call$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    "+call:2:0:runGuarded": 2,
    call$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
    },
    "+call:3:0": 2,
    call$3$async: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$async", 0, [$0, $1, $2], ["async"]));
    },
    "+call:3:0:async": 2,
    call$3$onDone$onError: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
    },
    "+call:3:0:onDone:onError": 2,
    call$4: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
    },
    "+call:4:0": 2,
    call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
    },
    "+call:4:0:cancelOnError:onDone:onError": 2,
    call$6: function($0, $1, $2, $3, $4, $5) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$6", 0, [$0, $1, $2, $3, $4, $5], []));
    },
    "+call:6:0": 2,
    callMethod$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("callMethod", "callMethod$2", 0, [$0, $1], []));
    },
    "+callMethod:2:0": 2,
    callback$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("callback", "callback$0", 0, [], []));
    },
    "+callback:0:0": 2,
    cancel$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("cancel", "cancel$0", 0, [], []));
    },
    "+cancel:0:0": 2,
    cancelSchedule$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("cancelSchedule", "cancelSchedule$0", 0, [], []));
    },
    "+cancelSchedule:0:0": 2,
    clear$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("clear", "clear$0", 0, [], []));
    },
    "+clear:0:0": 2,
    clearBorderPointsAndAngle$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("clearBorderPointsAndAngle", "clearBorderPointsAndAngle$0", 0, [], []));
    },
    "+clearBorderPointsAndAngle:0:0": 2,
    clearRect$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("clearRect", "clearRect$4", 0, [$0, $1, $2, $3], []));
    },
    "+clearRect:4:0": 2,
    clone$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("clone", "clone$0", 0, [], []));
    },
    "+clone:0:0": 2,
    closePath$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("closePath", "closePath$0", 0, [], []));
    },
    "+closePath:0:0": 2,
    codeUnitAt$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
    },
    "+codeUnitAt:1:0": 2,
    compareTo$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
    },
    "+compareTo:1:0": 2,
    createBorderConnection$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createBorderConnection", "createBorderConnection$2", 0, [$0, $1], []));
    },
    "+createBorderConnection:2:0": 2,
    createLinearGradient$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createLinearGradient", "createLinearGradient$4", 0, [$0, $1, $2, $3], []));
    },
    "+createLinearGradient:4:0": 2,
    createNameDiamond$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createNameDiamond", "createNameDiamond$1", 0, [$0], []));
    },
    "+createNameDiamond:1:0": 2,
    createTimer$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createTimer", "createTimer$2", 0, [$0, $1], []));
    },
    "+createTimer:2:0": 2,
    css$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("css", "css$2", 0, [$0, $1], []));
    },
    "+css:2:0": 2,
    deleteForeignKey$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("deleteForeignKey", "deleteForeignKey$1", 0, [$0], []));
    },
    "+deleteForeignKey:1:0": 2,
    deleteNonPrimaryKeyFieldsWithSameName$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("deleteNonPrimaryKeyFieldsWithSameName", "deleteNonPrimaryKeyFieldsWithSameName$1", 0, [$0], []));
    },
    "+deleteNonPrimaryKeyFieldsWithSameName:1:0": 2,
    deletePrimaryKeyFieldsWithSameName$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("deletePrimaryKeyFieldsWithSameName", "deletePrimaryKeyFieldsWithSameName$1", 0, [$0], []));
    },
    "+deletePrimaryKeyFieldsWithSameName:1:0": 2,
    draw$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("draw", "draw$0", 0, [], []));
    },
    "+draw:0:0": 2,
    drawRelationshipName$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("drawRelationshipName", "drawRelationshipName$1", 0, [$0], []));
    },
    "+drawRelationshipName:1:0": 2,
    drawToggled$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("drawToggled", "drawToggled$0", 0, [], []));
    },
    "+drawToggled:0:0": 2,
    endsWith$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
    },
    "+endsWith:1:0": 2,
    eval$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("eval", "eval$1", 0, [$0], []));
    },
    "+eval:1:0": 2,
    fill$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fill", "fill$0", 0, [], []));
    },
    "+fill:0:0": 2,
    fillRect$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fillRect", "fillRect$4", 0, [$0, $1, $2, $3], []));
    },
    "+fillRect:4:0": 2,
    fillText$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fillText", "fillText$3", 0, [$0, $1, $2], []));
    },
    "+fillText:3:0": 2,
    forEach$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
    },
    "+forEach:1:0": 2,
    forceOppositeBorderForModelA$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("forceOppositeBorderForModelA", "forceOppositeBorderForModelA$0", 0, [], []));
    },
    "+forceOppositeBorderForModelA:0:0": 2,
    generateBorderSegments$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("generateBorderSegments", "generateBorderSegments$0", 0, [], []));
    },
    "+generateBorderSegments:0:0": 2,
    get$_async$_next: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_next", "get$_async$_next", 1, [], []));
    },
    "+_next": 2,
    get$_async$_previous: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_previous", "get$_async$_previous", 1, [], []));
    },
    "+_previous": 2,
    get$_collection$_element: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_element", "get$_collection$_element", 1, [], []));
    },
    "+_element": 2,
    get$_collection$_value: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_value", "get$_collection$_value", 1, [], []));
    },
    "+_value": 2,
    get$_contents: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_contents", "get$_contents", 1, [], []));
    },
    "+_contents": 2,
    get$_duration: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_duration", "get$_duration", 1, [], []));
    },
    "+_duration": 2,
    get$_error: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_error", "get$_error", 1, [], []));
    },
    "+_error": 2,
    get$_errorTest: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_errorTest", "get$_errorTest", 1, [], []));
    },
    "+_errorTest": 2,
    get$_errorZone: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_errorZone", "get$_errorZone", 1, [], []));
    },
    "+_errorZone": 2,
    get$_eventState: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_eventState", "get$_eventState", 1, [], []));
    },
    "+_eventState": 2,
    get$_hasError: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_hasError", "get$_hasError", 1, [], []));
    },
    "+_hasError": 2,
    get$_hasValue: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_hasValue", "get$_hasValue", 1, [], []));
    },
    "+_hasValue": 2,
    get$_id: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_id", "get$_id", 1, [], []));
    },
    "+_id": 2,
    get$_isClosed: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isClosed", "get$_isClosed", 1, [], []));
    },
    "+_isClosed": 2,
    get$_isComplete: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isComplete", "get$_isComplete", 1, [], []));
    },
    "+_isComplete": 2,
    get$_isFiring: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isFiring", "get$_isFiring", 1, [], []));
    },
    "+_isFiring": 2,
    get$_isInputPaused: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isInputPaused", "get$_isInputPaused", 1, [], []));
    },
    "+_isInputPaused": 2,
    get$_key: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_key", "get$_key", 1, [], []));
    },
    "+_key": 2,
    get$_name: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_name", "get$_name", 1, [], []));
    },
    "+_name": 2,
    get$_next: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_next", "get$_next", 1, [], []));
    },
    "+_next": 2,
    get$_nextListener: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
    },
    "+_nextListener": 2,
    get$_onError: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_onError", "get$_onError", 1, [], []));
    },
    "+_onError": 2,
    get$_onValue: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_onValue", "get$_onValue", 1, [], []));
    },
    "+_onValue": 2,
    get$_previous: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_previous", "get$_previous", 1, [], []));
    },
    "+_previous": 2,
    get$_removeAfterFiring: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_removeAfterFiring", "get$_removeAfterFiring", 1, [], []));
    },
    "+_removeAfterFiring": 2,
    get$_value: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_value", "get$_value", 1, [], []));
    },
    "+_value": 2,
    get$_whenCompleteAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_whenCompleteAction", "get$_whenCompleteAction", 1, [], []));
    },
    "+_whenCompleteAction": 2,
    get$_zone: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_zone", "get$_zone", 1, [], []));
    },
    "+_zone": 2,
    get$angle: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("angle", "get$angle", 1, [], []));
    },
    "+angle": 2,
    get$baseSubFields: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("baseSubFields", "get$baseSubFields", 1, [], []));
    },
    "+baseSubFields": 2,
    get$borderCode: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderCode", "get$borderCode", 1, [], []));
    },
    "+borderCode": 2,
    get$borderCodeA: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderCodeA", "get$borderCodeA", 1, [], []));
    },
    "+borderCodeA": 2,
    get$borderCodeB: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderCodeB", "get$borderCodeB", 1, [], []));
    },
    "+borderCodeB": 2,
    get$borderInteractionController: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderInteractionController", "get$borderInteractionController", 1, [], []));
    },
    "+borderInteractionController": 2,
    get$borderPointA: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderPointA", "get$borderPointA", 1, [], []));
    },
    "+borderPointA": 2,
    get$borderPointB: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("borderPointB", "get$borderPointB", 1, [], []));
    },
    "+borderPointB": 2,
    get$canvasModelA: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("canvasModelA", "get$canvasModelA", 1, [], []));
    },
    "+canvasModelA": 2,
    get$canvasModelB: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("canvasModelB", "get$canvasModelB", 1, [], []));
    },
    "+canvasModelB": 2,
    get$cells: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("cells", "get$cells", 1, [], []));
    },
    "+cells": 2,
    get$checked: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("checked", "get$checked", 1, [], []));
    },
    "+checked": 2,
    get$childCardinality: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childCardinality", "get$childCardinality", 1, [], []));
    },
    "+childCardinality": 2,
    get$childRole: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childRole", "get$childRole", 1, [], []));
    },
    "+childRole": 2,
    get$childTable: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childTable", "get$childTable", 1, [], []));
    },
    "+childTable": 2,
    get$children: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("children", "get$children", 1, [], []));
    },
    "+children": 2,
    get$className: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("className", "get$className", 1, [], []));
    },
    "+className": 2,
    get$client: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("client", "get$client", 1, [], []));
    },
    "+client": 2,
    get$composite: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("composite", "get$composite", 1, [], []));
    },
    "+composite": 2,
    get$context2D: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("context2D", "get$context2D", 1, [], []));
    },
    "+context2D": 2,
    get$controlPort: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("controlPort", "get$controlPort", 1, [], []));
    },
    "+controlPort": 2,
    get$current: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("current", "get$current", 1, [], []));
    },
    "+current": 2,
    get$dataType: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("dataType", "get$dataType", 1, [], []));
    },
    "+dataType": 2,
    get$delayedEvents: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("delayedEvents", "get$delayedEvents", 1, [], []));
    },
    "+delayedEvents": 2,
    get$derived: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("derived", "get$derived", 1, [], []));
    },
    "+derived": 2,
    get$end: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("end", "get$end", 1, [], []));
    },
    "+end": 2,
    get$enforcedOppositeBorderForModelA: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("enforcedOppositeBorderForModelA", "get$enforcedOppositeBorderForModelA", 1, [], []));
    },
    "+enforcedOppositeBorderForModelA": 2,
    get$error: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("error", "get$error", 1, [], []));
    },
    "+error": 2,
    get$foreignKey: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("foreignKey", "get$foreignKey", 1, [], []));
    },
    "+foreignKey": 2,
    get$foreignTableId: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("foreignTableId", "get$foreignTableId", 1, [], []));
    },
    "+foreignTableId": 2,
    get$height: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("height", "get$height", 1, [], []));
    },
    "+height": 2,
    get$id: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("id", "get$id", 1, [], []));
    },
    "+id": 2,
    get$identifying: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("identifying", "get$identifying", 1, [], []));
    },
    "+identifying": 2,
    get$inMilliseconds: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("inMilliseconds", "get$inMilliseconds", 1, [], []));
    },
    "+inMilliseconds": 2,
    get$isEmpty: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
    },
    "+isEmpty": 2,
    get$isGetter: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isGetter", "get$isGetter", 1, [], []));
    },
    "+isGetter": 2,
    get$isNotEmpty: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isNotEmpty", "get$isNotEmpty", 1, [], []));
    },
    "+isNotEmpty": 2,
    get$isPaused: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isPaused", "get$isPaused", 1, [], []));
    },
    "+isPaused": 2,
    get$isSetter: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isSetter", "get$isSetter", 1, [], []));
    },
    "+isSetter": 2,
    get$isolateStatics: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isolateStatics", "get$isolateStatics", 1, [], []));
    },
    "+isolateStatics": 2,
    get$iterator: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("iterator", "get$iterator", 1, [], []));
    },
    "+iterator": 2,
    get$keys: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("keys", "get$keys", 1, [], []));
    },
    "+keys": 2,
    get$length: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("length", "get$length", 1, [], []));
    },
    "+length": 2,
    get$memberName: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("memberName", "get$memberName", 1, [], []));
    },
    "+memberName": 2,
    get$millisecondsSinceEpoch: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("millisecondsSinceEpoch", "get$millisecondsSinceEpoch", 1, [], []));
    },
    "+millisecondsSinceEpoch": 2,
    get$multivalued: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("multivalued", "get$multivalued", 1, [], []));
    },
    "+multivalued": 2,
    get$name: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("name", "get$name", 1, [], []));
    },
    "+name": 2,
    get$nameDiamond: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nameDiamond", "get$nameDiamond", 1, [], []));
    },
    "+nameDiamond": 2,
    get$nameDiamondMiddlePoint: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nameDiamondMiddlePoint", "get$nameDiamondMiddlePoint", 1, [], []));
    },
    "+nameDiamondMiddlePoint": 2,
    get$namedArguments: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("namedArguments", "get$namedArguments", 1, [], []));
    },
    "+namedArguments": 2,
    get$next: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("next", "get$next", 1, [], []));
    },
    "+next": 2,
    get$nullAllowed: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nullAllowed", "get$nullAllowed", 1, [], []));
    },
    "+nullAllowed": 2,
    get$nulls: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nulls", "get$nulls", 1, [], []));
    },
    "+nulls": 2,
    get$onChange: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("onChange", "get$onChange", 1, [], []));
    },
    "+onChange": 2,
    get$onClick: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("onClick", "get$onClick", 1, [], []));
    },
    "+onClick": 2,
    get$parentCardinality: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentCardinality", "get$parentCardinality", 1, [], []));
    },
    "+parentCardinality": 2,
    get$parentRole: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentRole", "get$parentRole", 1, [], []));
    },
    "+parentRole": 2,
    get$parentTable: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentTable", "get$parentTable", 1, [], []));
    },
    "+parentTable": 2,
    get$point: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("point", "get$point", 1, [], []));
    },
    "+point": 2,
    get$pointsUpdated: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("pointsUpdated", "get$pointsUpdated", 1, [], []));
    },
    "+pointsUpdated": 2,
    get$positionalArguments: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("positionalArguments", "get$positionalArguments", 1, [], []));
    },
    "+positionalArguments": 2,
    get$primaryKey: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("primaryKey", "get$primaryKey", 1, [], []));
    },
    "+primaryKey": 2,
    get$relationship: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("relationship", "get$relationship", 1, [], []));
    },
    "+relationship": 2,
    get$relationshipFields: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("relationshipFields", "get$relationshipFields", 1, [], []));
    },
    "+relationshipFields": 2,
    get$relationshipLines: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("relationshipLines", "get$relationshipLines", 1, [], []));
    },
    "+relationshipLines": 2,
    get$rows: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("rows", "get$rows", 1, [], []));
    },
    "+rows": 2,
    get$specialRelation: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("specialRelation", "get$specialRelation", 1, [], []));
    },
    "+specialRelation": 2,
    get$specialization: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("specialization", "get$specialization", 1, [], []));
    },
    "+specialization": 2,
    get$specializedTables: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("specializedTables", "get$specializedTables", 1, [], []));
    },
    "+specializedTables": 2,
    get$src: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("src", "get$src", 1, [], []));
    },
    "+src": 2,
    get$stackTrace: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
    },
    "+stackTrace": 2,
    get$start: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("start", "get$start", 1, [], []));
    },
    "+start": 2,
    get$table: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("table", "get$table", 1, [], []));
    },
    "+table": 2,
    get$tableController: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tableController", "get$tableController", 1, [], []));
    },
    "+tableController": 2,
    get$tableFieldGlues: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tableFieldGlues", "get$tableFieldGlues", 1, [], []));
    },
    "+tableFieldGlues": 2,
    get$tableFieldPoint: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tableFieldPoint", "get$tableFieldPoint", 1, [], []));
    },
    "+tableFieldPoint": 2,
    get$tableFields: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tableFields", "get$tableFields", 1, [], []));
    },
    "+tableFields": 2,
    get$tablePoint: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tablePoint", "get$tablePoint", 1, [], []));
    },
    "+tablePoint": 2,
    get$tagName: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tagName", "get$tagName", 1, [], []));
    },
    "+tagName": 2,
    get$ternaryCardinality: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryCardinality", "get$ternaryCardinality", 1, [], []));
    },
    "+ternaryCardinality": 2,
    get$ternaryConnection: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryConnection", "get$ternaryConnection", 1, [], []));
    },
    "+ternaryConnection": 2,
    get$ternaryTable: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryTable", "get$ternaryTable", 1, [], []));
    },
    "+ternaryTable": 2,
    get$value: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("value", "get$value", 1, [], []));
    },
    "+value": 2,
    get$varData: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("varData", "get$varData", 1, [], []));
    },
    "+varData": 2,
    get$which: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("which", "get$which", 1, [], []));
    },
    "+which": 2,
    get$width: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("width", "get$width", 1, [], []));
    },
    "+width": 2,
    get$x: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("x", "get$x", 1, [], []));
    },
    "+x": 2,
    get$y: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("y", "get$y", 1, [], []));
    },
    "+y": 2,
    getCentralBorderPoints$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getCentralBorderPoints", "getCentralBorderPoints$0", 0, [], []));
    },
    "+getCentralBorderPoints:0:0": 2,
    getConnectionPointsFromBorder$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getConnectionPointsFromBorder", "getConnectionPointsFromBorder$1", 0, [$0], []));
    },
    "+getConnectionPointsFromBorder:1:0": 2,
    getContext$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getContext", "getContext$1", 0, [$0], []));
    },
    "+getContext:1:0": 2,
    getFields$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getFields", "getFields$0", 0, [], []));
    },
    "+getFields:0:0": 2,
    glueRelationshipFields$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("glueRelationshipFields", "glueRelationshipFields$0", 0, [], []));
    },
    "+glueRelationshipFields:0:0": 2,
    handleControlMessage$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("handleControlMessage", "handleControlMessage$1", 0, [$0], []));
    },
    "+handleControlMessage:1:0": 2,
    handleUncaughtError$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("handleUncaughtError", "handleUncaughtError$2", 0, [$0, $1], []));
    },
    "+handleUncaughtError:2:0": 2,
    hasAPosition$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("hasAPosition", "hasAPosition$0", 0, [], []));
    },
    "+hasAPosition:0:0": 2,
    hasField$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("hasField", "hasField$1", 0, [$0], []));
    },
    "+hasField:1:0": 2,
    hasProperty$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("hasProperty", "hasProperty$1", 0, [$0], []));
    },
    "+hasProperty:1:0": 2,
    height$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("height", "height$0", 0, [], []));
    },
    "+height:0:0": 2,
    inSameErrorZone$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("inSameErrorZone", "inSameErrorZone$1", 0, [$0], []));
    },
    "+inSameErrorZone:1:0": 2,
    indexOf$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
    },
    "+indexOf:1:0": 2,
    indexOf$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
    },
    "+indexOf:2:0": 2,
    insert$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("insert", "insert$2", 0, [$0, $1], []));
    },
    "+insert:2:0": 2,
    intersectsBaseCanvasModel$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("intersectsBaseCanvasModel", "intersectsBaseCanvasModel$1", 0, [$0], []));
    },
    "+intersectsBaseCanvasModel:1:0": 2,
    isForeignKey$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isForeignKey", "isForeignKey$0", 0, [], []));
    },
    "+isForeignKey:0:0": 2,
    isIntersecting$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isIntersecting", "isIntersecting$1", 0, [$0], []));
    },
    "+isIntersecting:1:0": 2,
    isPositionEmpty$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isPositionEmpty", "isPositionEmpty$0", 0, [], []));
    },
    "+isPositionEmpty:0:0": 2,
    isWeakEntity$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isWeakEntity", "isWeakEntity$0", 0, [], []));
    },
    "+isWeakEntity:0:0": 2,
    lineTo$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lineTo", "lineTo$2", 0, [$0, $1], []));
    },
    "+lineTo:2:0": 2,
    listen$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$1", 0, [$0], []));
    },
    "+listen:1:0": 2,
    listen$3$onDone$onError: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
    },
    "+listen:3:0:onDone:onError": 2,
    lookup$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
    },
    "+lookup:1:0": 2,
    map$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("map", "map$1", 0, [$0], []));
    },
    "+map:1:0": 2,
    matchAsPrefix$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("matchAsPrefix", "matchAsPrefix$2", 0, [$0, $1], []));
    },
    "+matchAsPrefix:2:0": 2,
    measureText$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("measureText", "measureText$1", 0, [$0], []));
    },
    "+measureText:1:0": 2,
    modal$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("modal", "modal$1", 0, [$0], []));
    },
    "+modal:1:0": 2,
    moveNext$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
    },
    "+moveNext:0:0": 2,
    moveTo$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("moveTo", "moveTo$2", 0, [$0, $1], []));
    },
    "+moveTo:2:0": 2,
    noConflict$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("noConflict", "noConflict$0", 0, [], []));
    },
    "+noConflict:0:0": 2,
    pause$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("pause", "pause$0", 0, [], []));
    },
    "+pause:0:0": 2,
    perform$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("perform", "perform$1", 0, [$0], []));
    },
    "+perform:1:0": 2,
    popover$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("popover", "popover$1", 0, [$0], []));
    },
    "+popover:1:0": 2,
    preventDefault$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("preventDefault", "preventDefault$0", 0, [], []));
    },
    "+preventDefault:0:0": 2,
    process$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("process", "process$0", 0, [], []));
    },
    "+process:0:0": 2,
    rect$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("rect", "rect$4", 0, [$0, $1, $2, $3], []));
    },
    "+rect:4:0": 2,
    registerBinaryCallback$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("registerBinaryCallback", "registerBinaryCallback$1", 0, [$0], []));
    },
    "+registerBinaryCallback:1:0": 2,
    registerCallback$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("registerCallback", "registerCallback$1", 0, [$0], []));
    },
    "+registerCallback:1:0": 2,
    registerUnaryCallback$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("registerUnaryCallback", "registerUnaryCallback$1", 0, [$0], []));
    },
    "+registerUnaryCallback:1:0": 2,
    remove$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$0", 0, [], []));
    },
    "+remove:0:0": 2,
    remove$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$1", 0, [$0], []));
    },
    "+remove:1:0": 2,
    removeAt$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("removeAt", "removeAt$1", 0, [$0], []));
    },
    "+removeAt:1:0": 2,
    removeBorderConnection$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("removeBorderConnection", "removeBorderConnection$1", 0, [$0], []));
    },
    "+removeBorderConnection:1:0": 2,
    removeEventListener$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("removeEventListener", "removeEventListener$3", 0, [$0, $1, $2], []));
    },
    "+removeEventListener:3:0": 2,
    replaceAll$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
    },
    "+replaceAll:2:0": 2,
    replaceWith$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
    },
    "+replaceWith:1:0": 2,
    resume$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("resume", "resume$0", 0, [], []));
    },
    "+resume:0:0": 2,
    round$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("round", "round$0", 0, [], []));
    },
    "+round:0:0": 2,
    run$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("run", "run$1", 0, [$0], []));
    },
    "+run:1:0": 2,
    runBinary$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("runBinary", "runBinary$3", 0, [$0, $1, $2], []));
    },
    "+runBinary:3:0": 2,
    runBinaryGuarded$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("runBinaryGuarded", "runBinaryGuarded$3", 0, [$0, $1, $2], []));
    },
    "+runBinaryGuarded:3:0": 2,
    runGuarded$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("runGuarded", "runGuarded$1", 0, [$0], []));
    },
    "+runGuarded:1:0": 2,
    runUnary$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("runUnary", "runUnary$2", 0, [$0, $1], []));
    },
    "+runUnary:2:0": 2,
    runUnaryGuarded$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("runUnaryGuarded", "runUnaryGuarded$2", 0, [$0, $1], []));
    },
    "+runUnaryGuarded:2:0": 2,
    schedule$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("schedule", "schedule$1", 0, [$0], []));
    },
    "+schedule:1:0": 2,
    scheduleMicrotask$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("scheduleMicrotask", "scheduleMicrotask$1", 0, [$0], []));
    },
    "+scheduleMicrotask:1:0": 2,
    send$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("send", "send$1", 0, [$0], []));
    },
    "+send:1:0": 2,
    set$_async$_next: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_next=", "set$_async$_next", 2, [$0], []));
    },
    "+_next=": 2,
    set$_async$_previous: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_previous=", "set$_async$_previous", 2, [$0], []));
    },
    "+_previous=": 2,
    set$_collection$_value: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_value=", "set$_collection$_value", 2, [$0], []));
    },
    "+_value=": 2,
    set$_eventState: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_eventState=", "set$_eventState", 2, [$0], []));
    },
    "+_eventState=": 2,
    set$_isChained: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isChained=", "set$_isChained", 2, [$0], []));
    },
    "+_isChained=": 2,
    set$_next: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_next=", "set$_next", 2, [$0], []));
    },
    "+_next=": 2,
    set$_nextListener: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
    },
    "+_nextListener=": 2,
    set$_previous: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_previous=", "set$_previous", 2, [$0], []));
    },
    "+_previous=": 2,
    set$bcnTernaryTableAndRelationship: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bcnTernaryTableAndRelationship=", "set$bcnTernaryTableAndRelationship", 2, [$0], []));
    },
    "+bcnTernaryTableAndRelationship=": 2,
    set$canvasModelA: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("canvasModelA=", "set$canvasModelA", 2, [$0], []));
    },
    "+canvasModelA=": 2,
    set$canvasModelB: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("canvasModelB=", "set$canvasModelB", 2, [$0], []));
    },
    "+canvasModelB=": 2,
    set$checked: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("checked=", "set$checked", 2, [$0], []));
    },
    "+checked=": 2,
    set$childCardinality: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childCardinality=", "set$childCardinality", 2, [$0], []));
    },
    "+childCardinality=": 2,
    set$childRole: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childRole=", "set$childRole", 2, [$0], []));
    },
    "+childRole=": 2,
    set$childTable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("childTable=", "set$childTable", 2, [$0], []));
    },
    "+childTable=": 2,
    set$className: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("className=", "set$className", 2, [$0], []));
    },
    "+className=": 2,
    set$classes: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("classes=", "set$classes", 2, [$0], []));
    },
    "+classes=": 2,
    set$dataType: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("dataType=", "set$dataType", 2, [$0], []));
    },
    "+dataType=": 2,
    set$disabled: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("disabled=", "set$disabled", 2, [$0], []));
    },
    "+disabled=": 2,
    set$fillStyle: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fillStyle=", "set$fillStyle", 2, [$0], []));
    },
    "+fillStyle=": 2,
    set$font: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("font=", "set$font", 2, [$0], []));
    },
    "+font=": 2,
    set$foreignKey: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("foreignKey=", "set$foreignKey", 2, [$0], []));
    },
    "+foreignKey=": 2,
    set$height: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("height=", "set$height", 2, [$0], []));
    },
    "+height=": 2,
    set$highlighted: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("highlighted=", "set$highlighted", 2, [$0], []));
    },
    "+highlighted=": 2,
    set$id: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("id=", "set$id", 2, [$0], []));
    },
    "+id=": 2,
    set$identifying: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("identifying=", "set$identifying", 2, [$0], []));
    },
    "+identifying=": 2,
    set$lineDashOffset: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lineDashOffset=", "set$lineDashOffset", 2, [$0], []));
    },
    "+lineDashOffset=": 2,
    set$lineWidth: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lineWidth=", "set$lineWidth", 2, [$0], []));
    },
    "+lineWidth=": 2,
    set$name: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("name=", "set$name", 2, [$0], []));
    },
    "+name=": 2,
    set$next: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("next=", "set$next", 2, [$0], []));
    },
    "+next=": 2,
    set$nullAllowed: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nullAllowed=", "set$nullAllowed", 2, [$0], []));
    },
    "+nullAllowed=": 2,
    set$parentCardinality: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentCardinality=", "set$parentCardinality", 2, [$0], []));
    },
    "+parentCardinality=": 2,
    set$parentRole: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentRole=", "set$parentRole", 2, [$0], []));
    },
    "+parentRole=": 2,
    set$parentTable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentTable=", "set$parentTable", 2, [$0], []));
    },
    "+parentTable=": 2,
    set$placeholder: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("placeholder=", "set$placeholder", 2, [$0], []));
    },
    "+placeholder=": 2,
    set$primaryKey: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("primaryKey=", "set$primaryKey", 2, [$0], []));
    },
    "+primaryKey=": 2,
    set$specialRelation: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("specialRelation=", "set$specialRelation", 2, [$0], []));
    },
    "+specialRelation=": 2,
    set$src: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("src=", "set$src", 2, [$0], []));
    },
    "+src=": 2,
    set$strokeStyle: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("strokeStyle=", "set$strokeStyle", 2, [$0], []));
    },
    "+strokeStyle=": 2,
    set$ternaryCardinality: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryCardinality=", "set$ternaryCardinality", 2, [$0], []));
    },
    "+ternaryCardinality=": 2,
    set$ternaryConnection: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryConnection=", "set$ternaryConnection", 2, [$0], []));
    },
    "+ternaryConnection=": 2,
    set$ternaryTable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ternaryTable=", "set$ternaryTable", 2, [$0], []));
    },
    "+ternaryTable=": 2,
    set$toggled: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toggled=", "set$toggled", 2, [$0], []));
    },
    "+toggled=": 2,
    set$toggledRelationshipField: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toggledRelationshipField=", "set$toggledRelationshipField", 2, [$0], []));
    },
    "+toggledRelationshipField=": 2,
    set$toggledTableField: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toggledTableField=", "set$toggledTableField", 2, [$0], []));
    },
    "+toggledTableField=": 2,
    set$type: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("type=", "set$type", 2, [$0], []));
    },
    "+type=": 2,
    set$value: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("value=", "set$value", 2, [$0], []));
    },
    "+value=": 2,
    set$varData: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("varData=", "set$varData", 2, [$0], []));
    },
    "+varData=": 2,
    set$width: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("width=", "set$width", 2, [$0], []));
    },
    "+width=": 2,
    set$x: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("x=", "set$x", 2, [$0], []));
    },
    "+x=": 2,
    set$y: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("y=", "set$y", 2, [$0], []));
    },
    "+y=": 2,
    setBorderCodes$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setBorderCodes", "setBorderCodes$2", 0, [$0, $1], []));
    },
    "+setBorderCodes:2:0": 2,
    setBorderConnections$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setBorderConnections", "setBorderConnections$2", 0, [$0, $1], []));
    },
    "+setBorderConnections:2:0": 2,
    setControllerFactory$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setControllerFactory", "setControllerFactory$1", 0, [$0], []));
    },
    "+setControllerFactory:1:0": 2,
    setLineDash$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setLineDash", "setLineDash$1", 0, [$0], []));
    },
    "+setLineDash:1:0": 2,
    setPhysical$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setPhysical", "setPhysical$1", 0, [$0], []));
    },
    "+setPhysical:1:0": 2,
    setRelationshipPointsAndAngle$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setRelationshipPointsAndAngle", "setRelationshipPointsAndAngle$3", 0, [$0, $1, $2], []));
    },
    "+setRelationshipPointsAndAngle:3:0": 2,
    setRequiredControllers$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setRequiredControllers", "setRequiredControllers$0", 0, [], []));
    },
    "+setRequiredControllers:0:0": 2,
    skip$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("skip", "skip$1", 0, [$0], []));
    },
    "+skip:1:0": 2,
    split$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("split", "split$1", 0, [$0], []));
    },
    "+split:1:0": 2,
    startsWith$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
    },
    "+startsWith:1:0": 2,
    stroke$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("stroke", "stroke$0", 0, [], []));
    },
    "+stroke:0:0": 2,
    strokeRect$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("strokeRect", "strokeRect$4", 0, [$0, $1, $2, $3], []));
    },
    "+strokeRect:4:0": 2,
    substring$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$1", 0, [$0], []));
    },
    "+substring:1:0": 2,
    substring$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
    },
    "+substring:2:0": 2,
    tableDnD$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tableDnD", "tableDnD$0", 0, [], []));
    },
    "+tableDnD:0:0": 2,
    then$2$onError: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
    },
    "+then:2:0:onError": 2,
    toInt$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toInt", "toInt$0", 0, [], []));
    },
    "+toInt:0:0": 2,
    toJson$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toJson", "toJson$0", 0, [], []));
    },
    "+toJson:0:0": 2,
    toJson$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toJson", "toJson$1", 0, [$0], []));
    },
    "+toJson:1:0": 2,
    toList$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toList", "toList$0", 0, [], []));
    },
    "+toList:0:0": 2,
    toMap$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toMap", "toMap$0", 0, [], []));
    },
    "+toMap:0:0": 2,
    toMap$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toMap", "toMap$1", 0, [$0], []));
    },
    "+toMap:1:0": 2,
    toMap$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toMap", "toMap$2", 0, [$0, $1], []));
    },
    "+toMap:2:0": 2,
    toRti$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toRti", "toRti$0", 0, [], []));
    },
    "+toRti:0:0": 2,
    toggle$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toggle", "toggle$1", 0, [$0], []));
    },
    "+toggle:1:0": 2,
    triggerPointsUpdated$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("triggerPointsUpdated", "triggerPointsUpdated$0", 0, [], []));
    },
    "+triggerPointsUpdated:0:0": 2,
    trim$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("trim", "trim$0", 0, [], []));
    },
    "+trim:0:0": 2,
    updateCentralBorderPoints$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateCentralBorderPoints", "updateCentralBorderPoints$0", 0, [], []));
    },
    "+updateCentralBorderPoints:0:0": 2,
    updateFillingColorGradient$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateFillingColorGradient", "updateFillingColorGradient$0", 0, [], []));
    },
    "+updateFillingColorGradient:0:0": 2,
    updateLocation$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateLocation", "updateLocation$1", 0, [$0], []));
    },
    "+updateLocation:1:0": 2,
    updateNameDiamond$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateNameDiamond", "updateNameDiamond$1", 0, [$0], []));
    },
    "+updateNameDiamond:1:0": 2,
    updateRelationship$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateRelationship", "updateRelationship$1", 0, [$0], []));
    },
    "+updateRelationship:1:0": 2,
    updateTable$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("updateTable", "updateTable$1", 0, [$0], []));
    },
    "+updateTable:1:0": 2,
    validate$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("validate", "validate$0", 0, [], []));
    },
    "+validate:0:0": 2,
    write$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("write", "write$1", 0, [$0], []));
    },
    "+write:1:0": 2,
    writeAll$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("writeAll", "writeAll$2", 0, [$0, $1], []));
    },
    "+writeAll:2:0": 2
  },
  "+Object": 0,
  Pattern: {
    "^": "Object;"
  },
  "+Pattern": 0,
  Match: {
    "^": "Object;"
  },
  "+Match": 0,
  Set: {
    "^": "IterableBase;",
    $isEfficientLength: true
  },
  "+Set": 0,
  StackTrace: {
    "^": "Object;"
  },
  "+StackTrace": 0,
  StringBuffer: {
    "^": "Object;_contents<-",
    get$length: [function(_) {
      return this._contents.length;
    }, null, null, 1, 0, 394, "length"],
    get$isEmpty: [function(_) {
      return this._contents.length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this._contents.length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    write$1: [function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    }, "call$1", "get$write", 2, 0, 318, 132, "write"],
    writeAll$2: [function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    }, "call$2", "get$writeAll", 2, 2, 807, 312, 781, 784, "writeAll"],
    clear$0: [function(_) {
      this._contents = "";
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    toString$0: [function(_) {
      return this._contents;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    StringBuffer$1: [function($content) {
      this._contents = $content;
    }, null, null, 0, 2, 308, 312, 319, ""],
    static: {StringBuffer$: [function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }, null, null, 0, 2, 308, 312, 319, "new StringBuffer"]}
  },
  "+StringBuffer": 0,
  Symbol: {
    "^": "Object;",
    $isSymbol: true
  },
  "+Symbol": 0,
  Type: {
    "^": "Object;"
  },
  "+Type": 0
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  AnchorElement_AnchorElement: [function(href) {
    var e = document.createElement("a", null);
    return e;
  }, "call$1$href", null, 0, 3, 320, 116, 321, "new AnchorElement"],
  _ElementFactoryProvider_createElement_tag: [function(tag, typeExtension) {
    return document.createElement(tag);
  }, "call$2", "_ElementFactoryProvider_createElement_tag$closure", 4, 0, 324, 135, 325, "createElement_tag"],
  _JenkinsSmiHash_combine: [function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  }, "call$2", "_JenkinsSmiHash_combine$closure", 4, 0, 326, 327, 38, "combine"],
  _wrapZone: [function(callback) {
    if (J.$eq($.Zone__current, C.C__RootZone))
      return callback;
    return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
  }, "call$1", "_wrapZone$closure", 2, 0, 330, 34, "_wrapZone"],
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableColElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  "+HtmlElement": 0,
  AnchorElement: {
    "^": "HtmlElement;type}-",
    toString$0: [function(receiver) {
      return receiver.toString();
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    "%": "HTMLAnchorElement"
  },
  "+AnchorElement": 0,
  AreaElement: {
    "^": "HtmlElement;",
    toString$0: [function(receiver) {
      return receiver.toString();
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    "%": "HTMLAreaElement"
  },
  "+AreaElement": 0,
  Blob: {
    "^": "Interceptor;",
    $isBlob: true,
    "%": ";Blob"
  },
  "+Blob": 0,
  ButtonElement: {
    "^": "HtmlElement;disabled}-,name%-,type}-,value%-",
    "%": "HTMLButtonElement"
  },
  "+ButtonElement": 0,
  CanvasElement: {
    "^": "HtmlElement;height%-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    getContext$2: [function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    }, function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    }, "getContext$1", "call$2", null, "get$getContext", 2, 2, 349, 116, 350, 351, "getContext"],
    get$context2D: [function(receiver) {
      return receiver.getContext("2d");
    }, null, null, 1, 0, 352, "context2D"],
    "%": "HTMLCanvasElement"
  },
  "+CanvasElement": 0,
  CanvasRenderingContext: {
    "^": "Interceptor;",
    "%": "WebGLRenderingContext;CanvasRenderingContext"
  },
  "+CanvasRenderingContext": 0,
  CanvasRenderingContext2D: {
    "^": "CanvasRenderingContext;fillStyle}-,font}-,lineWidth}-,strokeStyle}-",
    beginPath$0: [function(receiver) {
      return receiver.beginPath();
    }, "call$0", "get$beginPath", 0, 0, 137, "beginPath"],
    bezierCurveTo$6: [function(receiver, cp1x, cp1y, cp2x, cp2y, x, y) {
      return receiver.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    }, "call$6", "get$bezierCurveTo", 12, 0, 353, 354, 355, 356, 357, 31, 193, "bezierCurveTo"],
    clearRect$4: [function(receiver, x, y, width, height) {
      return receiver.clearRect(x, y, width, height);
    }, "call$4", "get$clearRect", 8, 0, 358, 31, 193, 344, 345, "clearRect"],
    closePath$0: [function(receiver) {
      return receiver.closePath();
    }, "call$0", "get$closePath", 0, 0, 137, "closePath"],
    createLinearGradient$4: [function(receiver, x0, y0, x1, y1) {
      return receiver.createLinearGradient(x0, y0, x1, y1);
    }, "call$4", "get$createLinearGradient", 8, 0, 359, 360, 361, 362, 363, "createLinearGradient"],
    fill$1: [function(receiver, winding) {
      return receiver.fill(winding);
    }, function($receiver) {
      return $receiver.fill();
    }, "fill$0", "call$1", null, "get$fill", 0, 2, 364, 116, 365, "fill"],
    fillRect$4: [function(receiver, x, y, width, height) {
      return receiver.fillRect(x, y, width, height);
    }, "call$4", "get$fillRect", 8, 0, 358, 31, 193, 344, 345, "fillRect"],
    lineTo$2: [function(receiver, x, y) {
      return receiver.lineTo(x, y);
    }, "call$2", "get$lineTo", 4, 0, 366, 31, 193, "lineTo"],
    measureText$1: [function(receiver, text) {
      return receiver.measureText(text);
    }, "call$1", "get$measureText", 2, 0, 367, 368, "measureText"],
    moveTo$2: [function(receiver, x, y) {
      return receiver.moveTo(x, y);
    }, "call$2", "get$moveTo", 4, 0, 366, 31, 193, "moveTo"],
    rect$4: [function(receiver, x, y, width, height) {
      return receiver.rect(x, y, width, height);
    }, "call$4", "get$rect", 8, 0, 358, 31, 193, 344, 345, "rect"],
    stroke$0: [function(receiver) {
      return receiver.stroke();
    }, "call$0", "get$stroke", 0, 0, 137, "stroke"],
    strokeRect$4: [function(receiver, x, y, width, height) {
      return receiver.strokeRect(x, y, width, height);
    }, "call$4", "get$strokeRect", 8, 0, 358, 31, 193, 344, 345, "strokeRect"],
    arc$6: [function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
      receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    }, "call$6", "get$arc", 10, 2, 369, 237, 31, 193, 370, 371, 372, 373, "arc"],
    set$lineDashOffset: [function(receiver, value) {
      return typeof receiver.lineDashOffset != "undefined" ? receiver.lineDashOffset = value : receiver.webkitLineDashOffset = value;
    }, null, null, 3, 0, 374, 38, "lineDashOffset"],
    setLineDash$1: [function(receiver, dash) {
      if (!!receiver.setLineDash)
        receiver.setLineDash(dash);
      else if (!!receiver.webkitLineDash)
        receiver.webkitLineDash = dash;
    }, "call$1", "get$setLineDash", 2, 0, 375, 376, "setLineDash"],
    fillText$4: [function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    }, function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    }, "fillText$3", "call$4", null, "get$fillText", 6, 2, 377, 116, 368, 31, 193, 378, "fillText"],
    "%": "CanvasRenderingContext2D"
  },
  "+CanvasRenderingContext2D": 0,
  CharacterData: {
    "^": "Node;length=-",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  "+CharacterData": 0,
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=-",
    getPropertyValue$1: [function(receiver, propertyName) {
      var propValue = receiver.getPropertyValue(propertyName);
      return propValue != null ? propValue : "";
    }, "call$1", "get$getPropertyValue", 2, 0, 97, 89, "getPropertyValue"],
    setProperty$3: [function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    }, "call$3", "get$setProperty", 4, 2, 379, 116, 89, 38, 380, "setProperty"],
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  "+CssStyleDeclaration": 0,
  Document: {
    "^": "Node;",
    get$onChange: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    }, null, null, 1, 0, 381, "onChange"],
    get$onClick: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    }, null, null, 1, 0, 382, "onClick"],
    "%": "Document|HTMLDocument|XMLDocument"
  },
  "+Document": 0,
  DocumentFragment: {
    "^": "Node;",
    get$children: [function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    }, null, null, 1, 0, 383, "children"],
    "%": "DocumentFragment|ShadowRoot"
  },
  "+DocumentFragment": 0,
  DomError: {
    "^": "Interceptor;name=-",
    "%": "DOMError|FileError"
  },
  "+DomError": 0,
  DomException: {
    "^": "Interceptor;",
    get$name: [function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    }, null, null, 1, 0, 20, "name"],
    toString$0: [function(receiver) {
      return receiver.toString();
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    "%": "DOMException"
  },
  "+DomException": 0,
  Element: {
    "^": "Node;title=-,className%-,id%-,tagName=-",
    get$children: [function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    }, null, null, 1, 0, 383, "children"],
    get$classes: [function(receiver) {
      return new W._ElementCssClassSet(receiver);
    }, null, null, 1, 0, 384, "classes"],
    set$classes: [function(receiver, value) {
      var classSet = this.get$classes(receiver);
      classSet.clear$0(0);
      classSet.addAll$1(classSet, value);
    }, null, null, 3, 0, 385, 38, "classes"],
    get$client: [function(receiver) {
      return P.Rectangle$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight, null);
    }, null, null, 1, 0, 386, "client"],
    toString$0: [function(receiver) {
      return receiver.localName;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    insertAdjacentText$2: [function(receiver, where, text) {
      var t1, t2, first;
      if (!!receiver.insertAdjacentText)
        receiver.insertAdjacentText(where, text);
      else {
        t1 = document.createTextNode(text);
        switch (where.toLowerCase()) {
          case "beforebegin":
            receiver.parentNode.insertBefore(t1, receiver);
            break;
          case "afterbegin":
            if (receiver.childNodes.length > 0) {
              t2 = receiver.childNodes;
              if (0 >= t2.length)
                return H.ioore(t2, 0);
              first = t2[0];
            } else
              first = null;
            receiver.insertBefore(t1, first);
            break;
          case "beforeend":
            receiver.appendChild(t1);
            break;
          case "afterend":
            receiver.parentNode.insertBefore(t1, receiver.nextSibling);
            break;
          default:
            H.throwExpression(new P.ArgumentError("Invalid position " + where));
        }
      }
    }, "call$2", "get$insertAdjacentText", 4, 0, 387, 388, 368, "insertAdjacentText"],
    get$onChange: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    }, null, null, 1, 0, 389, "onChange"],
    get$onClick: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    }, null, null, 1, 0, 390, "onClick"],
    $isElement: true,
    "%": ";Element"
  },
  "+Element": 0,
  EmbedElement: {
    "^": "HtmlElement;height%-,name%-,src%-,type}-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "HTMLEmbedElement"
  },
  "+EmbedElement": 0,
  ErrorEvent: {
    "^": "Event;error=-",
    "%": "ErrorEvent"
  },
  "+ErrorEvent": 0,
  Event: {
    "^": "Interceptor;",
    preventDefault$0: [function(receiver) {
      return receiver.preventDefault();
    }, "call$0", "get$preventDefault", 0, 0, 137, "preventDefault"],
    $isEvent: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event"
  },
  "+Event": 0,
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: [function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    }, "call$3", "get$addEventListener", 4, 2, 391, 116, 117, 392, 393, "addEventListener"],
    removeEventListener$3: [function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    }, "call$3", "get$removeEventListener", 4, 2, 391, 116, 117, 392, 393, "removeEventListener"],
    "%": ";EventTarget"
  },
  "+EventTarget": 0,
  FieldSetElement: {
    "^": "HtmlElement;disabled}-,name%-",
    "%": "HTMLFieldSetElement"
  },
  "+FieldSetElement": 0,
  File: {
    "^": "Blob;name=-",
    "%": "File"
  },
  "+File": 0,
  FormElement: {
    "^": "HtmlElement;length=-,name%-",
    "%": "HTMLFormElement"
  },
  "+FormElement": 0,
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 395, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    }, "call$2", "get$[]=", 4, 0, 396, 12, 38, "[]="],
    set$length: [function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    }, null, null, 3, 0, 397, 38, "length"],
    elementAt$1: [function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    }, "call$1", "get$elementAt", 2, 0, 395, 12, "elementAt"],
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  "+HtmlCollection": 0,
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    open$5$async$password$user: [function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    }, function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    }, "open$3$async", function($receiver, method, url) {
      return $receiver.open(method, url);
    }, "open$2", "call$5$async$password$user", null, null, "get$open", 4, 7, 398, 116, 116, 116, 399, 400, 401, 402, 403, "open"],
    send$1: [function(receiver, data) {
      return receiver.send(data);
    }, "call$1", "get$send", 0, 2, 404, 116, 335, "send"],
    "%": "XMLHttpRequest"
  },
  "+HttpRequest": 0,
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  "+HttpRequestEventTarget": 0,
  IFrameElement: {
    "^": "HtmlElement;height%-,name%-,src%-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "HTMLIFrameElement"
  },
  "+IFrameElement": 0,
  ImageData: {
    "^": "Interceptor;height=-,width=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    $isImageData: true,
    "%": "ImageData"
  },
  "+ImageData": 0,
  ImageElement: {
    "^": "HtmlElement;height%-,src%-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "HTMLImageElement"
  },
  "+ImageElement": 0,
  InputElement: {
    "^": "HtmlElement;checked%-,disabled}-,height%-,name%-,placeholder}-,src%-,type}-,value%-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    $isElement: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  "+InputElement": 0,
  KeyboardEvent: {
    "^": "UIEvent;",
    "%": "KeyboardEvent"
  },
  "+KeyboardEvent": 0,
  KeygenElement: {
    "^": "HtmlElement;disabled}-,name%-",
    "%": "HTMLKeygenElement"
  },
  "+KeygenElement": 0,
  LIElement: {
    "^": "HtmlElement;value%-",
    "%": "HTMLLIElement"
  },
  "+LIElement": 0,
  LinkElement: {
    "^": "HtmlElement;disabled}-,type}-",
    "%": "HTMLLinkElement"
  },
  "+LinkElement": 0,
  MapElement: {
    "^": "HtmlElement;name%-",
    "%": "HTMLMapElement"
  },
  "+MapElement": 0,
  MediaElement: {
    "^": "HtmlElement;error=-,src%-",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  "+MediaElement": 0,
  MediaStream: {
    "^": "EventTarget;id=-",
    "%": "MediaStream"
  },
  "+MediaStream": 0,
  MetaElement: {
    "^": "HtmlElement;name%-",
    "%": "HTMLMetaElement"
  },
  "+MetaElement": 0,
  MeterElement: {
    "^": "HtmlElement;value%-",
    "%": "HTMLMeterElement"
  },
  "+MeterElement": 0,
  MouseEvent: {
    "^": "UIEvent;",
    get$client: [function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    }, null, null, 1, 0, 405, "client"],
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  "+MouseEvent": 0,
  NavigatorUserMediaError: {
    "^": "Interceptor;name=-",
    "%": "NavigatorUserMediaError"
  },
  "+NavigatorUserMediaError": 0,
  Node: {
    "^": "EventTarget;",
    remove$0: [function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    }, "call$0", "get$remove", 0, 0, 137, "remove"],
    replaceWith$1: [function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    }, "call$1", "get$replaceWith", 2, 0, 406, 407, "replaceWith"],
    toString$0: [function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    _replaceChild$2: [function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    }, "call$2", "get$_replaceChild", 4, 0, 408, 409, 410, "_replaceChild"],
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  "+Node": 0,
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 395, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    }, "call$2", "get$[]=", 4, 0, 396, 12, 38, "[]="],
    set$length: [function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    }, null, null, 3, 0, 397, 38, "length"],
    elementAt$1: [function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    }, "call$1", "get$elementAt", 2, 0, 395, 12, "elementAt"],
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  "+NodeList": 0,
  OListElement: {
    "^": "HtmlElement;start=-,type}-",
    "%": "HTMLOListElement"
  },
  "+OListElement": 0,
  ObjectElement: {
    "^": "HtmlElement;height%-,name%-,type}-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "HTMLObjectElement"
  },
  "+ObjectElement": 0,
  OptGroupElement: {
    "^": "HtmlElement;disabled}-",
    "%": "HTMLOptGroupElement"
  },
  "+OptGroupElement": 0,
  OptionElement: {
    "^": "HtmlElement;disabled}-,value%-",
    "%": "HTMLOptionElement"
  },
  "+OptionElement": 0,
  OutputElement: {
    "^": "HtmlElement;name%-,value%-",
    "%": "HTMLOutputElement"
  },
  "+OutputElement": 0,
  ParamElement: {
    "^": "HtmlElement;name%-,value%-",
    "%": "HTMLParamElement"
  },
  "+ParamElement": 0,
  ProgressElement: {
    "^": "HtmlElement;value%-",
    "%": "HTMLProgressElement"
  },
  "+ProgressElement": 0,
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  "+ProgressEvent": 0,
  ScriptElement: {
    "^": "HtmlElement;src%-,type}-",
    "%": "HTMLScriptElement"
  },
  "+ScriptElement": 0,
  SelectElement: {
    "^": "HtmlElement;disabled}-,length=-,name%-,value%-",
    "%": "HTMLSelectElement"
  },
  "+SelectElement": 0,
  SourceElement: {
    "^": "HtmlElement;src%-,type}-",
    "%": "HTMLSourceElement"
  },
  "+SourceElement": 0,
  SpeechRecognitionError: {
    "^": "Event;error=-",
    "%": "SpeechRecognitionError"
  },
  "+SpeechRecognitionError": 0,
  SpeechSynthesisEvent: {
    "^": "Event;name=-",
    "%": "SpeechSynthesisEvent"
  },
  "+SpeechSynthesisEvent": 0,
  StyleElement: {
    "^": "HtmlElement;disabled}-,type}-",
    "%": "HTMLStyleElement"
  },
  "+StyleElement": 0,
  TableCellElement: {
    "^": "HtmlElement;",
    "%": "HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement"
  },
  "+TableCellElement": 0,
  TableElement: {
    "^": "HtmlElement;",
    get$rows: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._WrappedList(receiver.rows), [W.TableRowElement]);
    }, null, null, 1, 0, 411, "rows"],
    "%": "HTMLTableElement"
  },
  "+TableElement": 0,
  TableRowElement: {
    "^": "HtmlElement;",
    get$cells: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._WrappedList(receiver.cells), [W.TableCellElement]);
    }, null, null, 1, 0, 412, "cells"],
    "%": "HTMLTableRowElement"
  },
  "+TableRowElement": 0,
  TableSectionElement: {
    "^": "HtmlElement;",
    get$rows: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._WrappedList(receiver.rows), [W.TableRowElement]);
    }, null, null, 1, 0, 411, "rows"],
    "%": "HTMLTableSectionElement"
  },
  "+TableSectionElement": 0,
  TextAreaElement: {
    "^": "HtmlElement;disabled}-,name%-,placeholder}-,rows=-,value%-",
    "%": "HTMLTextAreaElement"
  },
  "+TextAreaElement": 0,
  TextMetrics: {
    "^": "Interceptor;width=-",
    "%": "TextMetrics"
  },
  "+TextMetrics": 0,
  TrackElement: {
    "^": "HtmlElement;src%-",
    "%": "HTMLTrackElement"
  },
  "+TrackElement": 0,
  UIEvent: {
    "^": "Event;which=-",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"
  },
  "+UIEvent": 0,
  VideoElement: {
    "^": "MediaElement;height%-,width%-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "HTMLVideoElement"
  },
  "+VideoElement": 0,
  Window: {
    "^": "EventTarget;name%-",
    open$3: [function(receiver, url, $name, options) {
      return W._DOMWindowCrossFrame__createSafe(receiver.open(url, $name));
    }, function($receiver, url, name) {
      return this.open$3($receiver, url, name, null);
    }, "open$2", "call$3", null, "get$open", 4, 2, 413, 116, 400, 40, 414, "open"],
    _requestAnimationFrame$1: [function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    }, "call$1", "get$_requestAnimationFrame", 2, 0, 415, 34, "_requestAnimationFrame"],
    _ensureRequestAnimationFrame$0: [function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
        (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
    }, "call$0", "get$_ensureRequestAnimationFrame", 0, 0, 16, "_ensureRequestAnimationFrame"],
    css$2: function($receiver, arg0, arg1) {
      return $receiver.CSS.call$2(arg0, arg1);
    },
    toString$0: [function(receiver) {
      return receiver.toString();
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    get$onChange: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    }, null, null, 1, 0, 381, "onChange"],
    get$onClick: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    }, null, null, 1, 0, 382, "onClick"],
    $isWindow: true,
    "%": "DOMWindow|Window"
  },
  "+Window": 0,
  _Attr: {
    "^": "Node;name=-,value%-",
    "%": "Attr"
  },
  "+_Attr": 0,
  _ClientRect: {
    "^": "Interceptor;bottom=-,height=-,left=-,right=-,top=-,width=-",
    toString$0: [function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $eq: [function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    }, null, null, 1, 0, 394, "hashCode"],
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  "+_ClientRect": 0,
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 395, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    }, "call$2", "get$[]=", 4, 0, 396, 12, 38, "[]="],
    set$length: [function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    }, null, null, 3, 0, 397, 38, "length"],
    elementAt$1: [function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    }, "call$1", "get$elementAt", 2, 0, 395, 12, "elementAt"],
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  "+_NamedNodeMap": 0,
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    set$backgroundColor: [function(receiver, value) {
      this.setProperty$3(receiver, "background-color", value, "");
    }, null, null, 3, 0, 99, 38, "backgroundColor"],
    set$backgroundImage: [function(receiver, value) {
      this.setProperty$3(receiver, "background-image", value, "");
    }, null, null, 3, 0, 99, 38, "backgroundImage"],
    get$clear: [function(receiver) {
      return this.getPropertyValue$1(receiver, "clear");
    }, null, null, 1, 0, 20, "clear"],
    clear$0: function($receiver) {
      return this.get$clear($receiver).call$0();
    },
    set$cursor: [function(receiver, value) {
      this.setProperty$3(receiver, "cursor", value, "");
    }, null, null, 3, 0, 99, 38, "cursor"],
    set$display: [function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    }, null, null, 3, 0, 99, 38, "display"],
    get$height: [function(receiver) {
      return this.getPropertyValue$1(receiver, "height");
    }, null, null, 1, 0, 20, "height"],
    height$0: function($receiver) {
      return this.get$height($receiver).call$0();
    },
    set$height: [function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    }, null, null, 3, 0, 99, 38, "height"],
    set$overflow: [function(receiver, value) {
      this.setProperty$3(receiver, "overflow", value, "");
    }, null, null, 3, 0, 99, 38, "overflow"],
    get$width: [function(receiver) {
      return this.getPropertyValue$1(receiver, "width");
    }, null, null, 1, 0, 20, "width"],
    set$width: [function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    }, null, null, 3, 0, 99, 38, "width"]
  },
  "+CssStyleDeclarationBase": 0,
  _ChildrenElementList: {
    "^": "ListBase;_element-,_childElements-",
    get$isEmpty: [function(_) {
      return this._element.firstElementChild == null;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$length: [function(_) {
      return this._childElements.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, 808, 12, "[]"],
    $indexSet: [function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    }, "call$2", "get$[]=", 4, 0, 809, 12, 38, "[]="],
    set$length: [function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    }, null, null, 3, 0, 397, 425, "length"],
    add$1: [function(_, value) {
      this._element.appendChild(value);
      return value;
    }, "call$1", "get$add", 2, 0, 810, 38, "add"],
    get$iterator: [function(_) {
      var t1 = this.toList$0(this);
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    }, null, null, 1, 0, 811, "iterator"],
    setRange$4: [function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    }, "call$4", "get$setRange", 6, 2, 812, 295, 208, 209, 199, 200, "setRange"],
    remove$1: [function(_, object) {
      var t1;
      if (!!J.getInterceptor(object).$isElement) {
        t1 = this._element;
        if (object.parentNode === t1) {
          t1.removeChild(object);
          return true;
        }
      }
      return false;
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    insert$2: [function(_, index, element) {
      var t1, t2, t3;
      if (index > this._childElements.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._childElements.length));
      t1 = this._childElements;
      t2 = t1.length;
      t3 = this._element;
      if (index === t2)
        t3.appendChild(element);
      else {
        if (index >= t2)
          return H.ioore(t1, index);
        t3.insertBefore(element, t1[index]);
      }
    }, "call$2", "get$insert", 4, 0, 809, 12, 218, "insert"],
    clear$0: [function(_) {
      this._element.textContent = "";
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    removeAt$1: [function(_, index) {
      var t1, result;
      t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      result = t1[index];
      this._element.removeChild(result);
      return result;
    }, "call$1", "get$removeAt", 2, 0, 808, 12, "removeAt"],
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    }
  },
  "+_ChildrenElementList": 0,
  _FrozenElementList: {
    "^": "ListBase;_nodeList-,_elementList-",
    get$length: [function(_) {
      return this._nodeList.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, 808, 12, "[]"],
    $indexSet: [function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    }, "call$2", "get$[]=", 4, 0, 809, 12, 38, "[]="],
    set$length: [function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    }, null, null, 3, 0, 397, 425, "length"],
    set$classes: [function(_, value) {
      H.IterableMixinWorkaround_forEach(this._elementList, new W._FrozenElementList_classes_closure(value));
    }, null, null, 3, 0, 385, 38, "classes"],
    get$onChange: [function(_) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_change._eventType), [null]);
    }, null, null, 1, 0, 389, "onChange"],
    get$onClick: [function(_) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_click._eventType), [null]);
    }, null, null, 1, 0, 390, "onClick"],
    _html$_FrozenElementList$_wrap$1: [function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }, null, null, 2, 0, 322, 323, "_wrap"],
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_FrozenElementList$_wrap: [function(_nodeList, $T) {
        var t1 = H.setRuntimeTypeInfo(new W._FrozenElementList(_nodeList, null), [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }, null, null, 2, 0, 322, 323, "new _FrozenElementList$_wrap"]}
  },
  "+_FrozenElementList": 0,
  _FrozenElementList$_wrap_closure: {
    "^": "Closure:0;",
    call$1: [function(e) {
      return !!J.getInterceptor(e).$isElement;
    }, "call$1", null, 2, 0, 0, 22, "call"],
    $isFunction: true
  },
  "+ _FrozenElementList$_wrap_closure": 0,
  _FrozenElementList_classes_closure: {
    "^": "Closure:0;value_0-",
    call$1: [function(e) {
      var t1 = this.value_0;
      J.set$classes$x(e, t1);
      return t1;
    }, "call$1", null, 2, 0, 0, 22, "call"],
    $isFunction: true
  },
  "+ _FrozenElementList_classes_closure": 0,
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this-",
    add$1: [function(_, value) {
      this._this.appendChild(value);
    }, "call$1", "get$add", 2, 0, 813, 38, "add"],
    insert$2: [function(_, index, node) {
      var t1, t2, t3;
      if (index < 0 || index > this._this.childNodes.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._this.childNodes.length));
      t1 = this._this;
      t2 = t1.childNodes;
      t3 = t2.length;
      if (index === t3)
        t1.appendChild(node);
      else {
        if (index < 0 || index >= t3)
          return H.ioore(t2, index);
        t1.insertBefore(node, t2[index]);
      }
    }, "call$2", "get$insert", 4, 0, 396, 12, 814, "insert"],
    removeAt$1: [function(_, index) {
      var t1, t2, result;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      result = t2[index];
      t1.removeChild(result);
      return result;
    }, "call$1", "get$removeAt", 2, 0, 395, 12, "removeAt"],
    remove$1: [function(_, object) {
      var t1;
      if (!J.getInterceptor(object).$isNode)
        return false;
      t1 = this._this;
      if (t1 !== object.parentNode)
        return false;
      t1.removeChild(object);
      return true;
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    clear$0: [function(_) {
      this._this.textContent = "";
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    $indexSet: [function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    }, "call$2", "get$[]=", 4, 0, 396, 12, 38, "[]="],
    get$iterator: [function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    }, null, null, 1, 0, 815, "iterator"],
    setRange$4: [function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    }, "call$4", "get$setRange", 6, 2, 816, 295, 208, 209, 199, 200, "setRange"],
    get$length: [function(_) {
      return this._this.childNodes.length;
    }, null, null, 1, 0, 394, "length"],
    set$length: [function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    }, null, null, 3, 0, 397, 38, "length"],
    $index: [function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, 395, 12, "[]"],
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  "+_ChildNodeListLazy": 0,
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  WindowBase: {
    "^": "Object;"
  },
  "+WindowBase": 0,
  CssClassSet: {
    "^": "Object;",
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSString];
    }
  },
  "+CssClassSet": 0,
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_element-",
    readClasses$0: [function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      for (t1 = J.get$iterator$ax(J.split$1$s(J.get$className$x(this._element), " ")); t1.moveNext$0() === true;) {
        trimmed = J.trim$0$s(t1.get$current());
        if (J.get$isEmpty$asx(trimmed) !== true)
          s.add$1(0, trimmed);
      }
      return s;
    }, "call$0", "get$readClasses", 0, 0, 817, "readClasses"],
    writeClasses$1: [function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._element, s.join$1(0, " "));
    }, "call$1", "get$writeClasses", 2, 0, 818, 123, "writeClasses"]
  },
  "+_ElementCssClassSet": 0,
  EventStreamProvider: {
    "^": "Object;_eventType-"
  },
  "+EventStreamProvider": 0,
  ElementStream: {
    "^": "Object;"
  },
  "+ElementStream": 0,
  _EventStream: {
    "^": "Stream;_target-,_eventType-,_useCapture-",
    listen$4$cancelOnError$onDone$onError: [function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    }, function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }, "listen$1", function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }, "listen$3$onDone$onError", "call$4$cancelOnError$onDone$onError", null, null, "get$listen", 2, 7, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__void__T__bool_void__Function1", ret: [P.StreamSubscription, T], args: [{func: "void__T10", void: true, args: [T]}], named: {cancelOnError: J.JSBool, onDone: {func: "void_", void: true}, onError: P.Function}};
      }, this.$receiver, "_EventStream");
    }, 116, 116, 116, 754, 251, 755, 723, "listen"]
  },
  "+_EventStream": 0,
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target-,_eventType-,_useCapture-"
  },
  "+_ElementEventStreamImpl": 0,
  _ElementListEventStreamImpl: {
    "^": "Stream;_targetList-,_useCapture-,_eventType-",
    listen$4$cancelOnError$onDone$onError: [function(onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = H.setRuntimeTypeInfo(new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null])), [null]);
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1._current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(0, t4);
      }
      t1 = pool._html$_controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    }, function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }, "listen$1", function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }, "listen$3$onDone$onError", "call$4$cancelOnError$onDone$onError", null, null, "get$listen", 2, 7, function() {
      return H.computeSignature(function(T) {
        return {func: "StreamSubscription__void__T__bool_void__Function2", ret: [P.StreamSubscription, T], args: [{func: "void__T11", void: true, args: [T]}], named: {cancelOnError: J.JSBool, onDone: {func: "void_", void: true}, onError: P.Function}};
      }, this.$receiver, "_ElementListEventStreamImpl");
    }, 116, 116, 116, 754, 251, 755, 723, "listen"]
  },
  "+_ElementListEventStreamImpl": 0,
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount-,_target-,_eventType-,_onData-,_useCapture-",
    cancel$0: [function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    }, "call$0", "get$cancel", 0, 0, 726, "cancel"],
    pause$1: [function(_, resumeSignal) {
      if (this._target == null)
        return;
      this._pauseCount = this._pauseCount + 1;
      this._unlisten$0();
    }, function($receiver) {
      return this.pause$1($receiver, null);
    }, "pause$0", "call$1", null, "get$pause", 0, 2, 748, 116, 749, "pause"],
    get$isPaused: [function() {
      return this._pauseCount > 0;
    }, null, null, 1, 0, 346, "isPaused"],
    resume$0: [function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      this._pauseCount = this._pauseCount - 1;
      this._tryResume$0();
    }, "call$0", "get$resume", 0, 0, 137, "resume"],
    _tryResume$0: [function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }, "call$0", "get$_tryResume", 0, 0, 137, "_tryResume"],
    _unlisten$0: [function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }, "call$0", "get$_unlisten", 0, 0, 137, "_unlisten"]
  },
  "+_EventStreamSubscription": 0,
  _StreamPool: {
    "^": "Object;_html$_controller-,_subscriptions-",
    add$1: [function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = this._html$_controller;
      t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._html$_controller.get$addError()));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__Stream", void: true, args: [[P.Stream, T]]};
      }, this.$receiver, "_StreamPool");
    }, 819, "add"],
    remove$1: [function(_, stream) {
      var subscription = this._subscriptions.remove$1(0, stream);
      if (subscription != null)
        subscription.cancel$0();
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__Stream", void: true, args: [[P.Stream, T]]};
      }, this.$receiver, "_StreamPool");
    }, 819, "remove"],
    close$0: [function(_) {
      var t1, t2, t3;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t3.get$iterator(t3), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.cancel$0();
      t1.clear$0(0);
      this._html$_controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 137, "close"],
    _html$_StreamPool$broadcast$0: [function($T) {
      var t1 = this.get$close(this);
      t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(null, t1, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
      this._html$_controller = t1;
    }, null, null, 0, 0, 16, "broadcast"]
  },
  "+_StreamPool": 0,
  _StreamPool_add_closure: {
    "^": "Closure:16;this_0-,stream_1-",
    call$0: [function() {
      return this.this_0.remove$1(0, this.stream_1);
    }, "call$0", null, 0, 0, 16, "call"],
    $isFunction: true
  },
  "+ _StreamPool_add_closure": 0,
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: [function(receiver) {
      return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_12", ret: [P.Iterator, E]};
      }, this.$receiver, "ImmutableListMixin");
    }, "iterator"],
    add$1: [function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E8", void: true, args: [E]};
      }, this.$receiver, "ImmutableListMixin");
    }, 38, "add"],
    insert$2: [function(receiver, index, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E2", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "ImmutableListMixin");
    }, 12, 218, "insert"],
    removeAt$1: [function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int4", ret: E, args: [J.JSInt]};
      }, this.$receiver, "ImmutableListMixin");
    }, 820, "removeAt"],
    remove$1: [function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }, "call$1", "get$remove", 2, 0, 422, 1, "remove"],
    setRange$4: [function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    }, "call$4", "get$setRange", 6, 2, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_int_Iterable__int2", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, E]], opt: [J.JSInt]};
      }, this.$receiver, "ImmutableListMixin");
    }, 295, 208, 209, 199, 200, "setRange"],
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+ImmutableListMixin": 0,
  _WrappedList: {
    "^": "ListBase;_list-",
    get$iterator: [function(_) {
      return H.setRuntimeTypeInfo(new W._WrappedIterator(J.get$iterator$ax(this._list)), [null]);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterator_13", ret: [P.Iterator, E]};
      }, this.$receiver, "_WrappedList");
    }, "iterator"],
    get$length: [function(_) {
      return this._list.length;
    }, null, null, 1, 0, 394, "length"],
    add$1: [function(_, element) {
      J.add$1$ax(this._list, element);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E9", void: true, args: [E]};
      }, this.$receiver, "_WrappedList");
    }, 218, "add"],
    remove$1: [function(_, element) {
      return J.remove$1$ax(this._list, element);
    }, "call$1", "get$remove", 2, 0, 422, 218, "remove"],
    clear$0: [function(_) {
      J.clear$0$ax(this._list);
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    $index: [function(_, index) {
      var t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int5", ret: E, args: [J.JSInt]};
      }, this.$receiver, "_WrappedList");
    }, 12, "[]"],
    $indexSet: [function(_, index, value) {
      var t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E3", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "_WrappedList");
    }, 12, 38, "[]="],
    set$length: [function(_, newLength) {
      J.set$length$asx(this._list, newLength);
    }, null, null, 3, 0, 397, 425, "length"],
    indexOf$2: [function(_, element, start) {
      return J.indexOf$2$asx(this._list, element, start);
    }, function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    }, "indexOf$1", "call$2", null, "get$indexOf", 2, 2, 424, 295, 218, 208, "indexOf"],
    insert$2: [function(_, index, element) {
      return J.insert$2$ax(this._list, index, element);
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E3", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "_WrappedList");
    }, 12, 218, "insert"],
    removeAt$1: [function(_, index) {
      return J.removeAt$1$ax(this._list, index);
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int5", ret: E, args: [J.JSInt]};
      }, this.$receiver, "_WrappedList");
    }, 12, "removeAt"],
    setRange$4: [function(_, start, end, iterable, skipCount) {
      J.setRange$4$ax(this._list, start, end, iterable, skipCount);
    }, "call$4", "get$setRange", 6, 2, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_int_Iterable__int3", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, E]], opt: [J.JSInt]};
      }, this.$receiver, "_WrappedList");
    }, 295, 208, 209, 199, 200, "setRange"]
  },
  "+_WrappedList": 0,
  _WrappedIterator: {
    "^": "Object;_html$_iterator-",
    moveNext$0: [function() {
      return this._html$_iterator.moveNext$0();
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"],
    get$current: [function() {
      return this._html$_iterator._html$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E_7", ret: E};
      }, this.$receiver, "_WrappedIterator");
    }, "current"]
  },
  "+_WrappedIterator": 0,
  FixedSizeListIterator: {
    "^": "Object;_array-,_html$_length-,_position-,_html$_current-",
    moveNext$0: [function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    }, "call$0", "get$moveNext", 0, 0, 346, "moveNext"],
    get$current: [function() {
      return this._html$_current;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T_1", ret: T};
      }, this.$receiver, "FixedSizeListIterator");
    }, "current"]
  },
  "+FixedSizeListIterator": 0,
  _DOMWindowCrossFrame: {
    "^": "Object;_window-",
    addEventListener$3: [function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    }, "call$3", "get$addEventListener", 4, 2, 391, 116, 117, 392, 393, "addEventListener"],
    removeEventListener$3: [function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    }, "call$3", "get$removeEventListener", 4, 2, 391, 116, 117, 392, 393, "removeEventListener"],
    static: {_DOMWindowCrossFrame__createSafe: [function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }, "call$1", "_DOMWindowCrossFrame__createSafe$closure", 2, 0, 328, 329, "_createSafe"]}
  },
  "+_DOMWindowCrossFrame": 0
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  },
  "+KeyRange": 0
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  FEBlendElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEBlendElement"
  },
  "+FEBlendElement": 0,
  FEColorMatrixElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEColorMatrixElement"
  },
  "+FEColorMatrixElement": 0,
  FEComponentTransferElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEComponentTransferElement"
  },
  "+FEComponentTransferElement": 0,
  FECompositeElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFECompositeElement"
  },
  "+FECompositeElement": 0,
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEConvolveMatrixElement"
  },
  "+FEConvolveMatrixElement": 0,
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEDiffuseLightingElement"
  },
  "+FEDiffuseLightingElement": 0,
  FEDisplacementMapElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEDisplacementMapElement"
  },
  "+FEDisplacementMapElement": 0,
  FEFloodElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEFloodElement"
  },
  "+FEFloodElement": 0,
  FEGaussianBlurElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEGaussianBlurElement"
  },
  "+FEGaussianBlurElement": 0,
  FEImageElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEImageElement"
  },
  "+FEImageElement": 0,
  FEMergeElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEMergeElement"
  },
  "+FEMergeElement": 0,
  FEMorphologyElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEMorphologyElement"
  },
  "+FEMorphologyElement": 0,
  FEOffsetElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFEOffsetElement"
  },
  "+FEOffsetElement": 0,
  FEPointLightElement: {
    "^": "SvgElement;x=-,y=-",
    "%": "SVGFEPointLightElement"
  },
  "+FEPointLightElement": 0,
  FESpecularLightingElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFESpecularLightingElement"
  },
  "+FESpecularLightingElement": 0,
  FESpotLightElement: {
    "^": "SvgElement;x=-,y=-",
    "%": "SVGFESpotLightElement"
  },
  "+FESpotLightElement": 0,
  FETileElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFETileElement"
  },
  "+FETileElement": 0,
  FETurbulenceElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFETurbulenceElement"
  },
  "+FETurbulenceElement": 0,
  FilterElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGFilterElement"
  },
  "+FilterElement": 0,
  ForeignObjectElement: {
    "^": "GraphicsElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGForeignObjectElement"
  },
  "+ForeignObjectElement": 0,
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  "+GeometryElement": 0,
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  "+GraphicsElement": 0,
  ImageElement0: {
    "^": "GraphicsElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGImageElement"
  },
  "+ImageElement": 0,
  MaskElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGMaskElement"
  },
  "+MaskElement": 0,
  PatternElement: {
    "^": "SvgElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGPatternElement"
  },
  "+PatternElement": 0,
  RectElement: {
    "^": "GeometryElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGRectElement"
  },
  "+RectElement": 0,
  ScriptElement0: {
    "^": "SvgElement;type}-",
    "%": "SVGScriptElement"
  },
  "+ScriptElement": 0,
  StyleElement0: {
    "^": "SvgElement;disabled}-,type}-",
    get$title: [function(receiver) {
      return receiver.title;
    }, null, null, 1, 0, 20, "title"],
    "%": "SVGStyleElement"
  },
  "+StyleElement": 0,
  SvgElement: {
    "^": "Element;",
    get$classes: [function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    }, null, null, 1, 0, 384, "classes"],
    get$children: [function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    }, null, null, 1, 0, 383, "children"],
    insertAdjacentText$2: [function(receiver, where, text) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentText on SVG."));
    }, "call$2", "get$insertAdjacentText", 4, 0, 387, 388, 368, "insertAdjacentText"],
    get$onChange: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    }, null, null, 1, 0, 389, "onChange"],
    get$onClick: [function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    }, null, null, 1, 0, 390, "onClick"],
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  "+SvgElement": 0,
  SvgSvgElement: {
    "^": "GraphicsElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGSVGElement"
  },
  "+SvgSvgElement": 0,
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  "+TextContentElement": 0,
  TextPositioningElement: {
    "^": "TextContentElement;x=-,y=-",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  "+TextPositioningElement": 0,
  UseElement: {
    "^": "GraphicsElement;height=-,width=-,x=-,y=-",
    height$0: function($receiver) {
      return $receiver.height.call$0();
    },
    "%": "SVGUseElement"
  },
  "+UseElement": 0,
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element-",
    readClasses$0: [function() {
      var classname, s, t1, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (J.get$isEmpty$asx(trimmed) !== true)
          s.add$1(0, trimmed);
      }
      return s;
    }, "call$0", "get$readClasses", 0, 0, 817, "readClasses"],
    writeClasses$1: [function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }, "call$1", "get$writeClasses", 2, 0, 821, 123, "writeClasses"]
  },
  "+_AttributeClassSet": 0
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: [function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }, "call$0", null, 0, 0, 331, "new Capability"]}
  },
  "+Capability": 0,
  SendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  "+SendPort": 0
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _convertDartFunction: [function(f, captureThis) {
    return function(_call, f, captureThis) {return function() {return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));}}(P._callDartFunction, f, captureThis);
  }, "call$2$captureThis", "_convertDartFunction$closure", 2, 3, 332, 237, 203, 333, "_convertDartFunction"],
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, 334, 34, 333, 261, 43, "_callDartFunction"],
  _defineProperty: [function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o))
      try {
        Object.defineProperty(o, $name, { value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  }, "call$3", "_defineProperty$closure", 6, 0, 336, 337, 40, 38, "_defineProperty"],
  _getOwnProperty: [function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  }, "call$2", "_getOwnProperty$closure", 4, 0, 338, 337, 40, "_getOwnProperty"],
  _convertToJS: [function(o) {
    var t1;
    if (o == null)
      return;
    else {
      if (typeof o !== "string")
        if (typeof o !== "number")
          if (typeof o !== "boolean") {
            t1 = J.getInterceptor(o);
            t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
          } else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return o;
      else {
        t1 = J.getInterceptor(o);
        if (!!t1.$isDateTime)
          return H.Primitives_lazyAsJsDate(o);
        else if (!!t1.$isJsObject)
          return o._js$_jsObject;
        else if (!!t1.$isFunction)
          return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
        else
          return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
      }
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 0, 337, "_convertToJS"],
  _getJsProxy: [function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  }, "call$3", "_getJsProxy$closure", 6, 0, 339, 337, 89, 340, "_getJsProxy"],
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 284, 337, "_convertToDart"],
  _wrapToDart: [function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  }, "call$1", "_wrapToDart$closure", 2, 0, 341, 337, "_wrapToDart"],
  _getDartProxy: [function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  }, "call$3", "_getDartProxy$closure", 6, 0, 339, 337, 89, 340, "_getDartProxy"],
  JsObject: {
    "^": "Object;_js$_jsObject-",
    $index: [function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(new P.ArgumentError("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    }, "call$1", "get$[]", 2, 0, 0, 134, "[]"],
    $indexSet: [function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(new P.ArgumentError("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    }, "call$2", "get$[]=", 4, 0, 59, 134, 38, "[]="],
    get$hashCode: [function(_) {
      return 0;
    }, null, null, 1, 0, 394, "hashCode"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._js$_jsObject === other._js$_jsObject;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    hasProperty$1: [function(property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(new P.ArgumentError("property is not a String or num"));
      return property in this._js$_jsObject;
    }, "call$1", "get$hasProperty", 2, 0, 30, 134, "hasProperty"],
    toString$0: [function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    callMethod$2: [function(method, args) {
      var t1, t2;
      if (typeof method !== "string" && typeof method !== "number")
        throw H.wrapException(new P.ArgumentError("method is not a String or num"));
      t1 = this._js$_jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    }, "call$2", "get$callMethod", 2, 2, 822, 116, 399, 19, "callMethod"],
    $isJsObject: true,
    static: {JsObject__convertDataTree: [function(data) {
        return new P.JsObject__convertDataTree__convert(P.HashMap_HashMap$identity(null, null)).call$1(data);
      }, "call$1", "JsObject__convertDataTree$closure", 2, 0, 0, 335, "_convertDataTree"]}
  },
  "+JsObject": 0,
  JsObject__convertDataTree__convert: {
    "^": "Closure:0;_convertedObjects_0-",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._convertedObjects_0;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ JsObject__convertDataTree__convert": 0,
  JsFunction: {
    "^": "JsObject;_js$_jsObject-",
    apply$2$thisArg: [function(args, thisArg) {
      var t1, t2;
      t1 = P._convertToJS(thisArg);
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(this._js$_jsObject.apply(t1, t2));
    }, "call$2$thisArg", "get$apply", 2, 3, 823, 116, 19, 348, "apply"],
    $isJsFunction: true
  },
  "+JsFunction": 0,
  JsArray: {
    "^": "JsObject_ListMixin;_js$_jsObject-",
    _js$_checkIndex$1: [function(_, index) {
      var t1;
      if (typeof index === "number" && Math.floor(index) === index)
        if (!(index < 0)) {
          t1 = P.JsObject.prototype.$index.call(this, this, "length");
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = index >= t1;
        } else
          t1 = true;
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
    }, "call$1", "get$_js$_checkIndex", 2, 0, 170, 12, "_checkIndex"],
    $index: [function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          if (!(index < 0)) {
            t1 = P.JsObject.prototype.$index.call(this, this, "length");
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = index >= t1;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__dynamic", ret: E, args: [null]};
      }, this.$receiver, "JsArray");
    }, 12, "[]"],
    $indexSet: [function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          if (!(index < 0)) {
            t1 = P.JsObject.prototype.$index.call(this, this, "length");
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = index >= t1;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__dynamic_E", void: true, args: [null, E]};
      }, this.$receiver, "JsArray");
    }, 12, 38, "[]="],
    get$length: [function(_) {
      return P.JsObject.prototype.$index.call(this, this, "length");
    }, null, null, 1, 0, 394, "length"],
    set$length: [function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    }, null, null, 3, 0, 397, 7, "length"],
    add$1: [function(_, value) {
      this.callMethod$2("push", [value]);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__E10", void: true, args: [E]};
      }, this.$receiver, "JsArray");
    }, 38, "add"],
    insert$2: [function(_, index, element) {
      var t1 = J.$add$ns(P.JsObject.prototype.$index.call(this, this, "length"), 1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = index >= t1;
      if (t1)
        H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      this.callMethod$2("splice", [index, 0, element]);
    }, "call$2", "get$insert", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E4", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "JsArray");
    }, 12, 218, "insert"],
    removeAt$1: [function(_, index) {
      this._js$_checkIndex$1(0, index);
      return J.$index$asx(this.callMethod$2("splice", [index, 1]), 0);
    }, "call$1", "get$removeAt", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int6", ret: E, args: [J.JSInt]};
      }, this.$receiver, "JsArray");
    }, 12, "removeAt"],
    setRange$4: [function(_, start, end, iterable, skipCount) {
      var t1, $length, args;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) === true || t1.$gt(start, P.JsObject.prototype.$index.call(this, this, "length")) === true)
        H.throwExpression(P.RangeError$range(start, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) === true || t1.$gt(end, P.JsObject.prototype.$index.call(this, this, "length")) === true)
        H.throwExpression(P.RangeError$range(end, start, P.JsObject.prototype.$index.call(this, this, "length")));
      $length = t1.$sub(end, start);
      if (J.$eq($length, 0))
        return;
      if (J.$lt$n(skipCount, 0) === true)
        throw H.wrapException(new P.ArgumentError(skipCount));
      args = [start, $length];
      t1 = new H.SubListIterable(iterable, skipCount, null);
      t1.$builtinTypeInfo = [null];
      if (J.$lt$n(skipCount, 0) === true)
        H.throwExpression(P.RangeError$value(skipCount));
      C.JSArray_methods.addAll$1(args, t1.take$1(0, $length));
      this.callMethod$2("splice", args);
    }, "call$4", "get$setRange", 6, 2, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_int_Iterable__int4", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, E]], opt: [J.JSInt]};
      }, this.$receiver, "JsArray");
    }, 295, 208, 209, 199, 200, "setRange"]
  },
  "+JsArray": 0,
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure:0;",
    call$1: [function(o) {
      var jsFunction = P._convertDartFunction(o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ _convertToJS_closure": 0,
  _convertToJS_closure0: {
    "^": "Closure:0;ctor_0-",
    call$1: [function(o) {
      return new this.ctor_0(o);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ _convertToJS_closure0": 0,
  _wrapToDart_closure: {
    "^": "Closure:0;",
    call$1: [function(o) {
      return new P.JsFunction(o);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ _wrapToDart_closure": 0,
  _wrapToDart_closure0: {
    "^": "Closure:0;",
    call$1: [function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ _wrapToDart_closure0": 0,
  _wrapToDart_closure1: {
    "^": "Closure:0;",
    call$1: [function(o) {
      return new P.JsObject(o);
    }, "call$1", null, 2, 0, 0, 337, "call"],
    $isFunction: true
  },
  "+ _wrapToDart_closure1": 0
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: [function(hash, value) {
    if (typeof value !== "number")
      return H.iae(value);
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  }, "call$2", "_JenkinsSmiHash_combine0$closure", 4, 0, 326, 327, 38, "combine"],
  _JenkinsSmiHash_finish: [function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  }, "call$1", "_JenkinsSmiHash_finish$closure", 2, 0, 342, 327, "finish"],
  _JSRandom: {
    "^": "Object;",
    nextInt$1: [function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    }, "call$1", "get$nextInt", 2, 0, 342, 824, "nextInt"]
  },
  "+_JSRandom": 0,
  Point: {
    "^": "Object;x>-,y>-",
    toString$0: [function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      return J.$eq(this.x, other.x) && J.$eq(this.y, other.y);
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    }, null, null, 1, 0, 394, "hashCode"],
    $add: [function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, "call$1", "get$+", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Point__Point", ret: [P.Point, T], args: [[P.Point, T]]};
      }, this.$receiver, "Point");
    }, 140, "+"],
    $sub: [function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$sub$n(this.x, t1.get$x(other)), J.$sub$n(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, "call$1", "get$-", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Point__Point", ret: [P.Point, T], args: [[P.Point, T]]};
      }, this.$receiver, "Point");
    }, 140, "-"],
    $mul: [function(_, factor) {
      var t1 = new P.Point(J.$mul$ns(this.x, factor), J.$mul$ns(this.y, factor));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }, "call$1", "get$*", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Point__num", ret: [P.Point, T], args: [J.JSNumber]};
      }, this.$receiver, "Point");
    }, 801, "*"],
    $isPoint: true
  },
  "+Point": 0,
  _RectangleBase: {
    "^": "Object;",
    height$0: function($receiver) {
      return this.get$height(this).call$0();
    },
    get$right: [function(_) {
      return J.$add$ns(this.get$left(this), this.width);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T_2", ret: T};
      }, this.$receiver, "_RectangleBase");
    }, "right"],
    get$bottom: [function(_) {
      return J.$add$ns(this.get$top(this), this.height);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T_2", ret: T};
      }, this.$receiver, "_RectangleBase");
    }, "bottom"],
    toString$0: [function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    $eq: [function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (J.$eq(this.get$left(this), t1.get$left(other))) {
        t2 = this.top;
        t3 = J.getInterceptor(t2);
        t1 = t3.$eq(t2, t1.get$top(other)) && J.$eq(J.$add$ns(this.left, this.width), t1.get$right(other)) && J.$eq(t3.$add(t2, this.height), t1.get$bottom(other));
      } else
        t1 = false;
      return t1;
    }, "call$1", "get$==", 2, 0, 30, 140, "=="],
    get$hashCode: [function(_) {
      var t1, t2, t3, t4, t5;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = this.top;
      t3 = J.getInterceptor(t2);
      t4 = t3.get$hashCode(t2);
      t5 = J.get$hashCode$(J.$add$ns(this.left, this.width));
      t2 = J.get$hashCode$(t3.$add(t2, this.height));
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t4), t5), t2));
    }, null, null, 1, 0, 394, "hashCode"]
  },
  "+_RectangleBase": 0,
  Rectangle: {
    "^": "_RectangleBase;left>-,top>-,width>-,height>-",
    height$0: function($receiver) {
      return this.height.call$0();
    },
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: [function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = J.getInterceptor$n(width);
        t1 = t1.$ge(width, 0) === true ? width : J.$mul$ns(t1.$negate(width), 0);
        t2 = J.getInterceptor$n(height);
        t2 = t2.$ge(height, 0) === true ? height : J.$mul$ns(t2.$negate(height), 0);
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }, null, null, 8, 0, function() {
        return H.computeSignature(function(T) {
          return {func: "dynamic__T_T_T_T", args: [T, T, T, T]};
        }, this.$receiver, "Rectangle");
      }, 221, 343, 344, 345, "new Rectangle"]}
  },
  "+Rectangle": 0
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeByteBuffer: {
    "^": "Interceptor;",
    get$runtimeType: [function(receiver) {
      return C.Type_wAg;
    }, null, null, 1, 0, 416, "runtimeType"],
    "%": "ArrayBuffer"
  },
  "+NativeByteBuffer": 0,
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: [function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) === true || t1.$ge(index, $length) === true)
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
    }, "call$2", "get$_invalidIndex", 4, 0, 417, 12, 7, "_invalidIndex"],
    _checkIndex$2: [function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    }, "call$2", "get$_checkIndex", 4, 0, 417, 12, 7, "_checkIndex"],
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  "+NativeTypedData": 0,
  NativeByteData: {
    "^": "NativeTypedData;",
    get$runtimeType: [function(receiver) {
      return C.Type_oGP;
    }, null, null, 1, 0, 416, "runtimeType"],
    $isTypedData: true,
    "%": "DataView"
  },
  "+NativeByteData": 0,
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: [function(receiver) {
      return C.Type_Art;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 418, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 419, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isTypedData: true,
    "%": "Float32Array"
  },
  "+NativeFloat32List": 0,
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: [function(receiver) {
      return C.Type_ckn;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 418, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 419, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isTypedData: true,
    "%": "Float64Array"
  },
  "+NativeFloat64List": 0,
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_UoK;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int16Array"
  },
  "+NativeInt16List": 0,
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_dTZ;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int32Array"
  },
  "+NativeInt32List": 0,
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_mp3;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int8Array"
  },
  "+NativeInt8List": 0,
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_CAk;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Uint16Array"
  },
  "+NativeUint16List": 0,
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_irB;
    }, null, null, 1, 0, 416, "runtimeType"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Uint32Array"
  },
  "+NativeUint32List": 0,
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_QuW;
    }, null, null, 1, 0, 416, "runtimeType"],
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  "+NativeUint8ClampedList": 0,
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: [function(receiver) {
      return C.Type_6L0;
    }, null, null, 1, 0, 416, "runtimeType"],
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    }, "call$1", "get$[]", 2, 0, 342, 12, "[]"],
    $indexSet: [function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }, "call$2", "get$[]=", 4, 0, 417, 12, 38, "[]="],
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": ";Uint8Array"
  },
  "+NativeUint8List": 0,
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: [function(receiver) {
      return receiver.length;
    }, null, null, 1, 0, 394, "length"],
    _setRangeFast$4: [function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end) === true)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = J.$sub$n(end, start);
      if (J.$lt$n(skipCount, 0) === true)
        throw H.wrapException(new P.ArgumentError(skipCount));
      sourceLength = source.length;
      if (typeof skipCount !== "number")
        return H.iae(skipCount);
      if (typeof count !== "number")
        return H.iae(count);
      if (sourceLength - skipCount < count)
        throw H.wrapException(new P.StateError("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    }, "call$4", "get$_setRangeFast", 8, 0, 825, 208, 209, 50, 200, "_setRangeFast"],
    $isJavaScriptIndexingBehavior: true
  },
  "+NativeTypedArray": 0,
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: [function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    }, "call$4", "get$setRange", 6, 2, 826, 295, 208, 209, 199, 200, "setRange"],
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    }
  },
  "+NativeTypedArrayOfDouble": 0,
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: [function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    }, "call$4", "get$setRange", 6, 2, 827, 295, 208, 209, 199, 200, "setRange"],
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    }
  },
  "+NativeTypedArrayOfInt": 0,
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: [function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }, "call$1", "printString$closure", 2, 0, 99, 11, "printString"]
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  Device_isWebKit: [function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      t1 = t1 !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  }, null, null, 1, 0, 346, "isWebKit"],
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: [function(_) {
      return this.readClasses$0().join$1(0, " ");
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    toggle$2: [function(value, shouldAdd) {
      var s, result;
      s = this.readClasses$0();
      if (!s.contains$1(0, value)) {
        s.add$1(0, value);
        result = true;
      } else {
        s.remove$1(0, value);
        result = false;
      }
      this.writeClasses$1(s);
      return result;
    }, function(value) {
      return this.toggle$2(value, null);
    }, "toggle$1", "call$2", null, "get$toggle", 2, 2, 828, 116, 38, 829, "toggle"],
    get$iterator: [function(_) {
      var t1 = this.readClasses$0();
      t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    }, null, null, 1, 0, 830, "iterator"],
    forEach$1: [function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    }, "call$1", "get$forEach", 2, 0, 831, 203, "forEach"],
    map$1: [function(_, f) {
      var t1 = this.readClasses$0();
      return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
    }, "call$1", "get$map", 2, 0, 832, 203, "map"],
    get$isEmpty: [function(_) {
      return this.readClasses$0()._collection$_length === 0;
    }, null, null, 1, 0, 346, "isEmpty"],
    get$isNotEmpty: [function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    }, null, null, 1, 0, 346, "isNotEmpty"],
    get$length: [function(_) {
      return this.readClasses$0()._collection$_length;
    }, null, null, 1, 0, 394, "length"],
    lookup$1: [function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    }, "call$1", "get$lookup", 2, 0, 97, 38, "lookup"],
    add$1: [function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    }, "call$1", "get$add", 2, 0, 432, 38, "add"],
    remove$1: [function(_, value) {
      var s, result;
      if (typeof value !== "string")
        return false;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    }, "call$1", "get$remove", 2, 0, 422, 38, "remove"],
    addAll$1: [function(_, iterable) {
      this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
    }, "call$1", "get$addAll", 2, 0, 385, 199, "addAll"],
    toList$1$growable: [function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    }, function($receiver) {
      return this.toList$1$growable($receiver, true);
    }, "toList$0", "call$1$growable", null, "get$toList", 0, 3, 833, 316, 317, "toList"],
    skip$1: [function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }, "call$1", "get$skip", 2, 0, 834, 293, "skip"],
    clear$0: [function(_) {
      this.modify$1(new P.CssClassSetImpl_clear_closure());
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    modify$1: [function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    }, "call$1", "get$modify", 2, 0, 835, 203, "modify"],
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSString];
    }
  },
  "+CssClassSetImpl": 0,
  CssClassSetImpl_add_closure: {
    "^": "Closure:0;value_0-",
    call$1: [function(s) {
      return s.add$1(0, this.value_0);
    }, "call$1", null, 2, 0, 0, 123, "call"],
    $isFunction: true
  },
  "+ CssClassSetImpl_add_closure": 0,
  CssClassSetImpl_addAll_closure: {
    "^": "Closure:0;iterable_0-",
    call$1: [function(s) {
      return s.addAll$1(0, this.iterable_0);
    }, "call$1", null, 2, 0, 0, 123, "call"],
    $isFunction: true
  },
  "+ CssClassSetImpl_addAll_closure": 0,
  CssClassSetImpl_clear_closure: {
    "^": "Closure:0;",
    call$1: [function(s) {
      return s.clear$0(0);
    }, "call$1", null, 2, 0, 0, 123, "call"],
    $isFunction: true
  },
  "+ CssClassSetImpl_clear_closure": 0,
  FilteredElementList: {
    "^": "ListBase;_node-,_childNodes-",
    get$_filtered: [function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    }, null, null, 1, 0, 383, "_filtered"],
    forEach$1: [function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    }, "call$1", "get$forEach", 2, 0, 836, 203, "forEach"],
    $indexSet: [function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    }, "call$2", "get$[]=", 4, 0, 809, 12, 38, "[]="],
    set$length: [function(_, newLength) {
      var len, t1;
      len = this.get$_filtered().length;
      t1 = J.getInterceptor$n(newLength);
      if (t1.$ge(newLength, len) === true)
        return;
      else if (t1.$lt(newLength, 0) === true)
        throw H.wrapException(new P.ArgumentError("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    }, null, null, 3, 0, 397, 425, "length"],
    add$1: [function(_, value) {
      this._childNodes._this.appendChild(value);
    }, "call$1", "get$add", 2, 0, 580, 38, "add"],
    setRange$4: [function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    }, "call$4", "get$setRange", 6, 2, 812, 295, 208, 209, 199, 200, "setRange"],
    removeRange$2: [function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    }, "call$2", "get$removeRange", 4, 0, 417, 208, 209, "removeRange"],
    clear$0: [function(_) {
      this._childNodes._this.textContent = "";
    }, "call$0", "get$clear", 0, 0, 137, "clear"],
    insert$2: [function(_, index, value) {
      this._childNodes.insert$2(0, index, value);
    }, "call$2", "get$insert", 4, 0, 809, 12, 38, "insert"],
    removeAt$1: [function(_, index) {
      var t1, result;
      t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      result = t1[index];
      J.remove$0$ax(result);
      return result;
    }, "call$1", "get$removeAt", 2, 0, 808, 12, "removeAt"],
    remove$1: [function(_, element) {
      var i, t1, indexElement;
      if (!J.getInterceptor(element).$isElement)
        return false;
      for (i = 0; i < this.get$_filtered().length; ++i) {
        t1 = this.get$_filtered();
        if (i >= t1.length)
          return H.ioore(t1, i);
        indexElement = t1[i];
        if (indexElement === element) {
          J.remove$0$ax(indexElement);
          return true;
        }
      }
      return false;
    }, "call$1", "get$remove", 2, 0, 422, 218, "remove"],
    get$length: [function(_) {
      return this.get$_filtered().length;
    }, null, null, 1, 0, 394, "length"],
    $index: [function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, 808, 12, "[]"],
    get$iterator: [function(_) {
      var t1 = this.get$_filtered();
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    }, null, null, 1, 0, 811, "iterator"]
  },
  "+FilteredElementList": 0,
  FilteredElementList__filtered_closure: {
    "^": "Closure:0;",
    call$1: [function(n) {
      return !!J.getInterceptor(n).$isElement;
    }, "call$1", null, 2, 0, 0, 293, "call"],
    $isFunction: true
  },
  "+ FilteredElementList__filtered_closure": 0,
  FilteredElementList_removeRange_closure: {
    "^": "Closure:0;",
    call$1: [function(el) {
      return J.remove$0$ax(el);
    }, "call$1", null, 2, 0, 0, 837, "call"],
    $isFunction: true
  },
  "+ FilteredElementList_removeRange_closure": 0
}],
["js", "package:js/js.dart", , Q, {
  "^": "",
  _serialize: [function(o) {
    var t1;
    if (o == null)
      return;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isProxy)
        return o._jsObject;
      else if (!!t1.$isSerializable)
        return Q._serialize(o.toJs$0());
      else if (!!t1.$isFunction) {
        t1 = new P.JsFunction(P._convertDartFunction(new Q._CallbackFunction(o, null), true));
        return Q._serialize(new Q.FunctionProxy(t1, null, t1));
      } else
        return o;
    }
  }, "call$1", "_serialize$closure", 2, 0, 0, 337, "_serialize"],
  _deserialize: [function(o, thisArg) {
    var t1;
    if (o == null)
      return;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsFunction)
        return new Q.FunctionProxy(o, thisArg, o);
      else if (!!t1.$isJsObject)
        return H.setRuntimeTypeInfo(new Q.Proxy(o), [null]);
      else
        return o;
    }
  }, "call$2$thisArg", "_deserialize$closure", 2, 3, 347, 116, 337, 348, "_deserialize"],
  Proxy: {
    "^": "Object;_jsObject-",
    toJs$0: [function() {
      return this;
    }, "call$0", "get$toJs", 0, 0, 838, "toJs"],
    $index: [function(_, arg) {
      return Q._deserialize(J.$index$asx(this._jsObject, arg), this);
    }, "call$1", "get$[]", 2, 0, 0, 265, "[]"],
    $indexSet: [function(_, key, value) {
      var t1 = Q._serialize(value);
      J.$indexSet$ax(this._jsObject, key, t1);
      return t1;
    }, "call$2", "get$[]=", 4, 0, 59, 60, 38, "[]="],
    get$hashCode: [function(_) {
      return J.get$hashCode$(this._jsObject);
    }, null, null, 1, 0, 394, "hashCode"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return J.$eq(this._jsObject, Q._serialize(other));
    }, "call$1", "get$==", 2, 0, 0, 140, "=="],
    toString$0: [function(_) {
      return J.toString$0(this._jsObject);
    }, "call$0", "get$toString", 0, 0, 20, "toString"],
    noSuchMethod$1: [function(_, invocation) {
      var member, t1;
      member = invocation.get$memberName().get$_name();
      t1 = J.getInterceptor$asx(member);
      if (!J.$eq(t1.indexOf$1(member, "@"), -1))
        member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
      if (invocation.get$isGetter() === true) {
        t1 = this._jsObject;
        if (t1.hasProperty$1(member) === true)
          return Q._deserialize(J.$index$asx(t1, member), this);
        else
          P.Object.prototype.noSuchMethod$1.call(this, this, invocation);
      } else if (invocation.get$isSetter() === true) {
        t1 = J.getInterceptor$s(member);
        if (t1.endsWith$1(member, "=") === true)
          member = t1.substring$2(member, 0, J.$sub$n(t1.get$length(member), 1));
        J.$indexSet$ax(this._jsObject, member, Q._serialize(J.$index$asx(invocation.get$positionalArguments(), 0)));
        return;
      } else
        return Q._deserialize(this._jsObject.callMethod$2(member, J.toList$0$ax(J.map$1$ax(invocation.get$positionalArguments(), Q._serialize$closure()))), this);
    }, "call$1", "get$noSuchMethod", 2, 0, 420, 421, "noSuchMethod"],
    $isProxy: true,
    $isSerializable: true,
    static: {Proxy__serializeDataTree: [function(data) {
        var t1, map, t2, key;
        t1 = J.getInterceptor(data);
        if (!!t1.$isMap) {
          map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          for (t2 = J.get$iterator$ax(data.get$keys()); t2.moveNext$0();) {
            key = t2.get$current();
            map.$indexSet(0, key, Q.Proxy__serializeDataTree(t1.$index(data, key)));
          }
          return map;
        } else if (!!t1.$isIterable)
          return t1.map$1(data, Q.Proxy__serializeDataTree$closure()).toList$0(0);
        else
          return Q._serialize(data);
      }, "call$1", "Proxy__serializeDataTree$closure", 2, 0, 0, 335, "_serializeDataTree"]}
  },
  "+Proxy": 0,
  _CallbackFunction: {
    "^": "Object:16;f-,withThis-",
    call$0: [function() {
      return H.throwExpression(new P.StateError("There should always been at least 1 parameter(js this)."));
    }, "call$0", "get$$call", 0, 0, 16, "call"],
    noSuchMethod$1: [function(_, invocation) {
      var t1 = invocation.get$positionalArguments();
      return Q._serialize(H.Primitives_applyFunction(this.f, J.toList$0$ax(J.map$1$ax(J.skip$1$ax(t1, 1), new Q._CallbackFunction_noSuchMethod_closure())), P.Function__toMangledNames(null)));
    }, "call$1", "get$noSuchMethod", 2, 0, 420, 421, "noSuchMethod"],
    $isFunction: true
  },
  "+_CallbackFunction": 0,
  _CallbackFunction_noSuchMethod_closure: {
    "^": "Closure:0;",
    call$1: [function(e) {
      return Q._deserialize(e, null);
    }, "call$1", null, 2, 0, 0, 22, "call"],
    $isFunction: true
  },
  "+ _CallbackFunction_noSuchMethod_closure": 0,
  FunctionProxy: {
    "^": "Proxy:16;_jsFunction-,_thisArg-,_jsObject-",
    call$0: [function() {
      return Q._deserialize(this._jsFunction.apply$2$thisArg([], Q._serialize(this._thisArg)), this);
    }, "call$0", "get$$call", 0, 0, 16, "call"],
    noSuchMethod$1: [function(_, invocation) {
      var member, t1;
      member = invocation.get$memberName().get$_name();
      t1 = J.getInterceptor$asx(member);
      if (J.$eq(!J.$eq(t1.indexOf$1(member, "@"), -1) ? t1.substring$2(member, 0, t1.indexOf$1(member, "@")) : member, "call"))
        return Q._deserialize(this._jsFunction.apply$2$thisArg(J.toList$0$ax(J.map$1$ax(invocation.get$positionalArguments(), Q._serialize$closure())), Q._serialize(this._thisArg)), this);
      return Q.Proxy.prototype.noSuchMethod$1.call(this, this, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, 420, 421, "noSuchMethod"],
    $asProxy: function() {
      return [Q.FunctionProxy];
    },
    $asSerializable: function() {
      return [Q.FunctionProxy];
    },
    $isFunction: true
  },
  "+FunctionProxy": 0
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Object.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
Q.FunctionProxy.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
P.Point.$isObject = true;
S.BorderPoint.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
P.Map.$isObject = true;
S.TableField.$isObject = true;
S.RelationshipField.$isObject = true;
S.Table.$isObject = true;
S.BorderConnection.$isObject = true;
S.BaseField.$isObject = true;
S.SpecializationView.$isObject = true;
S.Command.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
J.JSArray.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.TableCellElement.$isElement = true;
W.TableCellElement.$isNode = true;
W.TableCellElement.$isObject = true;
W.TableRowElement.$isElement = true;
W.TableRowElement.$isNode = true;
W.TableRowElement.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.beginPath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).beginPath$0(receiver);
};
J.bezierCurveTo$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).bezierCurveTo$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.closePath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).closePath$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createLinearGradient$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).createLinearGradient$4(receiver, a0, a1, a2, a3);
};
J.css$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).css$2(receiver, a0, a1);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fill$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).fill$0(receiver);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.fillText$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$onChange$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onChange(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$rows$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$rows(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$table$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$table(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$title$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$title(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.height$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).height$0(receiver);
};
J.indexOf$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
J.insert$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
J.insertAdjacentText$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAdjacentText$2(receiver, a0, a1);
};
J.lineTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.measureText$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).measureText$1(receiver, a0);
};
J.moveTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.rect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).rect$4(receiver, a0, a1, a2, a3);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$backgroundColor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$backgroundColor(receiver, value);
};
J.set$backgroundImage$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$backgroundImage(receiver, value);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$classes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$classes(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$disabled$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$disabled(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$font$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$font(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$id$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$id(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$lineDashOffset$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineDashOffset(receiver, value);
};
J.set$lineWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
J.set$name$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$name(receiver, value);
};
J.set$overflow$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$overflow(receiver, value);
};
J.set$strokeStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setLineDash$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).setLineDash$1(receiver, a0);
};
J.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
J.skip$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.stroke$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stroke$0(receiver);
};
J.strokeRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).strokeRect$4(receiver, a0, a1, a2, a3);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_dblclick = H.setRuntimeTypeInfo(new W.EventStreamProvider("dblclick"), [W.Event]);
C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
C.EventStreamProvider_mouseup = H.setRuntimeTypeInfo(new W.EventStreamProvider("mouseup"), [W.MouseEvent]);
C.EventStreamProvider_readystatechange = H.setRuntimeTypeInfo(new W.EventStreamProvider("readystatechange"), [W.ProgressEvent]);
C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C.JsonEncoder_null = new P.JsonEncoder(null);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.Symbol_call = new H.Symbol0("call");
C.Type_6L0 = H.createRuntimeType('Uint8List');
C.Type_Art = H.createRuntimeType('Float32List');
C.Type_CAk = H.createRuntimeType('Uint16List');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_QGy = H.createRuntimeType('DefaultStrategy');
C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
C.Type_SnA = H.createRuntimeType('int');
C.Type_UoK = H.createRuntimeType('Int16List');
C.Type_WYz = H.createRuntimeType('Relationship');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_ckn = H.createRuntimeType('Float64List');
C.Type_dTZ = H.createRuntimeType('Int32List');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_irB = H.createRuntimeType('Uint32List');
C.Type_mp3 = H.createRuntimeType('Int8List');
C.Type_oGP = H.createRuntimeType('ByteData');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_wAg = H.createRuntimeType('ByteBuffer');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.libraries_to_load = {};
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.DiagramController_CONCEPTUAL_DIAGRAM = "Conceptual_entity_relationship_diagram";
$.DiagramController_LOGICAL_DIAGRAM = "Logical_entity_relationship_diagram";
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [J.JSInt]);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "context", "context0", "get$context0", function() {
  return P._wrapToDart(function() { return this; }());
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) { this.o = o; };
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return H.setRuntimeTypeInfo(new Q.Proxy($.get$context0()), [null]);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "args1", args: [null]},
"object",
{func: "args4", args: [null, null, null, null]},
"interceptor",
"proto",
"extension",
"indexability",
"length",
{func: "bool__int", ret: J.JSBool, args: [J.JSInt]},
"codeUnit",
{func: "int__String_int", ret: J.JSInt, args: [J.JSString, J.JSInt]},
"string",
"index",
{func: "dynamic___IsolateContext_Function", args: [H._IsolateContext, P.Function]},
"isolate",
"function",
{func: "args0"},
{func: "void__dynamic_dynamic", void: true, args: [null, null]},
"entry",
"args",
{func: "String_", ret: J.JSString},
"sender",
"e",
"msg",
{func: "void__Function_List_dynamic_bool_bool_SendPort", void: true, args: [P.Function, [J.JSArray, J.JSString], null, J.JSBool, J.JSBool, P.SendPort]},
"topLevel",
"message",
"isSpawnUri",
"startPaused",
"replyTo",
{func: "bool__dynamic", ret: J.JSBool, args: [null]},
"x",
{func: "dynamic__int_void_", args: [J.JSInt, {func: "void_", void: true}]},
"milliseconds",
"callback",
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
"record",
{func: "String__dynamic", ret: J.JSString, args: [null]},
"value",
{func: "dynamic__String_dynamic_dynamic_dynamic_dynamic", args: [J.JSString, null, null, null, null]},
"name",
"internalName",
"kind",
"arguments",
"argumentNames",
{func: "ReflectionInfo__dynamic", ret: H.ReflectionInfo, args: [null]},
"jsFunction",
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "dynamic__String", args: [J.JSString]},
{func: "int__String_int_int__String", ret: J.JSInt, args: [J.JSString, J.JSInt, {func: "int__String", ret: J.JSInt, args: [J.JSString]}]},
"source",
"radix",
"handleError",
{func: "String__Object", ret: J.JSString, args: [P.Object]},
{func: "String__List", ret: J.JSString, args: [[J.JSArray, J.JSInt]]},
"array",
"codePoints",
"charCodes",
"receiver",
{func: "args2", args: [null, null]},
"key",
{func: "void__dynamic_dynamic_dynamic", void: true, args: [null, null, null]},
{func: "dynamic__dynamic_List_Map", args: [null, J.JSArray, [P.Map, J.JSString, null]]},
"positionalArguments",
"namedArguments",
{func: "dynamic__Function_List_Map", args: [P.Function, J.JSArray, [P.Map, J.JSString, null]]},
"argument",
"ex",
"expression",
{func: "dynamic__String_dynamic", args: [J.JSString, null]},
"_message",
"match",
{func: "dynamic__dynamic_Map", args: [null, P.Map]},
"keyValuePairs",
"result",
{func: "dynamic__Function_dynamic_int_dynamic_dynamic_dynamic_dynamic", args: [P.Function, null, J.JSInt, null, null, null, null]},
"closure",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "dynamic__dynamic_int", args: [null, J.JSInt]},
"arity",
{func: "dynamic__dynamic_List_List_bool_dynamic_String", args: [null, J.JSArray, J.JSArray, J.JSBool, null, J.JSString]},
"functions",
"reflectionInfo",
"isStatic",
"jsArguments",
"propertyName",
{func: "dynamic__int_bool_String_dynamic", args: [J.JSInt, J.JSBool, J.JSString, null]},
"isSuperCall",
"stubName",
{func: "dynamic__dynamic_dynamic_bool", args: [null, null, J.JSBool]},
"isIntercepted",
{func: "args6", args: [null, null, null, null, null, null]},
{func: "dynamic__BoundClosure", args: [H.BoundClosure]},
{func: "String__String", ret: J.JSString, args: [J.JSString]},
"fieldName",
{func: "void__String", void: true, args: [J.JSString]},
"staticName",
"list",
{func: "RuntimeFunctionType__dynamic_dynamic_dynamic", ret: H.RuntimeFunctionType, args: [null, null, null]},
"returnType",
"parameterTypes",
"optionalParameterTypes",
{func: "RuntimeType_", ret: H.RuntimeType},
{func: "Type__String", ret: P.Type, args: [J.JSString]},
{func: "Object__Object_dynamic", ret: P.Object, args: [P.Object, null]},
"target",
"typeInfo",
{func: "dynamic__Object", args: [P.Object]},
"substitutionName",
{func: "dynamic__Object_String_int", args: [P.Object, J.JSString, J.JSInt]},
{func: "dynamic__Object_int", args: [P.Object, J.JSInt]},
{func: "String__dynamic__String__int", ret: J.JSString, args: [null], named: {onTypeVariable: {func: "String__int", ret: J.JSString, args: [J.JSInt]}}},
,
"type",
"onTypeVariable",
{func: "String__dynamic_int__String__int", ret: J.JSString, args: [null, J.JSInt], named: {onTypeVariable: {func: "String__int", ret: J.JSString, args: [J.JSInt]}}},
"types",
"startIndex",
"substitution",
"s",
"t",
{func: "args3", args: [null, null, null]},
"signature",
"context",
"contextName",
{func: "bool__List_List_bool", ret: J.JSBool, args: [J.JSArray, J.JSArray, J.JSBool]},
"allowShorter",
{func: "Object__dynamic_dynamic_dynamic", ret: P.Object, args: [null, null, null]},
"obj",
{func: "void__dynamic_String_dynamic", void: true, args: [null, J.JSString, null]},
"property",
"tag",
"interceptorClass",
{func: "void_", void: true},
"transformer",
"hooks",
"other",
"from",
"to",
{func: "num__Point_Point", ret: J.JSNumber, args: [P.Point, P.Point]},
"firstPoint",
"secondPoint",
{func: "List__Point_Point_int", ret: [J.JSArray, P.Point], args: [P.Point, P.Point, J.JSInt]},
"startPoint",
"endPoint",
"numberOfSegments",
{func: "Point__Point_Point", ret: P.Point, args: [P.Point, P.Point]},
"lineStartPoint",
"lineEndPoint",
{func: "dynamic__BaseCanvasModel_CanvasRenderingContext2D_BorderInteractionController", args: [S.BaseCanvasModel, W.CanvasRenderingContext2D, S.BorderInteractionController]},
"glueObject",
"ctx",
"borderInteractionController",
{func: "dynamic__CanvasRenderingContext2D", args: [W.CanvasRenderingContext2D]},
{func: "dynamic__CanvasRenderingContext2D_BaseCanvasModel_BaseCanvasModelController_CanvasActionsController_BorderInteractionController_DiagramController", args: [W.CanvasRenderingContext2D, S.BaseCanvasModel, S.BaseCanvasModelController, S.CanvasActionsController, S.BorderInteractionController, S.DiagramController]},
"baseCanvasModel",
"baseCanvasController",
"canvasActionsContorller",
"diagramController",
{func: "dynamic__CanvasRenderingContext2D_TableController_RelationshipController", args: [W.CanvasRenderingContext2D, S.TableController, S.RelationshipController]},
"tableController",
"relationshipController",
{func: "dynamic__CanvasRenderingContext2D_TableController_RelationshipController_DiagramController_CanvasActionsController_String", args: [W.CanvasRenderingContext2D, S.TableController, S.RelationshipController, S.DiagramController, S.CanvasActionsController, J.JSString]},
"relationshipType",
{func: "dynamic__CanvasRenderingContext2D_TableController_CanvasActionsController_Table", args: [W.CanvasRenderingContext2D, S.TableController, S.CanvasActionsController, S.Table]},
"tableBeingCreated",
{func: "dynamic__int", args: [J.JSInt]},
"id",
{func: "dynamic__CanvasElement", args: [W.CanvasElement]},
"canvas",
{func: "dynamic__int_Table_Table_String_List", args: [J.JSInt, S.Table, S.Table, J.JSString, [J.JSArray, S.RelationshipField]]},
"diagramId",
"parentTable",
"childTable",
"dataType",
"relationshipFields",
{func: "dynamic__Map_Table_Table_Table", args: [P.Map, S.Table, S.Table, S.Table]},
"map",
"ternaryTable",
{func: "dynamic__int_String_bool_ForeignKey_bool_bool_bool_bool_List", args: [J.JSInt, J.JSString, J.JSBool, S.ForeignKey, J.JSBool, J.JSBool, J.JSBool, J.JSBool, [J.JSArray, S.BaseField]]},
"primaryKey",
"foreignKey",
"nulls",
"composite",
"multivalued",
"derived",
"baseSubFields",
{func: "dynamic__Map", args: [P.Map]},
{func: "dynamic__int_String_num_num_List", args: [J.JSInt, J.JSString, J.JSNumber, J.JSNumber, [J.JSArray, S.TableField]]},
"y",
"tableFields",
{func: "dynamic__int_String_bool_ForeignKey_String_bool_bool_bool_bool_List", args: [J.JSInt, J.JSString, J.JSBool, S.ForeignKey, J.JSString, J.JSBool, J.JSBool, J.JSBool, J.JSBool, [J.JSArray, S.BaseField]]},
"_iterable",
"_start",
"_endOrLength",
"iterable",
"skipCount",
"_skipCount",
{func: "void__Iterable_void__dynamic", void: true, args: [P.Iterable, {func: "void__dynamic", void: true, args: [null]}]},
"f",
{func: "String__Iterable_String_String", ret: J.JSString, args: [P.Iterable, J.JSString, J.JSString]},
"leftDelimiter",
"rightDelimiter",
{func: "void__List_int_int_Iterable_int", void: true, args: [J.JSArray, J.JSInt, J.JSInt, P.Iterable, J.JSInt]},
"start",
"end",
{func: "void__List_int_List_int_int", void: true, args: [J.JSArray, J.JSInt, J.JSArray, J.JSInt, J.JSInt]},
"src",
"srcStart",
"dst",
"dstStart",
"count",
{func: "int__List_Object_int_int", ret: J.JSInt, args: [J.JSArray, P.Object, J.JSInt, J.JSInt]},
"a",
"element",
"endIndex",
{func: "void__List_int_int_int__dynamic_dynamic", void: true, args: [J.JSArray, J.JSInt, J.JSInt, {func: "int__dynamic_dynamic", ret: J.JSInt, args: [null, null]}]},
"left",
"right",
"compare",
{func: "Map__dynamic_bool", ret: [P.Map, J.JSString, J.JSString], args: [null, J.JSBool]},
"jsMangledNames",
"isGlobal",
{func: "List__dynamic", ret: J.JSArray, args: [null]},
"victim",
{func: "Function__Function_Zone", ret: P.Function, args: [P.Function, P.Zone]},
"errorHandler",
"zone",
{func: "void__Future__Future", void: true, args: [P.Future, P._Future]},
{func: "void___Future__Future", void: true, args: [P._Future, P._Future]},
"listeners",
{func: "void__dynamic", void: true, args: [null]},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
false,
"onListen",
"onPause",
"onResume",
"onCancel",
"sync",
{func: "Future___NotificationHandler", ret: P.Future, args: [{func: "args0"}]},
"notificationHandler",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
"error",
"stackTrace",
{func: "dynamic__args0_args1_dynamic__dynamic_StackTrace", args: [{func: "args0"}, {func: "args1", args: [null]}, {func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]}]},
"userCode",
"onSuccess",
"onError",
{func: "void__StreamSubscription__Future_dynamic_StackTrace", void: true, args: [P.StreamSubscription, P._Future, null, P.StackTrace]},
"subscription",
"future",
{func: "dynamic__StreamSubscription__Future", args: [P.StreamSubscription, P._Future]},
{func: "void__StreamSubscription__Future_dynamic", void: true, args: [P.StreamSubscription, P._Future, null]},
{func: "Timer__Duration_void_", ret: P.Timer, args: [P.Duration, {func: "void_", void: true}]},
"duration",
{func: "Zone__Zone", ret: P.Zone, args: [P.Zone]},
{func: "void__Zone_ZoneDelegate_Zone_dynamic_StackTrace", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, null, P.StackTrace]},
"self",
"parent",
{func: "dynamic__Zone_ZoneDelegate_Zone_args0", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args1_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}, null]},
"arg",
{func: "dynamic__Zone_ZoneDelegate_Zone_args2_dynamic_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}, null, null]},
"table",
"b",
"equals",
"hashCode",
"isValidKey",
{func: "String__Iterable", ret: J.JSString, args: [P.Iterable]},
{func: "void__Iterable_List", void: true, args: [P.Iterable, J.JSArray]},
"parts",
{func: "String__Map", ret: J.JSString, args: [P.Map]},
"m",
{func: "dynamic__dynamic_args2", args: [null, {func: "args2", args: [null, null]}]},
"json",
"reviver",
{func: "dynamic__dynamic__dynamic", args: [null], named: {cause: null}},
"unsupportedObject",
"cause",
{func: "dynamic__String_args2", args: [J.JSString, {func: "args2", args: [null, null]}]},
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "String__dynamic_args1", ret: J.JSString, args: [null, {func: "args1", args: [null]}]},
"toEncodable",
{func: "Map__Map", ret: [P.Map, J.JSString, null], args: [[P.Map, P.Symbol, null]]},
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
{func: "dynamic__int__bool", args: [J.JSInt], named: {isUtc: J.JSBool}},
"millisecondsSinceEpoch",
"isUtc",
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
"n",
{func: "dynamic___int_int_int_int_int_int", named: {days: J.JSInt, hours: J.JSInt, microseconds: J.JSInt, milliseconds: J.JSInt, minutes: J.JSInt, seconds: J.JSInt}},
0,
"days",
"hours",
"minutes",
"seconds",
"microseconds",
{func: "dynamic___dynamic", opt: [null]},
{func: "dynamic__num", args: [J.JSNumber]},
{func: "dynamic__num_num_num", args: [J.JSNumber, J.JSNumber, J.JSNumber]},
{func: "dynamic__Object_Symbol_List_Map__List", args: [P.Object, P.Symbol, J.JSArray, [P.Map, P.Symbol, null]], opt: [J.JSArray]},
"memberName",
"existingArgumentNames",
{func: "dynamic___String", opt: [J.JSString]},
{func: "dynamic___Object", opt: [P.Object]},
"modifiedObject",
"variableName",
{func: "Exception___dynamic", ret: P.Exception, opt: [null]},
"",
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
"fill",
true,
"growable",
{func: "void__Object", void: true, args: [P.Object]},
"content",
{func: "AnchorElement___String", ret: W.AnchorElement, named: {href: J.JSString}},
"href",
{func: "dynamic__List", args: [[J.JSArray, W.Node]]},
"_nodeList",
{func: "dynamic__String_String", args: [J.JSString, J.JSString]},
"typeExtension",
{func: "int__int_int", ret: J.JSInt, args: [J.JSInt, J.JSInt]},
"hash",
{func: "WindowBase__dynamic", ret: W.WindowBase, args: [null]},
"w",
{func: "dynamic__args1", args: [{func: "args1", args: [null]}]},
{func: "Capability_", ret: P.Capability},
{func: "dynamic__Function__bool", args: [P.Function], named: {captureThis: J.JSBool}},
"captureThis",
{func: "dynamic__dynamic_bool_dynamic_List", args: [null, J.JSBool, null, J.JSArray]},
"data",
{func: "bool__dynamic_String_dynamic", ret: J.JSBool, args: [null, J.JSString, null]},
"o",
{func: "Object__dynamic_String", ret: P.Object, args: [null, J.JSString]},
{func: "Object__dynamic_String_args1", ret: P.Object, args: [null, J.JSString, {func: "args1", args: [null]}]},
"createProxy",
{func: "JsObject__dynamic", ret: P.JsObject, args: [null]},
{func: "int__int", ret: J.JSInt, args: [J.JSInt]},
"top",
"width",
"height",
{func: "bool_", ret: J.JSBool},
{func: "dynamic__dynamic__dynamic0", args: [null], named: {thisArg: null}},
"thisArg",
{func: "CanvasRenderingContext__String__Map", ret: W.CanvasRenderingContext, args: [J.JSString], opt: [P.Map]},
"contextId",
"attrs",
{func: "CanvasRenderingContext2D_", ret: W.CanvasRenderingContext2D},
{func: "void__num_num_num_num_num_num", void: true, args: [J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber]},
"cp1x",
"cp1y",
"cp2x",
"cp2y",
{func: "void__num_num_num_num", void: true, args: [J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber]},
{func: "CanvasGradient__num_num_num_num", ret: W.CanvasGradient, args: [J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber]},
"x0",
"y0",
"x1",
"y1",
{func: "void___String", void: true, opt: [J.JSString]},
"winding",
{func: "void__num_num", void: true, args: [J.JSNumber, J.JSNumber]},
{func: "TextMetrics__String", ret: W.TextMetrics, args: [J.JSString]},
"text",
{func: "void__num_num_num_num_num__bool", void: true, args: [J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber], opt: [J.JSBool]},
"radius",
"startAngle",
"endAngle",
"anticlockwise",
{func: "void__num", void: true, args: [J.JSNumber]},
{func: "void__List", void: true, args: [[J.JSArray, J.JSNumber]]},
"dash",
{func: "void__String_num_num__num", void: true, args: [J.JSString, J.JSNumber, J.JSNumber], opt: [J.JSNumber]},
"maxWidth",
{func: "void__String_String__String", void: true, args: [J.JSString, J.JSString], opt: [J.JSString]},
"priority",
{func: "Stream_", ret: [P.Stream, W.Event]},
{func: "Stream_0", ret: [P.Stream, W.MouseEvent]},
{func: "List_", ret: [J.JSArray, W.Element]},
{func: "CssClassSet_", ret: W.CssClassSet},
{func: "void__Iterable", void: true, args: [[P.Iterable, J.JSString]]},
{func: "Rectangle_", ret: P.Rectangle},
{func: "void__String_String", void: true, args: [J.JSString, J.JSString]},
"where",
{func: "ElementStream_", ret: [W.ElementStream, W.Event]},
{func: "ElementStream_0", ret: [W.ElementStream, W.MouseEvent]},
{func: "void__String_EventListener__bool", void: true, args: [J.JSString, {func: "dynamic__Event", args: [W.Event]}], opt: [J.JSBool]},
"listener",
"useCapture",
{func: "int_", ret: J.JSInt},
{func: "Node__int", ret: W.Node, args: [J.JSInt]},
{func: "void__int_Node", void: true, args: [J.JSInt, W.Node]},
{func: "void__int", void: true, args: [J.JSInt]},
{func: "void__String_String__bool_String_String", void: true, args: [J.JSString, J.JSString], named: {async: J.JSBool, password: J.JSString, user: J.JSString}},
"method",
"url",
"async",
"user",
"password",
{func: "void___dynamic", void: true, opt: [null]},
{func: "Point_", ret: P.Point},
{func: "Node__Node", ret: W.Node, args: [W.Node]},
"otherNode",
{func: "Node__Node_Node", ret: W.Node, args: [W.Node, W.Node]},
"newChild",
"oldChild",
{func: "List_0", ret: [J.JSArray, W.TableRowElement]},
{func: "List_1", ret: [J.JSArray, W.TableCellElement]},
{func: "WindowBase__String_String__String", ret: W.WindowBase, args: [J.JSString, J.JSString], opt: [J.JSString]},
"options",
{func: "int__RequestAnimationFrameCallback", ret: J.JSInt, args: [{func: "void__num", void: true, args: [J.JSNumber]}]},
{func: "Type_", ret: P.Type},
{func: "void__int_int", void: true, args: [J.JSInt, J.JSInt]},
{func: "num__int", ret: J.JSNumber, args: [J.JSInt]},
{func: "void__int_num", void: true, args: [J.JSInt, J.JSNumber]},
{func: "dynamic__Invocation", args: [P.Invocation]},
"invocation",
{func: "bool__Object", ret: J.JSBool, args: [P.Object]},
"collection",
{func: "int__Object__int", ret: J.JSInt, args: [P.Object], opt: [J.JSInt]},
"newLength",
{func: "int__num", ret: J.JSInt, args: [J.JSNumber]},
{func: "num__num", ret: J.JSNumber, args: [J.JSNumber]},
{func: "num_", ret: J.JSNumber},
{func: "double_", ret: J.JSDouble},
{func: "bool__num", ret: J.JSBool, args: [J.JSNumber]},
{func: "Match__String__int", ret: P.Match, args: [J.JSString], opt: [J.JSInt]},
{func: "bool__String", ret: J.JSBool, args: [J.JSString]},
{func: "String__Pattern_String", ret: J.JSString, args: [P.Pattern, J.JSString]},
{func: "List__Pattern", ret: [J.JSArray, J.JSString], args: [P.Pattern]},
"pattern",
{func: "bool__Pattern__int", ret: J.JSBool, args: [P.Pattern], opt: [J.JSInt]},
{func: "String__int__int", ret: J.JSString, args: [J.JSInt], opt: [J.JSInt]},
"times",
{func: "int__Pattern__int", ret: J.JSInt, args: [P.Pattern], opt: [J.JSInt]},
{func: "int__String", ret: J.JSInt, args: [J.JSString]},
{func: "dynamic__Function", args: [P.Function]},
{func: "void__Capability_Capability", void: true, args: [P.Capability, P.Capability]},
"authentification",
"resume",
{func: "void__Capability", void: true, args: [P.Capability]},
{func: "void__SendPort", void: true, args: [P.SendPort]},
"responsePort",
{func: "void__Capability_bool", void: true, args: [P.Capability, J.JSBool]},
"errorsAreFatal",
{func: "void__SendPort_int", void: true, args: [P.SendPort, J.JSInt]},
"pingType",
"code",
{func: "RawReceivePortImpl__int", ret: H.RawReceivePortImpl, args: [J.JSInt]},
"portId",
{func: "void__int_RawReceivePortImpl", void: true, args: [J.JSInt, H.RawReceivePortImpl]},
"port",
{func: "_IsolateEvent_", ret: H._IsolateEvent},
"dataEvent",
{func: "SendPort_", ret: P.SendPort},
{func: "dynamic__SendPort", args: [P.SendPort]},
{func: "dynamic__Capability", args: [P.Capability]},
{func: "SendPort__List", ret: P.SendPort, args: [J.JSArray]},
{func: "Capability__List", ret: P.Capability, args: [J.JSArray]},
"info",
{func: "List__List", ret: J.JSArray, args: [J.JSArray]},
{func: "Map__Map0", ret: P.Map, args: [P.Map]},
"val",
{func: "dynamic__List0", args: [J.JSArray]},
{func: "Map__List", ret: P.Map, args: [J.JSArray]},
{func: "Symbol_", ret: P.Symbol},
{func: "List_2", ret: J.JSArray},
{func: "Map_", ret: [P.Map, P.Symbol, null]},
"parameter",
"unsortedIndex",
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
"g",
{func: "void__Point", void: true, args: [P.Point]},
"newLocation",
{func: "List__String", ret: [J.JSArray, S.BorderPoint], args: [J.JSString]},
"borderCode",
{func: "List_3", ret: [J.JSArray, S.BorderPoint]},
{func: "List__String_num", ret: [J.JSArray, S.BorderPoint], args: [J.JSString, J.JSNumber]},
{func: "bool__BaseCanvasModel", ret: J.JSBool, args: [S.BaseCanvasModel]},
{func: "List___BaseCanvasModel", ret: [J.JSArray, P.Map], opt: [S.BaseCanvasModel]},
"oldModel",
{func: "dynamic__int_num_num", args: [J.JSInt, J.JSNumber, J.JSNumber]},
{func: "void__BaseCanvasModel_BaseCanvasModel", void: true, args: [S.BaseCanvasModel, S.BaseCanvasModel]},
"newModel",
{func: "dynamic__BaseCanvasModel_Map_String_String", args: [S.BaseCanvasModel, P.Map, J.JSString, J.JSString]},
"bceMap",
"baseAttributes",
"subBaseAttributes",
{func: "BaseCanvasModel__BaseCanvasModel_BaseCanvasModel", ret: S.BaseCanvasModel, args: [S.BaseCanvasModel, S.BaseCanvasModel]},
"viewModel",
{func: "void__ControllerFactory", void: true, args: [S.ControllerFactory]},
"controllerFactory",
{func: "List_4", ret: [J.JSArray, S.BaseField]},
{func: "Map___bool_BaseField", ret: P.Map, opt: [J.JSBool, S.BaseField]},
"destroy",
"oldBaseField",
{func: "void__String_bool", void: true, args: [J.JSString, J.JSBool]},
"submitButtonId",
"validating",
{func: "dynamic__BaseCanvasModel_BaseCanvasModel", args: [S.BaseCanvasModel, S.BaseCanvasModel]},
"borderCodeA",
"borderCodeB",
{func: "void__BorderPoint_BorderPoint_num", void: true, args: [S.BorderPoint, S.BorderPoint, J.JSNumber]},
"borderPointA",
"borderPointB",
"angle",
{func: "Stream_1", ret: P.Stream},
"canvasModelA",
"canvasModelB",
"oldBaseCanvasModel",
{func: "void__BaseCanvasModel", void: true, args: [S.BaseCanvasModel]},
"canvasModel",
{func: "BorderConnection__BaseCanvasModel_BaseCanvasModel", ret: S.BorderConnection, args: [S.BaseCanvasModel, S.BaseCanvasModel]},
{func: "void__BorderConnection", void: true, args: [S.BorderConnection]},
"borderConnection",
{func: "void__BorderConnection_List_List", void: true, args: [S.BorderConnection, [J.JSArray, S.BorderPoint], [J.JSArray, S.BorderPoint]]},
"borderAPoints",
"borderBPoints",
{func: "int__BorderConnection", ret: J.JSInt, args: [S.BorderConnection]},
"candidateBorderConnection",
{func: "List__List_List_bool", ret: [J.JSArray, S.BorderPoint], args: [[J.JSArray, S.BorderPoint], [J.JSArray, S.BorderPoint], J.JSBool]},
"listA",
"listB",
"enforcedOppositeBorderForModelA",
{func: "BorderPoint__List_String", ret: S.BorderPoint, args: [[J.JSArray, S.BorderPoint], J.JSString]},
"points",
{func: "dynamic__BaseField", args: [S.BaseField]},
"baseField",
{func: "void__BaseField", void: true, args: [S.BaseField]},
{func: "bool__BaseField", ret: J.JSBool, args: [S.BaseField]},
{func: "void__TableFieldGlue_BorderConnection", void: true, args: [S.TableFieldGlue, S.BorderConnection]},
"tableFieldGlue",
"bcn",
"_",
{func: "Point__MouseEvent", ret: P.Point, args: [W.MouseEvent]},
"evt",
{func: "dynamic__MouseEvent", args: [W.MouseEvent]},
{func: "dynamic__KeyboardEvent", args: [W.KeyboardEvent]},
"evt2",
{func: "void__num_num_num_num_String_String_bool", void: true, args: [J.JSNumber, J.JSNumber, J.JSNumber, J.JSNumber, J.JSString, J.JSString, J.JSBool]},
"h",
"fillStyle",
"strokeStyle",
"dashed",
{func: "Point__Element_MouseEvent", ret: P.Point, args: [W.Element, W.MouseEvent]},
{func: "dynamic__Point_int", args: [P.Point, J.JSInt]},
"canvasMousePosition",
"clickOrigin",
{func: "dynamic__Point", args: [P.Point]},
{func: "void__Point_int", void: true, args: [P.Point, J.JSInt]},
{func: "dynamic__CanvasRenderingContext2D_RelationshipController_CanvasActionsController_Relationship", args: [W.CanvasRenderingContext2D, S.RelationshipController, S.CanvasActionsController, S.Relationship]},
"clickedRelationship",
{func: "dynamic__CanvasRenderingContext2D_TableController_RelationshipController_CanvasActionsController", args: [W.CanvasRenderingContext2D, S.TableController, S.RelationshipController, S.CanvasActionsController]},
{func: "dynamic__CanvasRenderingContext2D_SpecializationController_TableController_CanvasActionsController_Specialization", args: [W.CanvasRenderingContext2D, S.SpecializationController, S.TableController, S.CanvasActionsController, S.Specialization]},
"specializationController",
"clickedSpecialization",
{func: "dynamic__CanvasRenderingContext2D_TableController_SpecializationController_CanvasActionsController_Specialization_Point", args: [W.CanvasRenderingContext2D, S.TableController, S.SpecializationController, S.CanvasActionsController, S.Specialization, P.Point]},
{func: "dynamic__CanvasRenderingContext2D_TableController_SpecializationController_DiagramController_CanvasActionsController", args: [W.CanvasRenderingContext2D, S.TableController, S.SpecializationController, S.DiagramController, S.CanvasActionsController]},
"clickedTable",
"orientation",
{func: "dynamic__BorderPoint_CanvasRenderingContext2D", args: [S.BorderPoint, W.CanvasRenderingContext2D]},
"borderPoint",
{func: "dynamic__Event", args: [W.Event]},
{func: "dynamic__CanvasRenderingContext2D_int", args: [W.CanvasRenderingContext2D, J.JSInt]},
{func: "void__String_HttpRequest", void: true, args: [J.JSString, W.HttpRequest]},
"resourceURL",
"request",
{func: "HttpRequest__BaseCanvasModelHTTPRequest", ret: W.HttpRequest, args: [S.BaseCanvasModelHTTPRequest]},
"baseModelRequest",
"time",
"canvasDivStyleHeight",
"canvasDivStyleWidth",
{func: "StreamSubscription__TableRowElement", ret: P.StreamSubscription, args: [W.TableRowElement]},
"baseFieldRow",
{func: "InputElement__TableRowElement", ret: W.InputElement, args: [W.TableRowElement]},
{func: "void__Element", void: true, args: [W.Element]},
"tableBody",
"moreFieldRowsBtn",
{func: "void__TableRowElement", void: true, args: [W.TableRowElement]},
"moreFieldRowsTr",
{func: "StreamSubscription__int", ret: P.StreamSubscription, args: [J.JSInt]},
"rowIndex",
{func: "StreamSubscription__Element_Element", ret: P.StreamSubscription, args: [W.Element, W.Element]},
"subFieldRow",
{func: "dynamic__PreferencesController_Preferences", args: [S.PreferencesController, S.Preferences]},
"preferencesController",
"preferences",
{func: "dynamic__RelationshipField", args: [S.RelationshipField]},
"relationshipField",
{func: "void__BaseField_int", void: true, args: [S.BaseField, J.JSInt]},
"subFieldRowIndex",
"linkRemove",
{func: "RelationshipField__TableRowElement", ret: S.RelationshipField, args: [W.TableRowElement]},
"fieldRow",
{func: "dynamic__Relationship_String_RelationshipController_String", args: [S.Relationship, J.JSString, S.RelationshipController, J.JSString]},
"relationship",
"modalType",
"modalId",
"errors",
{func: "RelationshipModal__Relationship_String_RelationshipController", ret: S.RelationshipModal, args: [S.Relationship, J.JSString, S.RelationshipController]},
"nameWidth",
{func: "Relationship_", ret: S.Relationship},
{func: "String___Relationship", ret: J.JSString, opt: [S.Relationship]},
"oldRelationship",
{func: "void__Map", void: true, args: [P.Map]},
{func: "void__Relationship", void: true, args: [S.Relationship]},
{func: "Map__Relationship_RelationshipModal", ret: P.Map, args: [S.Relationship, S.RelationshipModal]},
"relationshipModal",
{func: "void__Relationship_bool", void: true, args: [S.Relationship, J.JSBool]},
"fromDatabase",
{func: "void__Relationship_RelationshipView", void: true, args: [S.Relationship, S.RelationshipView]},
"rsv",
{func: "void__Relationship_BorderConnection_BorderConnection", void: true, args: [S.Relationship, S.BorderConnection, S.BorderConnection]},
"bcnParentTableAndRelationship",
"bcnChildTableAndRelationship",
{func: "void__Relationship__bool_Table", void: true, args: [S.Relationship], opt: [J.JSBool, S.Table]},
"isTernary",
{func: "dynamic__Relationship_RelationshipView", args: [S.Relationship, S.RelationshipView]},
"relationshipView",
{func: "void__Relationship_String", void: true, args: [S.Relationship, J.JSString]},
{func: "List__Table", ret: [J.JSArray, S.Table], args: [S.Table]},
{func: "void__Table", void: true, args: [S.Table]},
{func: "void__BaseCanvasModel_Point_Point_Point", void: true, args: [S.BaseCanvasModel, P.Point, P.Point, P.Point]},
"initialCanvasModelPosition",
"initialClientCord",
"newClientCord",
{func: "Relationship__Point", ret: S.Relationship, args: [P.Point]},
"clientPoint",
{func: "RelationshipField__Point", ret: S.RelationshipField, args: [P.Point]},
{func: "void__BaseCanvasModel_Map_Point", void: true, args: [S.BaseCanvasModel, P.Map, P.Point]},
"baseFieldsPosition",
{func: "void__Table_Relationship", void: true, args: [S.Table, S.Relationship]},
"ternaryRelationship",
{func: "bool__Table_Relationship", ret: J.JSBool, args: [S.Table, S.Relationship]},
{func: "bool__Relationship", ret: J.JSBool, args: [S.Relationship]},
{func: "RelationshipView__Relationship", ret: S.RelationshipView, args: [S.Relationship]},
{func: "void__Relationship__bool", void: true, args: [S.Relationship], opt: [J.JSBool]},
"status",
{func: "dynamic__CanvasRenderingContext2D_RelationshipViewFactory_RelationshipModalFactory", args: [W.CanvasRenderingContext2D, S.RelationshipViewFactory, S.RelationshipModalFactory]},
"relationshipViewFactory",
"relationshipModalFactory",
{func: "Map_0", ret: P.Map},
"updatedRelationship",
{func: "void__String_Point_Point", void: true, args: [J.JSString, P.Point, P.Point]},
"cardinalityDisplay",
"middlePoint",
"glueRelation",
{func: "void__RelationshipField", void: true, args: [S.RelationshipField]},
{func: "void__Map_num", void: true, args: [[P.Map, J.JSString, P.Point], J.JSNumber]},
"diamond",
"lineWidth",
{func: "dynamic__bool", args: [J.JSBool]},
"enable",
{func: "void__bool", void: true, args: [J.JSBool]},
"toggle",
{func: "dynamic__BorderConnection_BorderConnection", args: [S.BorderConnection, S.BorderConnection]},
{func: "RelationshipView__Relationship_BorderInteractionController", ret: S.RelationshipView, args: [S.Relationship, S.BorderInteractionController]},
{func: "List_5", ret: [J.JSArray, S.RelationshipView]},
{func: "dynamic__int_Table_Table", args: [J.JSInt, S.Table, S.Table]},
"specializedTable",
{func: "dynamic__Map_Table_List", args: [P.Map, S.Table, [J.JSArray, S.Table]]},
"specializedTables",
{func: "void__Specialization", void: true, args: [S.Specialization]},
"specialization",
{func: "void__Specialization_Table", void: true, args: [S.Specialization, S.Table]},
{func: "void__Specialization__bool", void: true, args: [S.Specialization], opt: [J.JSBool]},
{func: "SpecializationView__Specialization", ret: S.SpecializationView, args: [S.Specialization]},
{func: "List__Specialization", ret: [J.JSArray, S.BorderConnection], args: [S.Specialization]},
{func: "Specialization__Point", ret: S.Specialization, args: [P.Point]},
{func: "dynamic__CanvasRenderingContext2D_SpecializationViewFactory", args: [W.CanvasRenderingContext2D, S.SpecializationViewFactory]},
"specializationViewFactory",
{func: "dynamic__TableField", args: [S.TableField]},
"tableField",
{func: "TableField__TableRowElement", ret: S.TableField, args: [W.TableRowElement]},
{func: "void__TableField", void: true, args: [S.TableField]},
{func: "dynamic__Table_TableController_String", args: [S.Table, S.TableController, J.JSString]},
{func: "void__InputElement_InputElement", void: true, args: [W.InputElement, W.InputElement]},
"primaryKeyInput",
"nullsInput",
{func: "dynamic__TableRowElement", args: [W.TableRowElement]},
{func: "dynamic__Element", args: [W.Element]},
{func: "dynamic__BaseField_int", args: [S.BaseField, J.JSInt]},
{func: "dynamic__Table_TableController_String_bool", args: [S.Table, S.TableController, J.JSString, J.JSBool]},
"physical",
{func: "dynamic__Table_Map", args: [S.Table, P.Map]},
"tableFieldOrTable",
{func: "TableModal__Table_TableController_bool", ret: S.TableModal, args: [S.Table, S.TableController, J.JSBool]},
"tableToHaveFieldsDeleted",
{func: "String___Table", ret: J.JSString, opt: [S.Table]},
"oldTable",
{func: "Table_", ret: S.Table},
{func: "List__Table0", ret: [J.JSArray, S.TableField], args: [S.Table]},
{func: "void__Table_TableModal", void: true, args: [S.Table, S.TableModal]},
"tableModal",
{func: "void__Table_bool", void: true, args: [S.Table, J.JSBool]},
"userCreated",
{func: "void__Table__String", void: true, args: [S.Table], opt: [J.JSString]},
"oldTableName",
{func: "void__Table_Table", void: true, args: [S.Table, S.Table]},
"originalTable",
{func: "void__Table__bool", void: true, args: [S.Table], opt: [J.JSBool]},
{func: "TableView__Table", ret: S.TableView, args: [S.Table]},
{func: "Table__String", ret: S.Table, args: [J.JSString]},
"tableName",
{func: "Table__Point", ret: S.Table, args: [P.Point]},
{func: "TableField__Point", ret: S.TableField, args: [P.Point]},
{func: "dynamic__CanvasRenderingContext2D_TableViewFactory_TableModalFactory", args: [W.CanvasRenderingContext2D, S.TableViewFactory, S.TableModalFactory]},
"tableViewFactory",
"tableModalFactory",
"updatedTable",
"tf",
{func: "dynamic__CanvasRenderingContext2D_Table_BorderInteractionController_TableController", args: [W.CanvasRenderingContext2D, S.Table, S.BorderInteractionController, S.TableController]},
{func: "TableView__Table_BorderInteractionController_TableController", ret: S.TableView, args: [S.Table, S.BorderInteractionController, S.TableController]},
{func: "List_6", ret: [J.JSArray, S.TableView]},
"action",
{func: "_BroadcastStreamController_", ret: P._BroadcastStreamController},
"eventId",
{func: "_Future_", ret: P._Future},
"cancelOnError",
{func: "Error_", ret: P.Error},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "Future_", ret: P.Future},
{func: "void__Object_StackTrace", void: true, args: [P.Object, P.StackTrace]},
{func: "_FutureOnValue_", ret: {func: "args1", args: [null]}},
{func: "_FutureErrorTest_", ret: {func: "bool__dynamic", ret: J.JSBool, args: [null]}},
{func: "Function_", ret: P.Function},
{func: "_FutureAction_", ret: {func: "args0"}},
{func: "_AsyncError_", ret: P._AsyncError},
{func: "void___Future", void: true, args: [P._Future]},
{func: "dynamic__dynamic__dynamic1", args: [null], opt: [null]},
"ignored",
"convert",
{func: "Future_0", ret: [P.Future, J.JSInt]},
{func: "Future_1", ret: [P.Future, J.JSBool]},
{func: "_PendingEvents_", ret: P._PendingEvents},
{func: "_StreamImplEvents_", ret: P._StreamImplEvents},
{func: "_ControllerSubscription_", ret: P._ControllerSubscription},
{func: "_NotificationHandler_", ret: {func: "args0"}},
{func: "void___PendingEvents", void: true, args: [P._PendingEvents]},
"pendingEvents",
"handleData",
{func: "void__Function", void: true, args: [P.Function]},
"handleDone",
{func: "void___Future0", void: true, opt: [P.Future]},
"resumeSignal",
{func: "void___DelayedEvent", void: true, args: [P._DelayedEvent]},
"event",
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"wasInputPaused",
"onData",
"onDone",
"dispatch",
{func: "void___EventDispatch0", void: true, args: [P._EventDispatch]},
{func: "_DelayedEvent_", ret: P._DelayedEvent},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
"sink",
"_stream",
"inputEvent",
{func: "bool__Zone", ret: J.JSBool, args: [P.Zone]},
"otherZone",
{func: "dynamic__args0", args: [{func: "args0"}]},
{func: "dynamic__args1_dynamic", args: [{func: "args1", args: [null]}, null]},
{func: "dynamic__args2_dynamic_dynamic", args: [{func: "args2", args: [null, null]}, null, null]},
{func: "ZoneCallback__args0__bool", ret: {func: "args0"}, args: [{func: "args0"}], named: {runGuarded: J.JSBool}},
"runGuarded",
{func: "ZoneUnaryCallback__args1__bool", ret: {func: "args1", args: [null]}, args: [{func: "args1", args: [null]}], named: {runGuarded: J.JSBool}},
{func: "Zone_", ret: P.Zone},
{func: "ZoneCallback__args0", ret: {func: "args0"}, args: [{func: "args0"}]},
{func: "ZoneUnaryCallback__args1", ret: {func: "args1", args: [null]}, args: [{func: "args1", args: [null]}]},
{func: "ZoneBinaryCallback__args2", ret: {func: "args2", args: [null, null]}, args: [{func: "args2", args: [null, null]}]},
{func: "int__dynamic_dynamic", ret: J.JSInt, args: [null, null]},
"bucket",
"each",
{func: "void__LinkedHashMapCell", void: true, args: [P.LinkedHashMapCell]},
"cell",
{func: "bool__dynamic_Object", ret: J.JSBool, args: [null, P.Object]},
"objects",
{func: "void__LinkedHashSetCell", void: true, args: [P.LinkedHashSetCell]},
{func: "String___String", ret: J.JSString, opt: [J.JSString]},
"separator",
"test",
"k",
"v",
"offset",
{func: "dynamic___int", opt: [J.JSInt]},
"initialCapacity",
{func: "dynamic__String__args2", args: [J.JSString], named: {reviver: {func: "args2", args: [null, null]}}},
{func: "String__Object__args1", ret: J.JSString, args: [P.Object], named: {toEncodable: {func: "args1", args: [null]}}},
{func: "JsonEncoder_", ret: P.JsonEncoder},
{func: "JsonDecoder_", ret: P.JsonDecoder},
"symbol",
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "int__DateTime", ret: J.JSInt, args: [P.DateTime]},
{func: "DateTime__Duration", ret: P.DateTime, args: [P.Duration]},
{func: "Duration__Duration", ret: P.Duration, args: [P.Duration]},
{func: "Duration__num", ret: P.Duration, args: [J.JSNumber]},
"factor",
{func: "Duration__int", ret: P.Duration, args: [J.JSInt]},
"quotient",
{func: "bool__Duration", ret: J.JSBool, args: [P.Duration]},
{func: "int__Duration", ret: J.JSInt, args: [P.Duration]},
{func: "StackTrace_", ret: P.StackTrace},
{func: "void__Iterable__String", void: true, args: [P.Iterable], opt: [J.JSString]},
{func: "Element__int", ret: W.Element, args: [J.JSInt]},
{func: "void__int_Element", void: true, args: [J.JSInt, W.Element]},
{func: "Element__Element", ret: W.Element, args: [W.Element]},
{func: "Iterator_10", ret: [P.Iterator, W.Element]},
{func: "void__int_int_Iterable__int0", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, W.Element]], opt: [J.JSInt]},
{func: "void__Node", void: true, args: [W.Node]},
"node",
{func: "Iterator_11", ret: [P.Iterator, W.Node]},
{func: "void__int_int_Iterable__int1", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, W.Node]], opt: [J.JSInt]},
{func: "Set_", ret: [P.Set, J.JSString]},
{func: "void__Set", void: true, args: [[P.Set, J.JSString]]},
"stream",
"pos",
{func: "void__Set0", void: true, args: [P.Set]},
{func: "dynamic__dynamic__List", args: [null], opt: [J.JSArray]},
{func: "dynamic__List__dynamic", args: [J.JSArray], named: {thisArg: null}},
"max",
{func: "bool__int_int_NativeTypedArray_int", ret: J.JSBool, args: [J.JSInt, J.JSInt, H.NativeTypedArray, J.JSInt]},
{func: "void__int_int_Iterable__int5", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, J.JSDouble]], opt: [J.JSInt]},
{func: "void__int_int_Iterable__int6", void: true, args: [J.JSInt, J.JSInt, [P.Iterable, J.JSInt]], opt: [J.JSInt]},
{func: "bool__String__bool", ret: J.JSBool, args: [J.JSString], opt: [J.JSBool]},
"shouldAdd",
{func: "Iterator_14", ret: [P.Iterator, J.JSString]},
{func: "void__void__String", void: true, args: [{func: "void__String", void: true, args: [J.JSString]}]},
{func: "Iterable__dynamic__String", ret: P.Iterable, args: [{func: "dynamic__String", args: [J.JSString]}]},
{func: "List___bool5", ret: [J.JSArray, J.JSString], named: {growable: J.JSBool}},
{func: "Iterable__int5", ret: [P.Iterable, J.JSString], args: [J.JSInt]},
{func: "dynamic__dynamic__Set", args: [{func: "dynamic__Set", args: [[P.Set, J.JSString]]}]},
{func: "void__void__Element", void: true, args: [{func: "void__Element", void: true, args: [W.Element]}]},
"el",
{func: "Proxy_", ret: Q.Proxy},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner((function(a){H.startRootIsolate(A.main$closure(),a)}), []);
  } else {
    (function(a){H.startRootIsolate(A.main$closure(),a)})([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  CanvasRenderingContext2D.prototype.set$fillStyle = function(receiver, v) {
    return receiver.fillStyle = v;
  };
  CanvasRenderingContext2D.prototype.set$font = function(receiver, v) {
    return receiver.font = v;
  };
  CanvasRenderingContext2D.prototype.set$lineWidth = function(receiver, v) {
    return receiver.lineWidth = v;
  };
  CanvasRenderingContext2D.prototype.set$strokeStyle = function(receiver, v) {
    return receiver.strokeStyle = v;
  };
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function Css() {
  }
  Css.builtin$cls = "Css";
  if (!"name" in Css)
    Css.name = "Css";
  $desc = $collectedClasses.Css;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Css.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$title = function(receiver) {
    return receiver.title;
  };
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.set$id = function(receiver, v) {
    return receiver.id = v;
  };
  Element.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  EmbedElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  IFrameElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  ImageData.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageData.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$checked = function(receiver) {
    return receiver.checked;
  };
  InputElement.prototype.set$checked = function(receiver, v) {
    return receiver.checked = v;
  };
  InputElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  InputElement.prototype.set$placeholder = function(receiver, v) {
    return receiver.placeholder = v;
  };
  InputElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  LinkElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MapElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MetaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$start = function(receiver) {
    return receiver.start;
  };
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  OptGroupElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  ScriptElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  TextAreaElement.prototype.set$placeholder = function(receiver, v) {
    return receiver.placeholder = v;
  };
  TextAreaElement.prototype.get$rows = function(receiver) {
    return receiver.rows;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TextMetrics() {
  }
  TextMetrics.builtin$cls = "TextMetrics";
  if (!"name" in TextMetrics)
    TextMetrics.name = "TextMetrics";
  $desc = $collectedClasses.TextMetrics;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextMetrics.prototype = $desc;
  TextMetrics.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  UIEvent.prototype.get$which = function(receiver) {
    return receiver.which;
  };
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  Window.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function XmlDocument() {
  }
  XmlDocument.builtin$cls = "XmlDocument";
  if (!"name" in XmlDocument)
    XmlDocument.name = "XmlDocument";
  $desc = $collectedClasses.XmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlDocument.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  _Attr.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _DocumentType() {
  }
  _DocumentType.builtin$cls = "_DocumentType";
  if (!"name" in _DocumentType)
    _DocumentType.name = "_DocumentType";
  $desc = $collectedClasses._DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DocumentType.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function KeyRange() {
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyRange.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function DiscardElement() {
  }
  DiscardElement.builtin$cls = "DiscardElement";
  if (!"name" in DiscardElement)
    DiscardElement.name = "DiscardElement";
  $desc = $collectedClasses.DiscardElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiscardElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GeometryElement() {
  }
  GeometryElement.builtin$cls = "GeometryElement";
  if (!"name" in GeometryElement)
    GeometryElement.name = "GeometryElement";
  $desc = $collectedClasses.GeometryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeometryElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function RenderingContext() {
  }
  RenderingContext.builtin$cls = "RenderingContext";
  if (!"name" in RenderingContext)
    RenderingContext.name = "RenderingContext";
  $desc = $collectedClasses.RenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingContext.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function NativeByteBuffer() {
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteBuffer.prototype = $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  function NativeByteData() {
  }
  NativeByteData.builtin$cls = "NativeByteData";
  if (!"name" in NativeByteData)
    NativeByteData.name = "NativeByteData";
  $desc = $collectedClasses.NativeByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteData.prototype = $desc;
  function NativeFloat32List() {
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat32List.prototype = $desc;
  function NativeFloat64List() {
  }
  NativeFloat64List.builtin$cls = "NativeFloat64List";
  if (!"name" in NativeFloat64List)
    NativeFloat64List.name = "NativeFloat64List";
  $desc = $collectedClasses.NativeFloat64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat64List.prototype = $desc;
  function NativeInt16List() {
  }
  NativeInt16List.builtin$cls = "NativeInt16List";
  if (!"name" in NativeInt16List)
    NativeInt16List.name = "NativeInt16List";
  $desc = $collectedClasses.NativeInt16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt16List.prototype = $desc;
  function NativeInt32List() {
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt32List.prototype = $desc;
  function NativeInt8List() {
  }
  NativeInt8List.builtin$cls = "NativeInt8List";
  if (!"name" in NativeInt8List)
    NativeInt8List.name = "NativeInt8List";
  $desc = $collectedClasses.NativeInt8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt8List.prototype = $desc;
  function NativeUint16List() {
  }
  NativeUint16List.builtin$cls = "NativeUint16List";
  if (!"name" in NativeUint16List)
    NativeUint16List.name = "NativeUint16List";
  $desc = $collectedClasses.NativeUint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint16List.prototype = $desc;
  function NativeUint32List() {
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint32List.prototype = $desc;
  function NativeUint8ClampedList() {
  }
  NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
  if (!"name" in NativeUint8ClampedList)
    NativeUint8ClampedList.name = "NativeUint8ClampedList";
  $desc = $collectedClasses.NativeUint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8ClampedList.prototype = $desc;
  function NativeUint8List() {
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "Null";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(box_0, entry_1) {
    this.box_0 = box_0;
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(box_0, entry_2) {
    this.box_0 = box_0;
    this.entry_2 = entry_2;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, isPaused, delayedEvents, pauseTokens, doneHandlers, errorsAreFatal) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this.errorsAreFatal = errorsAreFatal;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  _IsolateContext.prototype.get$isPaused = function() {
    return this.isPaused;
  };
  _IsolateContext.prototype.get$delayedEvents = function() {
    return this.delayedEvents;
  };
  function _IsolateContext_handlePing_closure(responsePort_0) {
    this.responsePort_0 = responsePort_0;
  }
  _IsolateContext_handlePing_closure.builtin$cls = "_IsolateContext_handlePing_closure";
  if (!"name" in _IsolateContext_handlePing_closure)
    _IsolateContext_handlePing_closure.name = "_IsolateContext_handlePing_closure";
  $desc = $collectedClasses._IsolateContext_handlePing_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext_handlePing_closure.prototype = $desc;
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, startPaused_4, replyTo_5) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.startPaused_4 = startPaused_4;
    this.replyTo_5 = replyTo_5;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function IsolateNatives__startIsolate_runStartFunction(topLevel_0, args_1, message_2, isSpawnUri_3) {
    this.topLevel_0 = topLevel_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(_id, _handler, _isClosed) {
    this._id = _id;
    this._handler = _handler;
    this._isClosed = _isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function CapabilityImpl(_id) {
    this._id = _id;
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.prototype.get$_id = function() {
    return this._id;
  };
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInvocationMirror.prototype = $desc;
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  function ReflectionInfo_sortedIndex_closure(box_0, this_1, positions_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.positions_2 = positions_2;
  }
  ReflectionInfo_sortedIndex_closure.builtin$cls = "ReflectionInfo_sortedIndex_closure";
  if (!"name" in ReflectionInfo_sortedIndex_closure)
    ReflectionInfo_sortedIndex_closure.name = "ReflectionInfo_sortedIndex_closure";
  $desc = $collectedClasses.ReflectionInfo_sortedIndex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo_sortedIndex_closure.prototype = $desc;
  function Primitives_functionNoSuchMethod_closure(box_0, arguments_1, namedArgumentList_2) {
    this.box_0 = box_0;
    this.arguments_1 = arguments_1;
    this.namedArgumentList_2 = namedArgumentList_2;
  }
  Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
  if (!"name" in Primitives_functionNoSuchMethod_closure)
    Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
  $desc = $collectedClasses.Primitives_functionNoSuchMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_functionNoSuchMethod_closure.prototype = $desc;
  function Primitives_applyFunction_closure(box_0, defaultArguments_1) {
    this.box_0 = box_0;
    this.defaultArguments_1 = defaultArguments_1;
  }
  Primitives_applyFunction_closure.builtin$cls = "Primitives_applyFunction_closure";
  if (!"name" in Primitives_applyFunction_closure)
    Primitives_applyFunction_closure.name = "Primitives_applyFunction_closure";
  $desc = $collectedClasses.Primitives_applyFunction_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  StringMatch.prototype.get$start = function(receiver) {
    return this.start;
  };
  function BaseCanvasModel(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  BaseCanvasModel.builtin$cls = "BaseCanvasModel";
  if (!"name" in BaseCanvasModel)
    BaseCanvasModel.name = "BaseCanvasModel";
  $desc = $collectedClasses.BaseCanvasModel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseCanvasModel.prototype = $desc;
  BaseCanvasModel.prototype.get$x = function(receiver) {
    return this.x;
  };
  BaseCanvasModel.prototype.set$x = function(receiver, v) {
    return this.x = v;
  };
  BaseCanvasModel.prototype.get$y = function(receiver) {
    return this.y;
  };
  BaseCanvasModel.prototype.set$y = function(receiver, v) {
    return this.y = v;
  };
  BaseCanvasModel.prototype.get$width = function(receiver) {
    return this.width;
  };
  BaseCanvasModel.prototype.set$width = function(receiver, v) {
    return this.width = v;
  };
  BaseCanvasModel.prototype.get$height = function(receiver) {
    return this.height;
  };
  BaseCanvasModel.prototype.set$height = function(receiver, v) {
    return this.height = v;
  };
  function BaseCanvasModelController(borderInteractionController) {
    this.borderInteractionController = borderInteractionController;
  }
  BaseCanvasModelController.builtin$cls = "BaseCanvasModelController";
  if (!"name" in BaseCanvasModelController)
    BaseCanvasModelController.name = "BaseCanvasModelController";
  $desc = $collectedClasses.BaseCanvasModelController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseCanvasModelController.prototype = $desc;
  BaseCanvasModelController.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  function BaseController() {
  }
  BaseController.builtin$cls = "BaseController";
  if (!"name" in BaseController)
    BaseController.name = "BaseController";
  $desc = $collectedClasses.BaseController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseController.prototype = $desc;
  function BaseField(name, dataType, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.name = name;
    this.dataType = dataType;
    this.primaryKey = primaryKey;
    this.foreignKey = foreignKey;
    this.nulls = nulls;
    this.composite = composite;
    this.multivalued = multivalued;
    this.derived = derived;
    this.baseSubFields = baseSubFields;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  BaseField.builtin$cls = "BaseField";
  if (!"name" in BaseField)
    BaseField.name = "BaseField";
  $desc = $collectedClasses.BaseField;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseField.prototype = $desc;
  BaseField.prototype.get$name = function(receiver) {
    return this.name;
  };
  BaseField.prototype.set$name = function(receiver, v) {
    return this.name = v;
  };
  BaseField.prototype.get$dataType = function() {
    return this.dataType;
  };
  BaseField.prototype.set$dataType = function(v) {
    return this.dataType = v;
  };
  BaseField.prototype.get$primaryKey = function() {
    return this.primaryKey;
  };
  BaseField.prototype.set$primaryKey = function(v) {
    return this.primaryKey = v;
  };
  BaseField.prototype.get$foreignKey = function() {
    return this.foreignKey;
  };
  BaseField.prototype.set$foreignKey = function(v) {
    return this.foreignKey = v;
  };
  BaseField.prototype.get$nulls = function() {
    return this.nulls;
  };
  BaseField.prototype.get$composite = function() {
    return this.composite;
  };
  BaseField.prototype.get$multivalued = function() {
    return this.multivalued;
  };
  BaseField.prototype.get$derived = function() {
    return this.derived;
  };
  BaseField.prototype.get$baseSubFields = function() {
    return this.baseSubFields;
  };
  function BaseModal(type) {
    this.type = type;
  }
  BaseModal.builtin$cls = "BaseModal";
  if (!"name" in BaseModal)
    BaseModal.name = "BaseModal";
  $desc = $collectedClasses.BaseModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseModal.prototype = $desc;
  BaseModal.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  function BaseModel(id) {
    this.id = id;
  }
  BaseModel.builtin$cls = "BaseModel";
  if (!"name" in BaseModel)
    BaseModel.name = "BaseModel";
  $desc = $collectedClasses.BaseModel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseModel.prototype = $desc;
  BaseModel.prototype.get$id = function(receiver) {
    return this.id;
  };
  BaseModel.prototype.set$id = function(receiver, v) {
    return this.id = v;
  };
  function BaseView(toggled) {
    this.toggled = toggled;
  }
  BaseView.builtin$cls = "BaseView";
  if (!"name" in BaseView)
    BaseView.name = "BaseView";
  $desc = $collectedClasses.BaseView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseView.prototype = $desc;
  BaseView.prototype.set$toggled = function(v) {
    return this.toggled = v;
  };
  function BorderConnection(canvasModelA, canvasModelB, borderCodeA, borderCodeB, borderPointA, borderPointB, angle, specialRelation, enforcedOppositeBorderForModelA, pointsUpdatedController) {
    this.canvasModelA = canvasModelA;
    this.canvasModelB = canvasModelB;
    this.borderCodeA = borderCodeA;
    this.borderCodeB = borderCodeB;
    this.borderPointA = borderPointA;
    this.borderPointB = borderPointB;
    this.angle = angle;
    this.specialRelation = specialRelation;
    this.enforcedOppositeBorderForModelA = enforcedOppositeBorderForModelA;
    this.pointsUpdatedController = pointsUpdatedController;
  }
  BorderConnection.builtin$cls = "BorderConnection";
  if (!"name" in BorderConnection)
    BorderConnection.name = "BorderConnection";
  $desc = $collectedClasses.BorderConnection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BorderConnection.prototype = $desc;
  BorderConnection.prototype.get$canvasModelA = function() {
    return this.canvasModelA;
  };
  BorderConnection.prototype.set$canvasModelA = function(v) {
    return this.canvasModelA = v;
  };
  BorderConnection.prototype.get$canvasModelB = function() {
    return this.canvasModelB;
  };
  BorderConnection.prototype.set$canvasModelB = function(v) {
    return this.canvasModelB = v;
  };
  BorderConnection.prototype.get$borderCodeA = function() {
    return this.borderCodeA;
  };
  BorderConnection.prototype.get$borderCodeB = function() {
    return this.borderCodeB;
  };
  BorderConnection.prototype.get$borderPointA = function() {
    return this.borderPointA;
  };
  BorderConnection.prototype.get$borderPointB = function() {
    return this.borderPointB;
  };
  BorderConnection.prototype.get$angle = function() {
    return this.angle;
  };
  BorderConnection.prototype.get$specialRelation = function() {
    return this.specialRelation;
  };
  BorderConnection.prototype.set$specialRelation = function(v) {
    return this.specialRelation = v;
  };
  BorderConnection.prototype.get$enforcedOppositeBorderForModelA = function() {
    return this.enforcedOppositeBorderForModelA;
  };
  function BorderInteractionController(canvasModels, borderConnections, controllerFactory) {
    this.canvasModels = canvasModels;
    this.borderConnections = borderConnections;
    this.controllerFactory = controllerFactory;
  }
  BorderInteractionController.builtin$cls = "BorderInteractionController";
  if (!"name" in BorderInteractionController)
    BorderInteractionController.name = "BorderInteractionController";
  $desc = $collectedClasses.BorderInteractionController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BorderInteractionController.prototype = $desc;
  function BorderPoint(point, borderCode) {
    this.point = point;
    this.borderCode = borderCode;
  }
  BorderPoint.builtin$cls = "BorderPoint";
  if (!"name" in BorderPoint)
    BorderPoint.name = "BorderPoint";
  $desc = $collectedClasses.BorderPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BorderPoint.prototype = $desc;
  BorderPoint.prototype.get$point = function() {
    return this.point;
  };
  BorderPoint.prototype.get$borderCode = function() {
    return this.borderCode;
  };
  function BaseFieldGluer(fieldsIndex, outerBorderScale, glueObject, ctx, tableFieldGlues, borderInteractionController) {
    this.fieldsIndex = fieldsIndex;
    this.outerBorderScale = outerBorderScale;
    this.glueObject = glueObject;
    this.ctx = ctx;
    this.tableFieldGlues = tableFieldGlues;
    this.borderInteractionController = borderInteractionController;
  }
  BaseFieldGluer.builtin$cls = "BaseFieldGluer";
  if (!"name" in BaseFieldGluer)
    BaseFieldGluer.name = "BaseFieldGluer";
  $desc = $collectedClasses.BaseFieldGluer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseFieldGluer.prototype = $desc;
  BaseFieldGluer.prototype.get$tableFieldGlues = function() {
    return this.tableFieldGlues;
  };
  BaseFieldGluer.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  function BaseFieldGluer__registerPointsUpdated_closure(this_0, tableFieldGlue_1, bcn_2) {
    this.this_0 = this_0;
    this.tableFieldGlue_1 = tableFieldGlue_1;
    this.bcn_2 = bcn_2;
  }
  BaseFieldGluer__registerPointsUpdated_closure.builtin$cls = "BaseFieldGluer__registerPointsUpdated_closure";
  if (!"name" in BaseFieldGluer__registerPointsUpdated_closure)
    BaseFieldGluer__registerPointsUpdated_closure.name = "BaseFieldGluer__registerPointsUpdated_closure";
  $desc = $collectedClasses.BaseFieldGluer__registerPointsUpdated_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseFieldGluer__registerPointsUpdated_closure.prototype = $desc;
  function TableFieldGlue(tablePoint, tableFieldPoint, tableField) {
    this.tablePoint = tablePoint;
    this.tableFieldPoint = tableFieldPoint;
    this.tableField = tableField;
  }
  TableFieldGlue.builtin$cls = "TableFieldGlue";
  if (!"name" in TableFieldGlue)
    TableFieldGlue.name = "TableFieldGlue";
  $desc = $collectedClasses.TableFieldGlue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableFieldGlue.prototype = $desc;
  TableFieldGlue.prototype.get$tablePoint = function() {
    return this.tablePoint;
  };
  TableFieldGlue.prototype.get$tableFieldPoint = function() {
    return this.tableFieldPoint;
  };
  function CanvasActionsController(canvas, ctx, tableController, relationshipController, specializationController, borderInteractionController, diagramController, relationshipText, relationCreationIdentifierRelationship, relationCreationTernary, relationCreationNonIdentifierRelationship, relationCreationSelf, specializationCreation, relationCreationManyToMany, canvasInteractionStrategy, selectionRectangle, controllerFactory) {
    this.canvas = canvas;
    this.ctx = ctx;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
    this.specializationController = specializationController;
    this.borderInteractionController = borderInteractionController;
    this.diagramController = diagramController;
    this.relationshipText = relationshipText;
    this.relationCreationIdentifierRelationship = relationCreationIdentifierRelationship;
    this.relationCreationTernary = relationCreationTernary;
    this.relationCreationNonIdentifierRelationship = relationCreationNonIdentifierRelationship;
    this.relationCreationSelf = relationCreationSelf;
    this.specializationCreation = specializationCreation;
    this.relationCreationManyToMany = relationCreationManyToMany;
    this.canvasInteractionStrategy = canvasInteractionStrategy;
    this.selectionRectangle = selectionRectangle;
    this.controllerFactory = controllerFactory;
  }
  CanvasActionsController.builtin$cls = "CanvasActionsController";
  if (!"name" in CanvasActionsController)
    CanvasActionsController.name = "CanvasActionsController";
  $desc = $collectedClasses.CanvasActionsController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController.prototype = $desc;
  CanvasActionsController.prototype.get$tableController = function() {
    return this.tableController;
  };
  CanvasActionsController.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  function CanvasActionsController_closure(this_0) {
    this.this_0 = this_0;
  }
  CanvasActionsController_closure.builtin$cls = "CanvasActionsController_closure";
  if (!"name" in CanvasActionsController_closure)
    CanvasActionsController_closure.name = "CanvasActionsController_closure";
  $desc = $collectedClasses.CanvasActionsController_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController_closure.prototype = $desc;
  function CanvasActionsController_closure0(this_1) {
    this.this_1 = this_1;
  }
  CanvasActionsController_closure0.builtin$cls = "CanvasActionsController_closure0";
  if (!"name" in CanvasActionsController_closure0)
    CanvasActionsController_closure0.name = "CanvasActionsController_closure0";
  $desc = $collectedClasses.CanvasActionsController_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController_closure0.prototype = $desc;
  function CanvasActionsController_closure1(this_2) {
    this.this_2 = this_2;
  }
  CanvasActionsController_closure1.builtin$cls = "CanvasActionsController_closure1";
  if (!"name" in CanvasActionsController_closure1)
    CanvasActionsController_closure1.name = "CanvasActionsController_closure1";
  $desc = $collectedClasses.CanvasActionsController_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController_closure1.prototype = $desc;
  function CanvasActionsController_closure2(this_3) {
    this.this_3 = this_3;
  }
  CanvasActionsController_closure2.builtin$cls = "CanvasActionsController_closure2";
  if (!"name" in CanvasActionsController_closure2)
    CanvasActionsController_closure2.name = "CanvasActionsController_closure2";
  $desc = $collectedClasses.CanvasActionsController_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController_closure2.prototype = $desc;
  function CanvasActionsController_closure3(this_4) {
    this.this_4 = this_4;
  }
  CanvasActionsController_closure3.builtin$cls = "CanvasActionsController_closure3";
  if (!"name" in CanvasActionsController_closure3)
    CanvasActionsController_closure3.name = "CanvasActionsController_closure3";
  $desc = $collectedClasses.CanvasActionsController_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController_closure3.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure() {
  }
  CanvasActionsController__registerRelationshipCreation_closure.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure)
    CanvasActionsController__registerRelationshipCreation_closure.name = "CanvasActionsController__registerRelationshipCreation_closure";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation__closure() {
  }
  CanvasActionsController__registerRelationshipCreation__closure.builtin$cls = "CanvasActionsController__registerRelationshipCreation__closure";
  if (!"name" in CanvasActionsController__registerRelationshipCreation__closure)
    CanvasActionsController__registerRelationshipCreation__closure.name = "CanvasActionsController__registerRelationshipCreation__closure";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation__closure.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure0(this_0) {
    this.this_0 = this_0;
  }
  CanvasActionsController__registerRelationshipCreation_closure0.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure0";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure0)
    CanvasActionsController__registerRelationshipCreation_closure0.name = "CanvasActionsController__registerRelationshipCreation_closure0";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure0.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure1(this_1) {
    this.this_1 = this_1;
  }
  CanvasActionsController__registerRelationshipCreation_closure1.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure1";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure1)
    CanvasActionsController__registerRelationshipCreation_closure1.name = "CanvasActionsController__registerRelationshipCreation_closure1";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure1.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure2(this_2) {
    this.this_2 = this_2;
  }
  CanvasActionsController__registerRelationshipCreation_closure2.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure2";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure2)
    CanvasActionsController__registerRelationshipCreation_closure2.name = "CanvasActionsController__registerRelationshipCreation_closure2";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure2.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure3(this_3) {
    this.this_3 = this_3;
  }
  CanvasActionsController__registerRelationshipCreation_closure3.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure3";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure3)
    CanvasActionsController__registerRelationshipCreation_closure3.name = "CanvasActionsController__registerRelationshipCreation_closure3";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure3.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure4(this_4) {
    this.this_4 = this_4;
  }
  CanvasActionsController__registerRelationshipCreation_closure4.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure4";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure4)
    CanvasActionsController__registerRelationshipCreation_closure4.name = "CanvasActionsController__registerRelationshipCreation_closure4";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure4.prototype = $desc;
  function CanvasActionsController__registerRelationshipCreation_closure5(this_5) {
    this.this_5 = this_5;
  }
  CanvasActionsController__registerRelationshipCreation_closure5.builtin$cls = "CanvasActionsController__registerRelationshipCreation_closure5";
  if (!"name" in CanvasActionsController__registerRelationshipCreation_closure5)
    CanvasActionsController__registerRelationshipCreation_closure5.name = "CanvasActionsController__registerRelationshipCreation_closure5";
  $desc = $collectedClasses.CanvasActionsController__registerRelationshipCreation_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerRelationshipCreation_closure5.prototype = $desc;
  function CanvasActionsController__registerTableButton_closure(this_0) {
    this.this_0 = this_0;
  }
  CanvasActionsController__registerTableButton_closure.builtin$cls = "CanvasActionsController__registerTableButton_closure";
  if (!"name" in CanvasActionsController__registerTableButton_closure)
    CanvasActionsController__registerTableButton_closure.name = "CanvasActionsController__registerTableButton_closure";
  $desc = $collectedClasses.CanvasActionsController__registerTableButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasActionsController__registerTableButton_closure.prototype = $desc;
  function CanvasEllipseDrawer(ctx) {
    this.ctx = ctx;
  }
  CanvasEllipseDrawer.builtin$cls = "CanvasEllipseDrawer";
  if (!"name" in CanvasEllipseDrawer)
    CanvasEllipseDrawer.name = "CanvasEllipseDrawer";
  $desc = $collectedClasses.CanvasEllipseDrawer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasEllipseDrawer.prototype = $desc;
  function CanvasScroller(canvas, evt) {
    this.canvas = canvas;
    this.evt = evt;
  }
  CanvasScroller.builtin$cls = "CanvasScroller";
  if (!"name" in CanvasScroller)
    CanvasScroller.name = "CanvasScroller";
  $desc = $collectedClasses.CanvasScroller;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasScroller.prototype = $desc;
  function CanvasInteractionStrategy() {
  }
  CanvasInteractionStrategy.builtin$cls = "CanvasInteractionStrategy";
  if (!"name" in CanvasInteractionStrategy)
    CanvasInteractionStrategy.name = "CanvasInteractionStrategy";
  $desc = $collectedClasses.CanvasInteractionStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasInteractionStrategy.prototype = $desc;
  function CanvasModelSelectAndDragStrategy(ctx, baseCanvasModel, initialCanvasModelPosition, initialMousePosition, canvasModelFieldsPosition, baseCanvasController, borderInteractionController, canvasActionsController, diagramController) {
    this.ctx = ctx;
    this.baseCanvasModel = baseCanvasModel;
    this.initialCanvasModelPosition = initialCanvasModelPosition;
    this.initialMousePosition = initialMousePosition;
    this.canvasModelFieldsPosition = canvasModelFieldsPosition;
    this.baseCanvasController = baseCanvasController;
    this.borderInteractionController = borderInteractionController;
    this.canvasActionsController = canvasActionsController;
    this.diagramController = diagramController;
  }
  CanvasModelSelectAndDragStrategy.builtin$cls = "CanvasModelSelectAndDragStrategy";
  if (!"name" in CanvasModelSelectAndDragStrategy)
    CanvasModelSelectAndDragStrategy.name = "CanvasModelSelectAndDragStrategy";
  $desc = $collectedClasses.CanvasModelSelectAndDragStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasModelSelectAndDragStrategy.prototype = $desc;
  CanvasModelSelectAndDragStrategy.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  function DefaultStrategy(ctx, tableController, relationshipController) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
  }
  DefaultStrategy.builtin$cls = "DefaultStrategy";
  if (!"name" in DefaultStrategy)
    DefaultStrategy.name = "DefaultStrategy";
  $desc = $collectedClasses.DefaultStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultStrategy.prototype = $desc;
  DefaultStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  function RelationCanvasMenuStrategy(ctx, relationshipController, canvasActionsContorller, clickedRelationship, canvasMenu) {
    this.ctx = ctx;
    this.relationshipController = relationshipController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.clickedRelationship = clickedRelationship;
    this.canvasMenu = canvasMenu;
  }
  RelationCanvasMenuStrategy.builtin$cls = "RelationCanvasMenuStrategy";
  if (!"name" in RelationCanvasMenuStrategy)
    RelationCanvasMenuStrategy.name = "RelationCanvasMenuStrategy";
  $desc = $collectedClasses.RelationCanvasMenuStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationCanvasMenuStrategy.prototype = $desc;
  function RelationCanvasMenuStrategy__handleDeleteModelButton_closure(this_0) {
    this.this_0 = this_0;
  }
  RelationCanvasMenuStrategy__handleDeleteModelButton_closure.builtin$cls = "RelationCanvasMenuStrategy__handleDeleteModelButton_closure";
  if (!"name" in RelationCanvasMenuStrategy__handleDeleteModelButton_closure)
    RelationCanvasMenuStrategy__handleDeleteModelButton_closure.name = "RelationCanvasMenuStrategy__handleDeleteModelButton_closure";
  $desc = $collectedClasses.RelationCanvasMenuStrategy__handleDeleteModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationCanvasMenuStrategy__handleDeleteModelButton_closure.prototype = $desc;
  function RelationCanvasMenuStrategy__handleEditModelButton_closure(this_0) {
    this.this_0 = this_0;
  }
  RelationCanvasMenuStrategy__handleEditModelButton_closure.builtin$cls = "RelationCanvasMenuStrategy__handleEditModelButton_closure";
  if (!"name" in RelationCanvasMenuStrategy__handleEditModelButton_closure)
    RelationCanvasMenuStrategy__handleEditModelButton_closure.name = "RelationCanvasMenuStrategy__handleEditModelButton_closure";
  $desc = $collectedClasses.RelationCanvasMenuStrategy__handleEditModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationCanvasMenuStrategy__handleEditModelButton_closure.prototype = $desc;
  function RelationshipDefinitionStrategy(ctx, tableController, relationshipController, canvasActionsContorller, diagramController, relationshipCreationStatus, relationshipType, parentTable, childTable, movedOverTable) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.diagramController = diagramController;
    this.relationshipCreationStatus = relationshipCreationStatus;
    this.relationshipType = relationshipType;
    this.parentTable = parentTable;
    this.childTable = childTable;
    this.movedOverTable = movedOverTable;
  }
  RelationshipDefinitionStrategy.builtin$cls = "RelationshipDefinitionStrategy";
  if (!"name" in RelationshipDefinitionStrategy)
    RelationshipDefinitionStrategy.name = "RelationshipDefinitionStrategy";
  $desc = $collectedClasses.RelationshipDefinitionStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipDefinitionStrategy.prototype = $desc;
  RelationshipDefinitionStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  RelationshipDefinitionStrategy.prototype.get$parentTable = function() {
    return this.parentTable;
  };
  RelationshipDefinitionStrategy.prototype.set$parentTable = function(v) {
    return this.parentTable = v;
  };
  RelationshipDefinitionStrategy.prototype.get$childTable = function() {
    return this.childTable;
  };
  RelationshipDefinitionStrategy.prototype.set$childTable = function(v) {
    return this.childTable = v;
  };
  function RelationshipCreationStatus(status) {
    this.status = status;
  }
  RelationshipCreationStatus.builtin$cls = "RelationshipCreationStatus";
  if (!"name" in RelationshipCreationStatus)
    RelationshipCreationStatus.name = "RelationshipCreationStatus";
  $desc = $collectedClasses.RelationshipCreationStatus;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipCreationStatus.prototype = $desc;
  function RelationshipTernaryDefinitionStrategy(ctx, tableController, relationshipController, canvasActionsContorller, relationshipCreationStatus, ternaryTable, ternaryRelationship, movedOverTable, movedOverRelationship) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.relationshipCreationStatus = relationshipCreationStatus;
    this.ternaryTable = ternaryTable;
    this.ternaryRelationship = ternaryRelationship;
    this.movedOverTable = movedOverTable;
    this.movedOverRelationship = movedOverRelationship;
  }
  RelationshipTernaryDefinitionStrategy.builtin$cls = "RelationshipTernaryDefinitionStrategy";
  if (!"name" in RelationshipTernaryDefinitionStrategy)
    RelationshipTernaryDefinitionStrategy.name = "RelationshipTernaryDefinitionStrategy";
  $desc = $collectedClasses.RelationshipTernaryDefinitionStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipTernaryDefinitionStrategy.prototype = $desc;
  RelationshipTernaryDefinitionStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  RelationshipTernaryDefinitionStrategy.prototype.get$ternaryTable = function() {
    return this.ternaryTable;
  };
  RelationshipTernaryDefinitionStrategy.prototype.set$ternaryTable = function(v) {
    return this.ternaryTable = v;
  };
  function SpecializationCanvasMenuStrategy(ctx, specializationController, tableController, canvasActionsContorller, clickedSpecialization, canvasMenu) {
    this.ctx = ctx;
    this.specializationController = specializationController;
    this.tableController = tableController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.clickedSpecialization = clickedSpecialization;
    this.canvasMenu = canvasMenu;
  }
  SpecializationCanvasMenuStrategy.builtin$cls = "SpecializationCanvasMenuStrategy";
  if (!"name" in SpecializationCanvasMenuStrategy)
    SpecializationCanvasMenuStrategy.name = "SpecializationCanvasMenuStrategy";
  $desc = $collectedClasses.SpecializationCanvasMenuStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationCanvasMenuStrategy.prototype = $desc;
  SpecializationCanvasMenuStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  function SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure(this_0) {
    this.this_0 = this_0;
  }
  SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure.builtin$cls = "SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure";
  if (!"name" in SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure)
    SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure.name = "SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure";
  $desc = $collectedClasses.SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure.prototype = $desc;
  function SpecializationCanvasMenuStrategy__handleEditModelButton_closure(this_0, canvasMousePosition_1) {
    this.this_0 = this_0;
    this.canvasMousePosition_1 = canvasMousePosition_1;
  }
  SpecializationCanvasMenuStrategy__handleEditModelButton_closure.builtin$cls = "SpecializationCanvasMenuStrategy__handleEditModelButton_closure";
  if (!"name" in SpecializationCanvasMenuStrategy__handleEditModelButton_closure)
    SpecializationCanvasMenuStrategy__handleEditModelButton_closure.name = "SpecializationCanvasMenuStrategy__handleEditModelButton_closure";
  $desc = $collectedClasses.SpecializationCanvasMenuStrategy__handleEditModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationCanvasMenuStrategy__handleEditModelButton_closure.prototype = $desc;
  function SpecializationNewConnectionStrategy(ctx, tableController, canvasActionsContorller, specializationController, clickedSpecialization, specializedTable, movedOverTable, lastTable) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.specializationController = specializationController;
    this.clickedSpecialization = clickedSpecialization;
    this.specializedTable = specializedTable;
    this.movedOverTable = movedOverTable;
    this.lastTable = lastTable;
  }
  SpecializationNewConnectionStrategy.builtin$cls = "SpecializationNewConnectionStrategy";
  if (!"name" in SpecializationNewConnectionStrategy)
    SpecializationNewConnectionStrategy.name = "SpecializationNewConnectionStrategy";
  $desc = $collectedClasses.SpecializationNewConnectionStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationNewConnectionStrategy.prototype = $desc;
  SpecializationNewConnectionStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  function SpecializationStrategy(ctx, tableController, canvasActionsContorller, specializationController, diagramController, creationStatus, parentTable, specializedTable, movedOverTable) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.specializationController = specializationController;
    this.diagramController = diagramController;
    this.creationStatus = creationStatus;
    this.parentTable = parentTable;
    this.specializedTable = specializedTable;
    this.movedOverTable = movedOverTable;
  }
  SpecializationStrategy.builtin$cls = "SpecializationStrategy";
  if (!"name" in SpecializationStrategy)
    SpecializationStrategy.name = "SpecializationStrategy";
  $desc = $collectedClasses.SpecializationStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationStrategy.prototype = $desc;
  SpecializationStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  SpecializationStrategy.prototype.get$parentTable = function() {
    return this.parentTable;
  };
  SpecializationStrategy.prototype.set$parentTable = function(v) {
    return this.parentTable = v;
  };
  function CreationStatus(status) {
    this.status = status;
  }
  CreationStatus.builtin$cls = "CreationStatus";
  if (!"name" in CreationStatus)
    CreationStatus.name = "CreationStatus";
  $desc = $collectedClasses.CreationStatus;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CreationStatus.prototype = $desc;
  function TableCanvasMenuStrategy(ctx, tableController, canvasActionsContorller, clickedTable, canvasMenu) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.clickedTable = clickedTable;
    this.canvasMenu = canvasMenu;
  }
  TableCanvasMenuStrategy.builtin$cls = "TableCanvasMenuStrategy";
  if (!"name" in TableCanvasMenuStrategy)
    TableCanvasMenuStrategy.name = "TableCanvasMenuStrategy";
  $desc = $collectedClasses.TableCanvasMenuStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCanvasMenuStrategy.prototype = $desc;
  TableCanvasMenuStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  function TableCanvasMenuStrategy__handleDeleteModelButton_closure(this_0) {
    this.this_0 = this_0;
  }
  TableCanvasMenuStrategy__handleDeleteModelButton_closure.builtin$cls = "TableCanvasMenuStrategy__handleDeleteModelButton_closure";
  if (!"name" in TableCanvasMenuStrategy__handleDeleteModelButton_closure)
    TableCanvasMenuStrategy__handleDeleteModelButton_closure.name = "TableCanvasMenuStrategy__handleDeleteModelButton_closure";
  $desc = $collectedClasses.TableCanvasMenuStrategy__handleDeleteModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCanvasMenuStrategy__handleDeleteModelButton_closure.prototype = $desc;
  function TableCanvasMenuStrategy__handleEditModelButton_closure(this_0) {
    this.this_0 = this_0;
  }
  TableCanvasMenuStrategy__handleEditModelButton_closure.builtin$cls = "TableCanvasMenuStrategy__handleEditModelButton_closure";
  if (!"name" in TableCanvasMenuStrategy__handleEditModelButton_closure)
    TableCanvasMenuStrategy__handleEditModelButton_closure.name = "TableCanvasMenuStrategy__handleEditModelButton_closure";
  $desc = $collectedClasses.TableCanvasMenuStrategy__handleEditModelButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCanvasMenuStrategy__handleEditModelButton_closure.prototype = $desc;
  function TableCreationStrategy(ctx, tableController, canvasActionsContorller, tableBeingCreated, initialTablePosition, initialMousePosition, tableFieldsPosition) {
    this.ctx = ctx;
    this.tableController = tableController;
    this.canvasActionsContorller = canvasActionsContorller;
    this.tableBeingCreated = tableBeingCreated;
    this.initialTablePosition = initialTablePosition;
    this.initialMousePosition = initialMousePosition;
    this.tableFieldsPosition = tableFieldsPosition;
  }
  TableCreationStrategy.builtin$cls = "TableCreationStrategy";
  if (!"name" in TableCreationStrategy)
    TableCreationStrategy.name = "TableCreationStrategy";
  $desc = $collectedClasses.TableCreationStrategy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCreationStrategy.prototype = $desc;
  TableCreationStrategy.prototype.get$tableController = function() {
    return this.tableController;
  };
  function Command() {
  }
  Command.builtin$cls = "Command";
  if (!"name" in Command)
    Command.name = "Command";
  $desc = $collectedClasses.Command;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Command.prototype = $desc;
  function CommandController(undoStack, redoStack, undoing, redoing, undoButton, redoButton) {
    this.undoStack = undoStack;
    this.redoStack = redoStack;
    this.undoing = undoing;
    this.redoing = redoing;
    this.undoButton = undoButton;
    this.redoButton = redoButton;
  }
  CommandController.builtin$cls = "CommandController";
  if (!"name" in CommandController)
    CommandController.name = "CommandController";
  $desc = $collectedClasses.CommandController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CommandController.prototype = $desc;
  function Connector() {
  }
  Connector.builtin$cls = "Connector";
  if (!"name" in Connector)
    Connector.name = "Connector";
  $desc = $collectedClasses.Connector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Connector.prototype = $desc;
  function ConnectorMany(connectorType, borderPoint, centralPoint, gluePoint, ctx, RADIUS, circled) {
    this.connectorType = connectorType;
    this.borderPoint = borderPoint;
    this.centralPoint = centralPoint;
    this.gluePoint = gluePoint;
    this.ctx = ctx;
    this.RADIUS = RADIUS;
    this.circled = circled;
  }
  ConnectorMany.builtin$cls = "ConnectorMany";
  if (!"name" in ConnectorMany)
    ConnectorMany.name = "ConnectorMany";
  $desc = $collectedClasses.ConnectorMany;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConnectorMany.prototype = $desc;
  function ConnectorOne(connectorType, borderPoint, centralPoint, gluePoint, ctx, RADIUS, circled) {
    this.connectorType = connectorType;
    this.borderPoint = borderPoint;
    this.centralPoint = centralPoint;
    this.gluePoint = gluePoint;
    this.ctx = ctx;
    this.RADIUS = RADIUS;
    this.circled = circled;
  }
  ConnectorOne.builtin$cls = "ConnectorOne";
  if (!"name" in ConnectorOne)
    ConnectorOne.name = "ConnectorOne";
  $desc = $collectedClasses.ConnectorOne;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConnectorOne.prototype = $desc;
  function ConnectorOneOrMany(connectorType, borderPoint, centralPoint, gluePoint, ctx, RADIUS, circled) {
    this.connectorType = connectorType;
    this.borderPoint = borderPoint;
    this.centralPoint = centralPoint;
    this.gluePoint = gluePoint;
    this.ctx = ctx;
    this.RADIUS = RADIUS;
    this.circled = circled;
  }
  ConnectorOneOrMany.builtin$cls = "ConnectorOneOrMany";
  if (!"name" in ConnectorOneOrMany)
    ConnectorOneOrMany.name = "ConnectorOneOrMany";
  $desc = $collectedClasses.ConnectorOneOrMany;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConnectorOneOrMany.prototype = $desc;
  function ConnectorZeroOrMany(connectorType, borderPoint, centralPoint, gluePoint, ctx, RADIUS, circled) {
    this.connectorType = connectorType;
    this.borderPoint = borderPoint;
    this.centralPoint = centralPoint;
    this.gluePoint = gluePoint;
    this.ctx = ctx;
    this.RADIUS = RADIUS;
    this.circled = circled;
  }
  ConnectorZeroOrMany.builtin$cls = "ConnectorZeroOrMany";
  if (!"name" in ConnectorZeroOrMany)
    ConnectorZeroOrMany.name = "ConnectorZeroOrMany";
  $desc = $collectedClasses.ConnectorZeroOrMany;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConnectorZeroOrMany.prototype = $desc;
  function ConnectorZeroOrOne(connectorType, borderPoint, centralPoint, gluePoint, ctx, RADIUS, circled) {
    this.connectorType = connectorType;
    this.borderPoint = borderPoint;
    this.centralPoint = centralPoint;
    this.gluePoint = gluePoint;
    this.ctx = ctx;
    this.RADIUS = RADIUS;
    this.circled = circled;
  }
  ConnectorZeroOrOne.builtin$cls = "ConnectorZeroOrOne";
  if (!"name" in ConnectorZeroOrOne)
    ConnectorZeroOrOne.name = "ConnectorZeroOrOne";
  $desc = $collectedClasses.ConnectorZeroOrOne;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConnectorZeroOrOne.prototype = $desc;
  function Diagram(conceptual, logical, physical, id) {
    this.conceptual = conceptual;
    this.logical = logical;
    this.physical = physical;
    this.id = id;
  }
  Diagram.builtin$cls = "Diagram";
  if (!"name" in Diagram)
    Diagram.name = "Diagram";
  $desc = $collectedClasses.Diagram;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Diagram.prototype = $desc;
  function DiagramController(diagram, SYNCHRONOUS_DIAGRAM_READ_HAPPENED, tableController, relationshipController, specializationController, _HTTPRequestController, controllerFactory) {
    this.diagram = diagram;
    this.SYNCHRONOUS_DIAGRAM_READ_HAPPENED = SYNCHRONOUS_DIAGRAM_READ_HAPPENED;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
    this.specializationController = specializationController;
    this._HTTPRequestController = _HTTPRequestController;
    this.controllerFactory = controllerFactory;
  }
  DiagramController.builtin$cls = "DiagramController";
  if (!"name" in DiagramController)
    DiagramController.name = "DiagramController";
  $desc = $collectedClasses.DiagramController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiagramController.prototype = $desc;
  DiagramController.prototype.get$tableController = function() {
    return this.tableController;
  };
  function DiagramController__handleLogicalPhysicalConversion_closure(this_0) {
    this.this_0 = this_0;
  }
  DiagramController__handleLogicalPhysicalConversion_closure.builtin$cls = "DiagramController__handleLogicalPhysicalConversion_closure";
  if (!"name" in DiagramController__handleLogicalPhysicalConversion_closure)
    DiagramController__handleLogicalPhysicalConversion_closure.name = "DiagramController__handleLogicalPhysicalConversion_closure";
  $desc = $collectedClasses.DiagramController__handleLogicalPhysicalConversion_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiagramController__handleLogicalPhysicalConversion_closure.prototype = $desc;
  function ControllerFactory(controllerList, tableController, relationshipController, borderInteractionController, canvasActionsController, preferencesController, commandController, diagramController, hTTPRequestController, tableViewFactory, tableModalFactory, relationshipViewFactory, relationshipModalFactory, specializationViewFactory, specializationController) {
    this.controllerList = controllerList;
    this.tableController = tableController;
    this.relationshipController = relationshipController;
    this.borderInteractionController = borderInteractionController;
    this.canvasActionsController = canvasActionsController;
    this.preferencesController = preferencesController;
    this.commandController = commandController;
    this.diagramController = diagramController;
    this.hTTPRequestController = hTTPRequestController;
    this.tableViewFactory = tableViewFactory;
    this.tableModalFactory = tableModalFactory;
    this.relationshipViewFactory = relationshipViewFactory;
    this.relationshipModalFactory = relationshipModalFactory;
    this.specializationViewFactory = specializationViewFactory;
    this.specializationController = specializationController;
  }
  ControllerFactory.builtin$cls = "ControllerFactory";
  if (!"name" in ControllerFactory)
    ControllerFactory.name = "ControllerFactory";
  $desc = $collectedClasses.ControllerFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ControllerFactory.prototype = $desc;
  ControllerFactory.prototype.get$tableController = function() {
    return this.tableController;
  };
  ControllerFactory.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  function ModalFactory() {
  }
  ModalFactory.builtin$cls = "ModalFactory";
  if (!"name" in ModalFactory)
    ModalFactory.name = "ModalFactory";
  $desc = $collectedClasses.ModalFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModalFactory.prototype = $desc;
  function ViewFactory() {
  }
  ViewFactory.builtin$cls = "ViewFactory";
  if (!"name" in ViewFactory)
    ViewFactory.name = "ViewFactory";
  $desc = $collectedClasses.ViewFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewFactory.prototype = $desc;
  function BaseCanvasModelHTTPRequest() {
  }
  BaseCanvasModelHTTPRequest.builtin$cls = "BaseCanvasModelHTTPRequest";
  if (!"name" in BaseCanvasModelHTTPRequest)
    BaseCanvasModelHTTPRequest.name = "BaseCanvasModelHTTPRequest";
  $desc = $collectedClasses.BaseCanvasModelHTTPRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseCanvasModelHTTPRequest.prototype = $desc;
  function CreateRelationshipRequest(relationship) {
    this.relationship = relationship;
  }
  CreateRelationshipRequest.builtin$cls = "CreateRelationshipRequest";
  if (!"name" in CreateRelationshipRequest)
    CreateRelationshipRequest.name = "CreateRelationshipRequest";
  $desc = $collectedClasses.CreateRelationshipRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CreateRelationshipRequest.prototype = $desc;
  CreateRelationshipRequest.prototype.get$relationship = function() {
    return this.relationship;
  };
  function DeleteRelationshipRequest(relationship) {
    this.relationship = relationship;
  }
  DeleteRelationshipRequest.builtin$cls = "DeleteRelationshipRequest";
  if (!"name" in DeleteRelationshipRequest)
    DeleteRelationshipRequest.name = "DeleteRelationshipRequest";
  $desc = $collectedClasses.DeleteRelationshipRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeleteRelationshipRequest.prototype = $desc;
  DeleteRelationshipRequest.prototype.get$relationship = function() {
    return this.relationship;
  };
  function UpdateRelationshipRequest(relationship, oldRelationship) {
    this.relationship = relationship;
    this.oldRelationship = oldRelationship;
  }
  UpdateRelationshipRequest.builtin$cls = "UpdateRelationshipRequest";
  if (!"name" in UpdateRelationshipRequest)
    UpdateRelationshipRequest.name = "UpdateRelationshipRequest";
  $desc = $collectedClasses.UpdateRelationshipRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UpdateRelationshipRequest.prototype = $desc;
  UpdateRelationshipRequest.prototype.get$relationship = function() {
    return this.relationship;
  };
  function ValidateRelationshipRequest(relationship) {
    this.relationship = relationship;
  }
  ValidateRelationshipRequest.builtin$cls = "ValidateRelationshipRequest";
  if (!"name" in ValidateRelationshipRequest)
    ValidateRelationshipRequest.name = "ValidateRelationshipRequest";
  $desc = $collectedClasses.ValidateRelationshipRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ValidateRelationshipRequest.prototype = $desc;
  ValidateRelationshipRequest.prototype.get$relationship = function() {
    return this.relationship;
  };
  function CreateSpecializationRequest(specialization) {
    this.specialization = specialization;
  }
  CreateSpecializationRequest.builtin$cls = "CreateSpecializationRequest";
  if (!"name" in CreateSpecializationRequest)
    CreateSpecializationRequest.name = "CreateSpecializationRequest";
  $desc = $collectedClasses.CreateSpecializationRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CreateSpecializationRequest.prototype = $desc;
  CreateSpecializationRequest.prototype.get$specialization = function() {
    return this.specialization;
  };
  function DeleteSpecializationRequest(specialization) {
    this.specialization = specialization;
  }
  DeleteSpecializationRequest.builtin$cls = "DeleteSpecializationRequest";
  if (!"name" in DeleteSpecializationRequest)
    DeleteSpecializationRequest.name = "DeleteSpecializationRequest";
  $desc = $collectedClasses.DeleteSpecializationRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeleteSpecializationRequest.prototype = $desc;
  DeleteSpecializationRequest.prototype.get$specialization = function() {
    return this.specialization;
  };
  function UpdateSpecializationRequest(specialization) {
    this.specialization = specialization;
  }
  UpdateSpecializationRequest.builtin$cls = "UpdateSpecializationRequest";
  if (!"name" in UpdateSpecializationRequest)
    UpdateSpecializationRequest.name = "UpdateSpecializationRequest";
  $desc = $collectedClasses.UpdateSpecializationRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UpdateSpecializationRequest.prototype = $desc;
  UpdateSpecializationRequest.prototype.get$specialization = function() {
    return this.specialization;
  };
  function CreateTableRequest(table) {
    this.table = table;
  }
  CreateTableRequest.builtin$cls = "CreateTableRequest";
  if (!"name" in CreateTableRequest)
    CreateTableRequest.name = "CreateTableRequest";
  $desc = $collectedClasses.CreateTableRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CreateTableRequest.prototype = $desc;
  CreateTableRequest.prototype.get$table = function(receiver) {
    return this.table;
  };
  function DeleteTableRequest(table) {
    this.table = table;
  }
  DeleteTableRequest.builtin$cls = "DeleteTableRequest";
  if (!"name" in DeleteTableRequest)
    DeleteTableRequest.name = "DeleteTableRequest";
  $desc = $collectedClasses.DeleteTableRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeleteTableRequest.prototype = $desc;
  DeleteTableRequest.prototype.get$table = function(receiver) {
    return this.table;
  };
  function UpdateTableRequest(table, oldTable) {
    this.table = table;
    this.oldTable = oldTable;
  }
  UpdateTableRequest.builtin$cls = "UpdateTableRequest";
  if (!"name" in UpdateTableRequest)
    UpdateTableRequest.name = "UpdateTableRequest";
  $desc = $collectedClasses.UpdateTableRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UpdateTableRequest.prototype = $desc;
  UpdateTableRequest.prototype.get$table = function(receiver) {
    return this.table;
  };
  function ValidateTableRequest(table) {
    this.table = table;
  }
  ValidateTableRequest.builtin$cls = "ValidateTableRequest";
  if (!"name" in ValidateTableRequest)
    ValidateTableRequest.name = "ValidateTableRequest";
  $desc = $collectedClasses.ValidateTableRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ValidateTableRequest.prototype = $desc;
  ValidateTableRequest.prototype.get$table = function(receiver) {
    return this.table;
  };
  function HTTPRequestController(diagramController, controllerFactory) {
    this.diagramController = diagramController;
    this.controllerFactory = controllerFactory;
  }
  HTTPRequestController.builtin$cls = "HTTPRequestController";
  if (!"name" in HTTPRequestController)
    HTTPRequestController.name = "HTTPRequestController";
  $desc = $collectedClasses.HTTPRequestController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HTTPRequestController.prototype = $desc;
  function Line(start, end) {
    this.start = start;
    this.end = end;
  }
  Line.builtin$cls = "Line";
  if (!"name" in Line)
    Line.name = "Line";
  $desc = $collectedClasses.Line;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Line.prototype = $desc;
  Line.prototype.get$start = function(receiver) {
    return this.start;
  };
  Line.prototype.get$end = function() {
    return this.end;
  };
  function MainController(canvas, ctx, controllerFactory, tableController, canvasActionsController, relationshipController, preferencesController, specializationController, diagramController) {
    this.canvas = canvas;
    this.ctx = ctx;
    this.controllerFactory = controllerFactory;
    this.tableController = tableController;
    this.canvasActionsController = canvasActionsController;
    this.relationshipController = relationshipController;
    this.preferencesController = preferencesController;
    this.specializationController = specializationController;
    this.diagramController = diagramController;
  }
  MainController.builtin$cls = "MainController";
  if (!"name" in MainController)
    MainController.name = "MainController";
  $desc = $collectedClasses.MainController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MainController.prototype = $desc;
  MainController.prototype.get$tableController = function() {
    return this.tableController;
  };
  function MainController_closure(this_0) {
    this.this_0 = this_0;
  }
  MainController_closure.builtin$cls = "MainController_closure";
  if (!"name" in MainController_closure)
    MainController_closure.name = "MainController_closure";
  $desc = $collectedClasses.MainController_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MainController_closure.prototype = $desc;
  function MainController_closure0(this_1) {
    this.this_1 = this_1;
  }
  MainController_closure0.builtin$cls = "MainController_closure0";
  if (!"name" in MainController_closure0)
    MainController_closure0.name = "MainController_closure0";
  $desc = $collectedClasses.MainController_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MainController_closure0.prototype = $desc;
  function ModalBaseFieldBuilder() {
  }
  ModalBaseFieldBuilder.builtin$cls = "ModalBaseFieldBuilder";
  if (!"name" in ModalBaseFieldBuilder)
    ModalBaseFieldBuilder.name = "ModalBaseFieldBuilder";
  $desc = $collectedClasses.ModalBaseFieldBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModalBaseFieldBuilder.prototype = $desc;
  function ModalBaseFieldBuilder__addRemoveButton_closure(this_0, linkRemove_1) {
    this.this_0 = this_0;
    this.linkRemove_1 = linkRemove_1;
  }
  ModalBaseFieldBuilder__addRemoveButton_closure.builtin$cls = "ModalBaseFieldBuilder__addRemoveButton_closure";
  if (!"name" in ModalBaseFieldBuilder__addRemoveButton_closure)
    ModalBaseFieldBuilder__addRemoveButton_closure.name = "ModalBaseFieldBuilder__addRemoveButton_closure";
  $desc = $collectedClasses.ModalBaseFieldBuilder__addRemoveButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModalBaseFieldBuilder__addRemoveButton_closure.prototype = $desc;
  function ModalBaseFieldBuilder__registerMoreFieldButton_closure(this_0) {
    this.this_0 = this_0;
  }
  ModalBaseFieldBuilder__registerMoreFieldButton_closure.builtin$cls = "ModalBaseFieldBuilder__registerMoreFieldButton_closure";
  if (!"name" in ModalBaseFieldBuilder__registerMoreFieldButton_closure)
    ModalBaseFieldBuilder__registerMoreFieldButton_closure.name = "ModalBaseFieldBuilder__registerMoreFieldButton_closure";
  $desc = $collectedClasses.ModalBaseFieldBuilder__registerMoreFieldButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModalBaseFieldBuilder__registerMoreFieldButton_closure.prototype = $desc;
  function ModalBaseFieldBuilder__registerMoreSubFieldButton_closure(this_0, subFieldRow_1) {
    this.this_0 = this_0;
    this.subFieldRow_1 = subFieldRow_1;
  }
  ModalBaseFieldBuilder__registerMoreSubFieldButton_closure.builtin$cls = "ModalBaseFieldBuilder__registerMoreSubFieldButton_closure";
  if (!"name" in ModalBaseFieldBuilder__registerMoreSubFieldButton_closure)
    ModalBaseFieldBuilder__registerMoreSubFieldButton_closure.name = "ModalBaseFieldBuilder__registerMoreSubFieldButton_closure";
  $desc = $collectedClasses.ModalBaseFieldBuilder__registerMoreSubFieldButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModalBaseFieldBuilder__registerMoreSubFieldButton_closure.prototype = $desc;
  function Preferences(grid, relationshipNameInLogicalDiagram) {
    this.grid = grid;
    this.relationshipNameInLogicalDiagram = relationshipNameInLogicalDiagram;
  }
  Preferences.builtin$cls = "Preferences";
  if (!"name" in Preferences)
    Preferences.name = "Preferences";
  $desc = $collectedClasses.Preferences;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Preferences.prototype = $desc;
  function PreferencesController(canvas, preferences, controllerFactory) {
    this.canvas = canvas;
    this.preferences = preferences;
    this.controllerFactory = controllerFactory;
  }
  PreferencesController.builtin$cls = "PreferencesController";
  if (!"name" in PreferencesController)
    PreferencesController.name = "PreferencesController";
  $desc = $collectedClasses.PreferencesController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreferencesController.prototype = $desc;
  function PreferencesController__createCanvasToImageHandler_closure(this_0) {
    this.this_0 = this_0;
  }
  PreferencesController__createCanvasToImageHandler_closure.builtin$cls = "PreferencesController__createCanvasToImageHandler_closure";
  if (!"name" in PreferencesController__createCanvasToImageHandler_closure)
    PreferencesController__createCanvasToImageHandler_closure.name = "PreferencesController__createCanvasToImageHandler_closure";
  $desc = $collectedClasses.PreferencesController__createCanvasToImageHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreferencesController__createCanvasToImageHandler_closure.prototype = $desc;
  function PreferencesModal(preferencesController, preferences, grid, relationshipNameLogicalInputelement, _modalId, _submitListener, _submited, type) {
    this.preferencesController = preferencesController;
    this.preferences = preferences;
    this.grid = grid;
    this.relationshipNameLogicalInputelement = relationshipNameLogicalInputelement;
    this._modalId = _modalId;
    this._submitListener = _submitListener;
    this._submited = _submited;
    this.type = type;
  }
  PreferencesModal.builtin$cls = "PreferencesModal";
  if (!"name" in PreferencesModal)
    PreferencesModal.name = "PreferencesModal";
  $desc = $collectedClasses.PreferencesModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreferencesModal.prototype = $desc;
  function PreferencesModal__handleSubmit_closure(this_0) {
    this.this_0 = this_0;
  }
  PreferencesModal__handleSubmit_closure.builtin$cls = "PreferencesModal__handleSubmit_closure";
  if (!"name" in PreferencesModal__handleSubmit_closure)
    PreferencesModal__handleSubmit_closure.name = "PreferencesModal__handleSubmit_closure";
  $desc = $collectedClasses.PreferencesModal__handleSubmit_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreferencesModal__handleSubmit_closure.prototype = $desc;
  function ConceptualModalRelationshipFieldBuilder(tableBody, baseField, rng, moreFieldRowsBtnId) {
    this.tableBody = tableBody;
    this.baseField = baseField;
    this.rng = rng;
    this.moreFieldRowsBtnId = moreFieldRowsBtnId;
  }
  ConceptualModalRelationshipFieldBuilder.builtin$cls = "ConceptualModalRelationshipFieldBuilder";
  if (!"name" in ConceptualModalRelationshipFieldBuilder)
    ConceptualModalRelationshipFieldBuilder.name = "ConceptualModalRelationshipFieldBuilder";
  $desc = $collectedClasses.ConceptualModalRelationshipFieldBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualModalRelationshipFieldBuilder.prototype = $desc;
  function ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure(this_0, relationshipFieldRow_1, tableBody_2, compositeInput_3) {
    this.this_0 = this_0;
    this.relationshipFieldRow_1 = relationshipFieldRow_1;
    this.tableBody_2 = tableBody_2;
    this.compositeInput_3 = compositeInput_3;
  }
  ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure.builtin$cls = "ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure";
  if (!"name" in ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure)
    ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure.name = "ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure";
  $desc = $collectedClasses.ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure.prototype = $desc;
  function ConceptualRelationshipModal(tableBody, oldRelationship, relationship, relationshipController, _canceled, modelingType, _modalId, _submitListener, _submited, type) {
    this.tableBody = tableBody;
    this.oldRelationship = oldRelationship;
    this.relationship = relationship;
    this.relationshipController = relationshipController;
    this._canceled = _canceled;
    this.modelingType = modelingType;
    this._modalId = _modalId;
    this._submitListener = _submitListener;
    this._submited = _submited;
    this.type = type;
  }
  ConceptualRelationshipModal.builtin$cls = "ConceptualRelationshipModal";
  if (!"name" in ConceptualRelationshipModal)
    ConceptualRelationshipModal.name = "ConceptualRelationshipModal";
  $desc = $collectedClasses.ConceptualRelationshipModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualRelationshipModal.prototype = $desc;
  function ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure(relationshipParentCardinality_0, relationshipTernaryParentCardinality_1) {
    this.relationshipParentCardinality_0 = relationshipParentCardinality_0;
    this.relationshipTernaryParentCardinality_1 = relationshipTernaryParentCardinality_1;
  }
  ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure.builtin$cls = "ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure";
  if (!"name" in ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure)
    ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure.name = "ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure";
  $desc = $collectedClasses.ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure.prototype = $desc;
  function LogicalRelationshipModal(nameInput, dataTypeInput, nullAllowedInput, cardinalityInput, parentNameInput, childNameInput, nullAllowedGroup, cardinalityGroup, relationship, relationshipController, _canceled, modelingType, _modalId, _submitListener, _submited, type) {
    this.nameInput = nameInput;
    this.dataTypeInput = dataTypeInput;
    this.nullAllowedInput = nullAllowedInput;
    this.cardinalityInput = cardinalityInput;
    this.parentNameInput = parentNameInput;
    this.childNameInput = childNameInput;
    this.nullAllowedGroup = nullAllowedGroup;
    this.cardinalityGroup = cardinalityGroup;
    this.relationship = relationship;
    this.relationshipController = relationshipController;
    this._canceled = _canceled;
    this.modelingType = modelingType;
    this._modalId = _modalId;
    this._submitListener = _submitListener;
    this._submited = _submited;
    this.type = type;
  }
  LogicalRelationshipModal.builtin$cls = "LogicalRelationshipModal";
  if (!"name" in LogicalRelationshipModal)
    LogicalRelationshipModal.name = "LogicalRelationshipModal";
  $desc = $collectedClasses.LogicalRelationshipModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalRelationshipModal.prototype = $desc;
  function RelationshipModal(relationship) {
    this.relationship = relationship;
  }
  RelationshipModal.builtin$cls = "RelationshipModal";
  if (!"name" in RelationshipModal)
    RelationshipModal.name = "RelationshipModal";
  $desc = $collectedClasses.RelationshipModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipModal.prototype = $desc;
  RelationshipModal.prototype.get$relationship = function() {
    return this.relationship;
  };
  function RelationshipModal__handleSubmit_closure(this_0) {
    this.this_0 = this_0;
  }
  RelationshipModal__handleSubmit_closure.builtin$cls = "RelationshipModal__handleSubmit_closure";
  if (!"name" in RelationshipModal__handleSubmit_closure)
    RelationshipModal__handleSubmit_closure.name = "RelationshipModal__handleSubmit_closure";
  $desc = $collectedClasses.RelationshipModal__handleSubmit_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipModal__handleSubmit_closure.prototype = $desc;
  function RelationshipModalFactory(logicalViews, conceptualViews) {
    this.logicalViews = logicalViews;
    this.conceptualViews = conceptualViews;
  }
  RelationshipModalFactory.builtin$cls = "RelationshipModalFactory";
  if (!"name" in RelationshipModalFactory)
    RelationshipModalFactory.name = "RelationshipModalFactory";
  $desc = $collectedClasses.RelationshipModalFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipModalFactory.prototype = $desc;
  function Relationship(parentTable, childTable, ternaryTable, dataType, name, nullAllowed, parentCardinality, childCardinality, ternaryCardinality, parentRole, childRole, identifying, ternaryConnection, relationshipFields, nameDiamond, nameDiamondMiddlePoint, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.parentTable = parentTable;
    this.childTable = childTable;
    this.ternaryTable = ternaryTable;
    this.dataType = dataType;
    this.name = name;
    this.nullAllowed = nullAllowed;
    this.parentCardinality = parentCardinality;
    this.childCardinality = childCardinality;
    this.ternaryCardinality = ternaryCardinality;
    this.parentRole = parentRole;
    this.childRole = childRole;
    this.identifying = identifying;
    this.ternaryConnection = ternaryConnection;
    this.relationshipFields = relationshipFields;
    this.nameDiamond = nameDiamond;
    this.nameDiamondMiddlePoint = nameDiamondMiddlePoint;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  Relationship.builtin$cls = "Relationship";
  if (!"name" in Relationship)
    Relationship.name = "Relationship";
  $desc = $collectedClasses.Relationship;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Relationship.prototype = $desc;
  Relationship.prototype.get$parentTable = function() {
    return this.parentTable;
  };
  Relationship.prototype.set$parentTable = function(v) {
    return this.parentTable = v;
  };
  Relationship.prototype.get$childTable = function() {
    return this.childTable;
  };
  Relationship.prototype.set$childTable = function(v) {
    return this.childTable = v;
  };
  Relationship.prototype.get$ternaryTable = function() {
    return this.ternaryTable;
  };
  Relationship.prototype.set$ternaryTable = function(v) {
    return this.ternaryTable = v;
  };
  Relationship.prototype.get$dataType = function() {
    return this.dataType;
  };
  Relationship.prototype.set$dataType = function(v) {
    return this.dataType = v;
  };
  Relationship.prototype.get$name = function(receiver) {
    return this.name;
  };
  Relationship.prototype.set$name = function(receiver, v) {
    return this.name = v;
  };
  Relationship.prototype.get$nullAllowed = function() {
    return this.nullAllowed;
  };
  Relationship.prototype.set$nullAllowed = function(v) {
    return this.nullAllowed = v;
  };
  Relationship.prototype.get$parentCardinality = function() {
    return this.parentCardinality;
  };
  Relationship.prototype.set$parentCardinality = function(v) {
    return this.parentCardinality = v;
  };
  Relationship.prototype.get$childCardinality = function() {
    return this.childCardinality;
  };
  Relationship.prototype.set$childCardinality = function(v) {
    return this.childCardinality = v;
  };
  Relationship.prototype.get$ternaryCardinality = function() {
    return this.ternaryCardinality;
  };
  Relationship.prototype.set$ternaryCardinality = function(v) {
    return this.ternaryCardinality = v;
  };
  Relationship.prototype.get$parentRole = function() {
    return this.parentRole;
  };
  Relationship.prototype.set$parentRole = function(v) {
    return this.parentRole = v;
  };
  Relationship.prototype.get$childRole = function() {
    return this.childRole;
  };
  Relationship.prototype.set$childRole = function(v) {
    return this.childRole = v;
  };
  Relationship.prototype.get$identifying = function() {
    return this.identifying;
  };
  Relationship.prototype.set$identifying = function(v) {
    return this.identifying = v;
  };
  Relationship.prototype.get$ternaryConnection = function() {
    return this.ternaryConnection;
  };
  Relationship.prototype.set$ternaryConnection = function(v) {
    return this.ternaryConnection = v;
  };
  Relationship.prototype.get$relationshipFields = function() {
    return this.relationshipFields;
  };
  Relationship.prototype.get$nameDiamond = function() {
    return this.nameDiamond;
  };
  Relationship.prototype.get$nameDiamondMiddlePoint = function() {
    return this.nameDiamondMiddlePoint;
  };
  function RelationshipController(ctx, relationshipViews, relationshipViewFactory, relationshipDefinition, tableController, preferencesController, _HTTPRequestController, diagramController, relationshipModalFactory, relationshipModal, oldRelationship, borderInteractionController, controllerFactory) {
    this.ctx = ctx;
    this.relationshipViews = relationshipViews;
    this.relationshipViewFactory = relationshipViewFactory;
    this.relationshipDefinition = relationshipDefinition;
    this.tableController = tableController;
    this.preferencesController = preferencesController;
    this._HTTPRequestController = _HTTPRequestController;
    this.diagramController = diagramController;
    this.relationshipModalFactory = relationshipModalFactory;
    this.relationshipModal = relationshipModal;
    this.oldRelationship = oldRelationship;
    this.borderInteractionController = borderInteractionController;
    this.controllerFactory = controllerFactory;
  }
  RelationshipController.builtin$cls = "RelationshipController";
  if (!"name" in RelationshipController)
    RelationshipController.name = "RelationshipController";
  $desc = $collectedClasses.RelationshipController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipController.prototype = $desc;
  RelationshipController.prototype.get$tableController = function() {
    return this.tableController;
  };
  function RelationshipController_validate_closure(relationshipModal_0, req_1) {
    this.relationshipModal_0 = relationshipModal_0;
    this.req_1 = req_1;
  }
  RelationshipController_validate_closure.builtin$cls = "RelationshipController_validate_closure";
  if (!"name" in RelationshipController_validate_closure)
    RelationshipController_validate_closure.name = "RelationshipController_validate_closure";
  $desc = $collectedClasses.RelationshipController_validate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipController_validate_closure.prototype = $desc;
  function RelationshipController_createRelationship_closure(this_0, relationship_1, req_2) {
    this.this_0 = this_0;
    this.relationship_1 = relationship_1;
    this.req_2 = req_2;
  }
  RelationshipController_createRelationship_closure.builtin$cls = "RelationshipController_createRelationship_closure";
  if (!"name" in RelationshipController_createRelationship_closure)
    RelationshipController_createRelationship_closure.name = "RelationshipController_createRelationship_closure";
  $desc = $collectedClasses.RelationshipController_createRelationship_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipController_createRelationship_closure.prototype = $desc;
  function RelationshipController_updateRelationship_closure(this_0, relationship_1, req_2) {
    this.this_0 = this_0;
    this.relationship_1 = relationship_1;
    this.req_2 = req_2;
  }
  RelationshipController_updateRelationship_closure.builtin$cls = "RelationshipController_updateRelationship_closure";
  if (!"name" in RelationshipController_updateRelationship_closure)
    RelationshipController_updateRelationship_closure.name = "RelationshipController_updateRelationship_closure";
  $desc = $collectedClasses.RelationshipController_updateRelationship_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipController_updateRelationship_closure.prototype = $desc;
  function RelationshipController_deleteRelationship_closure(this_0, relationship_1, req_2) {
    this.this_0 = this_0;
    this.relationship_1 = relationship_1;
    this.req_2 = req_2;
  }
  RelationshipController_deleteRelationship_closure.builtin$cls = "RelationshipController_deleteRelationship_closure";
  if (!"name" in RelationshipController_deleteRelationship_closure)
    RelationshipController_deleteRelationship_closure.name = "RelationshipController_deleteRelationship_closure";
  $desc = $collectedClasses.RelationshipController_deleteRelationship_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipController_deleteRelationship_closure.prototype = $desc;
  function RelationshipField(name, dataType, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.name = name;
    this.dataType = dataType;
    this.primaryKey = primaryKey;
    this.foreignKey = foreignKey;
    this.nulls = nulls;
    this.composite = composite;
    this.multivalued = multivalued;
    this.derived = derived;
    this.baseSubFields = baseSubFields;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  RelationshipField.builtin$cls = "RelationshipField";
  if (!"name" in RelationshipField)
    RelationshipField.name = "RelationshipField";
  $desc = $collectedClasses.RelationshipField;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipField.prototype = $desc;
  function ConceptualRelationshipView(middlePoint, baseFieldGluers, nameWidth, canvasEllipseDrawer, diamondGradient, relationship, borderInteractionController, bcnParentTableAndChildTable, bcnParentTableAndRelationship, bcnChildTableAndRelationship, bcnTernaryTableAndRelationship, TOGGLE_SQUARE_SIZE, toggled, highlighted, toggledRelationshipField, ctx, relationshipLines) {
    this.middlePoint = middlePoint;
    this.baseFieldGluers = baseFieldGluers;
    this.nameWidth = nameWidth;
    this.canvasEllipseDrawer = canvasEllipseDrawer;
    this.diamondGradient = diamondGradient;
    this.relationship = relationship;
    this.borderInteractionController = borderInteractionController;
    this.bcnParentTableAndChildTable = bcnParentTableAndChildTable;
    this.bcnParentTableAndRelationship = bcnParentTableAndRelationship;
    this.bcnChildTableAndRelationship = bcnChildTableAndRelationship;
    this.bcnTernaryTableAndRelationship = bcnTernaryTableAndRelationship;
    this.TOGGLE_SQUARE_SIZE = TOGGLE_SQUARE_SIZE;
    this.toggled = toggled;
    this.highlighted = highlighted;
    this.toggledRelationshipField = toggledRelationshipField;
    this.ctx = ctx;
    this.relationshipLines = relationshipLines;
  }
  ConceptualRelationshipView.builtin$cls = "ConceptualRelationshipView";
  if (!"name" in ConceptualRelationshipView)
    ConceptualRelationshipView.name = "ConceptualRelationshipView";
  $desc = $collectedClasses.ConceptualRelationshipView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualRelationshipView.prototype = $desc;
  function LogicalRelationshipView(parentConnector, childConnector, parentBorderPoint, childBorderPoint, glueStartRelation, glueFinishRelation, relationshipNameShallBeDrawn, relationship, borderInteractionController, bcnParentTableAndChildTable, bcnParentTableAndRelationship, bcnChildTableAndRelationship, bcnTernaryTableAndRelationship, TOGGLE_SQUARE_SIZE, toggled, highlighted, toggledRelationshipField, ctx, relationshipLines) {
    this.parentConnector = parentConnector;
    this.childConnector = childConnector;
    this.parentBorderPoint = parentBorderPoint;
    this.childBorderPoint = childBorderPoint;
    this.glueStartRelation = glueStartRelation;
    this.glueFinishRelation = glueFinishRelation;
    this.relationshipNameShallBeDrawn = relationshipNameShallBeDrawn;
    this.relationship = relationship;
    this.borderInteractionController = borderInteractionController;
    this.bcnParentTableAndChildTable = bcnParentTableAndChildTable;
    this.bcnParentTableAndRelationship = bcnParentTableAndRelationship;
    this.bcnChildTableAndRelationship = bcnChildTableAndRelationship;
    this.bcnTernaryTableAndRelationship = bcnTernaryTableAndRelationship;
    this.TOGGLE_SQUARE_SIZE = TOGGLE_SQUARE_SIZE;
    this.toggled = toggled;
    this.highlighted = highlighted;
    this.toggledRelationshipField = toggledRelationshipField;
    this.ctx = ctx;
    this.relationshipLines = relationshipLines;
  }
  LogicalRelationshipView.builtin$cls = "LogicalRelationshipView";
  if (!"name" in LogicalRelationshipView)
    LogicalRelationshipView.name = "LogicalRelationshipView";
  $desc = $collectedClasses.LogicalRelationshipView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalRelationshipView.prototype = $desc;
  function RelationshipDefinitionView(startRel, endRel, ctx) {
    this.startRel = startRel;
    this.endRel = endRel;
    this.ctx = ctx;
  }
  RelationshipDefinitionView.builtin$cls = "RelationshipDefinitionView";
  if (!"name" in RelationshipDefinitionView)
    RelationshipDefinitionView.name = "RelationshipDefinitionView";
  $desc = $collectedClasses.RelationshipDefinitionView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipDefinitionView.prototype = $desc;
  function RelationshipView(relationship, borderInteractionController, bcnTernaryTableAndRelationship, toggled, highlighted, toggledRelationshipField, relationshipLines) {
    this.relationship = relationship;
    this.borderInteractionController = borderInteractionController;
    this.bcnTernaryTableAndRelationship = bcnTernaryTableAndRelationship;
    this.toggled = toggled;
    this.highlighted = highlighted;
    this.toggledRelationshipField = toggledRelationshipField;
    this.relationshipLines = relationshipLines;
  }
  RelationshipView.builtin$cls = "RelationshipView";
  if (!"name" in RelationshipView)
    RelationshipView.name = "RelationshipView";
  $desc = $collectedClasses.RelationshipView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipView.prototype = $desc;
  RelationshipView.prototype.get$relationship = function() {
    return this.relationship;
  };
  RelationshipView.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  RelationshipView.prototype.set$bcnTernaryTableAndRelationship = function(v) {
    return this.bcnTernaryTableAndRelationship = v;
  };
  RelationshipView.prototype.set$toggled = function(v) {
    return this.toggled = v;
  };
  RelationshipView.prototype.set$highlighted = function(v) {
    return this.highlighted = v;
  };
  RelationshipView.prototype.set$toggledRelationshipField = function(v) {
    return this.toggledRelationshipField = v;
  };
  RelationshipView.prototype.get$relationshipLines = function() {
    return this.relationshipLines;
  };
  function RelationshipViewFactory(relationshipViews, ctx, logicalViews, conceptualViews) {
    this.relationshipViews = relationshipViews;
    this.ctx = ctx;
    this.logicalViews = logicalViews;
    this.conceptualViews = conceptualViews;
  }
  RelationshipViewFactory.builtin$cls = "RelationshipViewFactory";
  if (!"name" in RelationshipViewFactory)
    RelationshipViewFactory.name = "RelationshipViewFactory";
  $desc = $collectedClasses.RelationshipViewFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RelationshipViewFactory.prototype = $desc;
  function Specialization(parentTable, specializedTables, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.parentTable = parentTable;
    this.specializedTables = specializedTables;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  Specialization.builtin$cls = "Specialization";
  if (!"name" in Specialization)
    Specialization.name = "Specialization";
  $desc = $collectedClasses.Specialization;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Specialization.prototype = $desc;
  Specialization.prototype.get$parentTable = function() {
    return this.parentTable;
  };
  Specialization.prototype.set$parentTable = function(v) {
    return this.parentTable = v;
  };
  Specialization.prototype.get$specializedTables = function() {
    return this.specializedTables;
  };
  function SpecializationController(specializationDefinition, ctx, specializationViews, specializationViewFactory, tableController, preferencesController, diagramController, _HTTPRequestController, borderInteractionController, controllerFactory) {
    this.specializationDefinition = specializationDefinition;
    this.ctx = ctx;
    this.specializationViews = specializationViews;
    this.specializationViewFactory = specializationViewFactory;
    this.tableController = tableController;
    this.preferencesController = preferencesController;
    this.diagramController = diagramController;
    this._HTTPRequestController = _HTTPRequestController;
    this.borderInteractionController = borderInteractionController;
    this.controllerFactory = controllerFactory;
  }
  SpecializationController.builtin$cls = "SpecializationController";
  if (!"name" in SpecializationController)
    SpecializationController.name = "SpecializationController";
  $desc = $collectedClasses.SpecializationController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationController.prototype = $desc;
  SpecializationController.prototype.get$tableController = function() {
    return this.tableController;
  };
  function SpecializationController_createSpecializationRequest_closure(this_0, specialization_1, req_2) {
    this.this_0 = this_0;
    this.specialization_1 = specialization_1;
    this.req_2 = req_2;
  }
  SpecializationController_createSpecializationRequest_closure.builtin$cls = "SpecializationController_createSpecializationRequest_closure";
  if (!"name" in SpecializationController_createSpecializationRequest_closure)
    SpecializationController_createSpecializationRequest_closure.name = "SpecializationController_createSpecializationRequest_closure";
  $desc = $collectedClasses.SpecializationController_createSpecializationRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationController_createSpecializationRequest_closure.prototype = $desc;
  function SpecializationController_updateSpecialization_closure(this_0, specialization_1, specializedTable_2, req_3) {
    this.this_0 = this_0;
    this.specialization_1 = specialization_1;
    this.specializedTable_2 = specializedTable_2;
    this.req_3 = req_3;
  }
  SpecializationController_updateSpecialization_closure.builtin$cls = "SpecializationController_updateSpecialization_closure";
  if (!"name" in SpecializationController_updateSpecialization_closure)
    SpecializationController_updateSpecialization_closure.name = "SpecializationController_updateSpecialization_closure";
  $desc = $collectedClasses.SpecializationController_updateSpecialization_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationController_updateSpecialization_closure.prototype = $desc;
  function SpecializationController_deleteSpecialization_closure(this_0, specialization_1, req_2) {
    this.this_0 = this_0;
    this.specialization_1 = specialization_1;
    this.req_2 = req_2;
  }
  SpecializationController_deleteSpecialization_closure.builtin$cls = "SpecializationController_deleteSpecialization_closure";
  if (!"name" in SpecializationController_deleteSpecialization_closure)
    SpecializationController_deleteSpecialization_closure.name = "SpecializationController_deleteSpecialization_closure";
  $desc = $collectedClasses.SpecializationController_deleteSpecialization_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationController_deleteSpecialization_closure.prototype = $desc;
  function ConceptualSpecializationView(specialization, borderInteractionController, borderConnections, specializationGradient, highlighted, ctx, toggled) {
    this.specialization = specialization;
    this.borderInteractionController = borderInteractionController;
    this.borderConnections = borderConnections;
    this.specializationGradient = specializationGradient;
    this.highlighted = highlighted;
    this.ctx = ctx;
    this.toggled = toggled;
  }
  ConceptualSpecializationView.builtin$cls = "ConceptualSpecializationView";
  if (!"name" in ConceptualSpecializationView)
    ConceptualSpecializationView.name = "ConceptualSpecializationView";
  $desc = $collectedClasses.ConceptualSpecializationView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualSpecializationView.prototype = $desc;
  function LogicalSpecializationView(specialization, borderInteractionController, borderConnections, specializationGradient, highlighted, ctx, toggled) {
    this.specialization = specialization;
    this.borderInteractionController = borderInteractionController;
    this.borderConnections = borderConnections;
    this.specializationGradient = specializationGradient;
    this.highlighted = highlighted;
    this.ctx = ctx;
    this.toggled = toggled;
  }
  LogicalSpecializationView.builtin$cls = "LogicalSpecializationView";
  if (!"name" in LogicalSpecializationView)
    LogicalSpecializationView.name = "LogicalSpecializationView";
  $desc = $collectedClasses.LogicalSpecializationView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalSpecializationView.prototype = $desc;
  function SpecializationView(specialization, borderInteractionController, highlighted) {
    this.specialization = specialization;
    this.borderInteractionController = borderInteractionController;
    this.highlighted = highlighted;
  }
  SpecializationView.builtin$cls = "SpecializationView";
  if (!"name" in SpecializationView)
    SpecializationView.name = "SpecializationView";
  $desc = $collectedClasses.SpecializationView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationView.prototype = $desc;
  SpecializationView.prototype.get$specialization = function() {
    return this.specialization;
  };
  SpecializationView.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  SpecializationView.prototype.set$highlighted = function(v) {
    return this.highlighted = v;
  };
  function SpecializationViewFactory(specializationViews, ctx, logicalViews, conceptualViews) {
    this.specializationViews = specializationViews;
    this.ctx = ctx;
    this.logicalViews = logicalViews;
    this.conceptualViews = conceptualViews;
  }
  SpecializationViewFactory.builtin$cls = "SpecializationViewFactory";
  if (!"name" in SpecializationViewFactory)
    SpecializationViewFactory.name = "SpecializationViewFactory";
  $desc = $collectedClasses.SpecializationViewFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecializationViewFactory.prototype = $desc;
  function ForeignKey(value, foreignTableId) {
    this.value = value;
    this.foreignTableId = foreignTableId;
  }
  ForeignKey.builtin$cls = "ForeignKey";
  if (!"name" in ForeignKey)
    ForeignKey.name = "ForeignKey";
  $desc = $collectedClasses.ForeignKey;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignKey.prototype = $desc;
  ForeignKey.prototype.get$value = function(receiver) {
    return this.value;
  };
  ForeignKey.prototype.set$value = function(receiver, v) {
    return this.value = v;
  };
  ForeignKey.prototype.get$foreignTableId = function() {
    return this.foreignTableId;
  };
  function ConceptualModalTableFieldBuilder(tableBody, baseField, rng, moreFieldRowsBtnId) {
    this.tableBody = tableBody;
    this.baseField = baseField;
    this.rng = rng;
    this.moreFieldRowsBtnId = moreFieldRowsBtnId;
  }
  ConceptualModalTableFieldBuilder.builtin$cls = "ConceptualModalTableFieldBuilder";
  if (!"name" in ConceptualModalTableFieldBuilder)
    ConceptualModalTableFieldBuilder.name = "ConceptualModalTableFieldBuilder";
  $desc = $collectedClasses.ConceptualModalTableFieldBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualModalTableFieldBuilder.prototype = $desc;
  function ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure(primaryKeyInput_0, nullsInput_1) {
    this.primaryKeyInput_0 = primaryKeyInput_0;
    this.nullsInput_1 = nullsInput_1;
  }
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure.builtin$cls = "ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure";
  if (!"name" in ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure)
    ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure.name = "ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure";
  $desc = $collectedClasses.ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure.prototype = $desc;
  function ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0(this_2, tableFieldRow_3, tableBody_4, compositeInput_5) {
    this.this_2 = this_2;
    this.tableFieldRow_3 = tableFieldRow_3;
    this.tableBody_4 = tableBody_4;
    this.compositeInput_5 = compositeInput_5;
  }
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0.builtin$cls = "ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0";
  if (!"name" in ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0)
    ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0.name = "ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0";
  $desc = $collectedClasses.ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0.prototype = $desc;
  function ConceptualTableModal(oldTable, table, tableController, tableElementIdName, oldTableName, tableRowTableFieldRelation, tableAndTableFieldsValidationCheck, errorMaps, coloph$TableModal$_submited, _canceled, physical, _modalId, _submitListener, _submited, type) {
    this.oldTable = oldTable;
    this.table = table;
    this.tableController = tableController;
    this.tableElementIdName = tableElementIdName;
    this.oldTableName = oldTableName;
    this.tableRowTableFieldRelation = tableRowTableFieldRelation;
    this.tableAndTableFieldsValidationCheck = tableAndTableFieldsValidationCheck;
    this.errorMaps = errorMaps;
    this.coloph$TableModal$_submited = coloph$TableModal$_submited;
    this._canceled = _canceled;
    this.physical = physical;
    this._modalId = _modalId;
    this._submitListener = _submitListener;
    this._submited = _submited;
    this.type = type;
  }
  ConceptualTableModal.builtin$cls = "ConceptualTableModal";
  if (!"name" in ConceptualTableModal)
    ConceptualTableModal.name = "ConceptualTableModal";
  $desc = $collectedClasses.ConceptualTableModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualTableModal.prototype = $desc;
  function LogicalModalTableFieldBuilder(physical, tableBody, baseField, rng, moreFieldRowsBtnId) {
    this.physical = physical;
    this.tableBody = tableBody;
    this.baseField = baseField;
    this.rng = rng;
    this.moreFieldRowsBtnId = moreFieldRowsBtnId;
  }
  LogicalModalTableFieldBuilder.builtin$cls = "LogicalModalTableFieldBuilder";
  if (!"name" in LogicalModalTableFieldBuilder)
    LogicalModalTableFieldBuilder.name = "LogicalModalTableFieldBuilder";
  $desc = $collectedClasses.LogicalModalTableFieldBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalModalTableFieldBuilder.prototype = $desc;
  function LogicalModalTableFieldBuilder_buildBaseFieldRow_closure(primaryKeyInput_0, nullsInput_1) {
    this.primaryKeyInput_0 = primaryKeyInput_0;
    this.nullsInput_1 = nullsInput_1;
  }
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure.builtin$cls = "LogicalModalTableFieldBuilder_buildBaseFieldRow_closure";
  if (!"name" in LogicalModalTableFieldBuilder_buildBaseFieldRow_closure)
    LogicalModalTableFieldBuilder_buildBaseFieldRow_closure.name = "LogicalModalTableFieldBuilder_buildBaseFieldRow_closure";
  $desc = $collectedClasses.LogicalModalTableFieldBuilder_buildBaseFieldRow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure.prototype = $desc;
  function LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0(this_2, primaryKeyInput_3, nullsInput_4) {
    this.this_2 = this_2;
    this.primaryKeyInput_3 = primaryKeyInput_3;
    this.nullsInput_4 = nullsInput_4;
  }
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0.builtin$cls = "LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0";
  if (!"name" in LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0)
    LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0.name = "LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0";
  $desc = $collectedClasses.LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0.prototype = $desc;
  function LogicalTableModal(oldTable, table, tableController, tableElementIdName, oldTableName, tableRowTableFieldRelation, tableAndTableFieldsValidationCheck, errorMaps, coloph$TableModal$_submited, _canceled, physical, _modalId, _submitListener, _submited, type) {
    this.oldTable = oldTable;
    this.table = table;
    this.tableController = tableController;
    this.tableElementIdName = tableElementIdName;
    this.oldTableName = oldTableName;
    this.tableRowTableFieldRelation = tableRowTableFieldRelation;
    this.tableAndTableFieldsValidationCheck = tableAndTableFieldsValidationCheck;
    this.errorMaps = errorMaps;
    this.coloph$TableModal$_submited = coloph$TableModal$_submited;
    this._canceled = _canceled;
    this.physical = physical;
    this._modalId = _modalId;
    this._submitListener = _submitListener;
    this._submited = _submited;
    this.type = type;
  }
  LogicalTableModal.builtin$cls = "LogicalTableModal";
  if (!"name" in LogicalTableModal)
    LogicalTableModal.name = "LogicalTableModal";
  $desc = $collectedClasses.LogicalTableModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalTableModal.prototype = $desc;
  function TableModal(table, tableController) {
    this.table = table;
    this.tableController = tableController;
  }
  TableModal.builtin$cls = "TableModal";
  if (!"name" in TableModal)
    TableModal.name = "TableModal";
  $desc = $collectedClasses.TableModal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableModal.prototype = $desc;
  TableModal.prototype.get$table = function(receiver) {
    return this.table;
  };
  TableModal.prototype.get$tableController = function() {
    return this.tableController;
  };
  function TableModal__handleSubmit_closure(this_0) {
    this.this_0 = this_0;
  }
  TableModal__handleSubmit_closure.builtin$cls = "TableModal__handleSubmit_closure";
  if (!"name" in TableModal__handleSubmit_closure)
    TableModal__handleSubmit_closure.name = "TableModal__handleSubmit_closure";
  $desc = $collectedClasses.TableModal__handleSubmit_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableModal__handleSubmit_closure.prototype = $desc;
  function TableModalFactory(logicalViews, conceptualViews) {
    this.logicalViews = logicalViews;
    this.conceptualViews = conceptualViews;
  }
  TableModalFactory.builtin$cls = "TableModalFactory";
  if (!"name" in TableModalFactory)
    TableModalFactory.name = "TableModalFactory";
  $desc = $collectedClasses.TableModalFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableModalFactory.prototype = $desc;
  function Table(tableFields, name, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.tableFields = tableFields;
    this.name = name;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  Table.builtin$cls = "Table";
  if (!"name" in Table)
    Table.name = "Table";
  $desc = $collectedClasses.Table;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Table.prototype = $desc;
  Table.prototype.get$tableFields = function() {
    return this.tableFields;
  };
  Table.prototype.get$name = function(receiver) {
    return this.name;
  };
  Table.prototype.set$name = function(receiver, v) {
    return this.name = v;
  };
  function TableController(ctx, tableViews, tableViewFactory, relationshipController, canvasActionsController, commandController, preferencesController, specializationController, _HTTPRequestController, diagramController, tableModalFactory, tableModal, borderInteractionController, controllerFactory) {
    this.ctx = ctx;
    this.tableViews = tableViews;
    this.tableViewFactory = tableViewFactory;
    this.relationshipController = relationshipController;
    this.canvasActionsController = canvasActionsController;
    this.commandController = commandController;
    this.preferencesController = preferencesController;
    this.specializationController = specializationController;
    this._HTTPRequestController = _HTTPRequestController;
    this.diagramController = diagramController;
    this.tableModalFactory = tableModalFactory;
    this.tableModal = tableModal;
    this.borderInteractionController = borderInteractionController;
    this.controllerFactory = controllerFactory;
  }
  TableController.builtin$cls = "TableController";
  if (!"name" in TableController)
    TableController.name = "TableController";
  $desc = $collectedClasses.TableController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableController.prototype = $desc;
  function TableController_validate_closure(table_0, tableModal_1, req_2) {
    this.table_0 = table_0;
    this.tableModal_1 = tableModal_1;
    this.req_2 = req_2;
  }
  TableController_validate_closure.builtin$cls = "TableController_validate_closure";
  if (!"name" in TableController_validate_closure)
    TableController_validate_closure.name = "TableController_validate_closure";
  $desc = $collectedClasses.TableController_validate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableController_validate_closure.prototype = $desc;
  function TableController_createTableRequest_closure(this_0, table_1, userCreated_2, req_3) {
    this.this_0 = this_0;
    this.table_1 = table_1;
    this.userCreated_2 = userCreated_2;
    this.req_3 = req_3;
  }
  TableController_createTableRequest_closure.builtin$cls = "TableController_createTableRequest_closure";
  if (!"name" in TableController_createTableRequest_closure)
    TableController_createTableRequest_closure.name = "TableController_createTableRequest_closure";
  $desc = $collectedClasses.TableController_createTableRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableController_createTableRequest_closure.prototype = $desc;
  function TableController_updateTableRequest_closure(this_0, originalTable_1, table_2, req_3) {
    this.this_0 = this_0;
    this.originalTable_1 = originalTable_1;
    this.table_2 = table_2;
    this.req_3 = req_3;
  }
  TableController_updateTableRequest_closure.builtin$cls = "TableController_updateTableRequest_closure";
  if (!"name" in TableController_updateTableRequest_closure)
    TableController_updateTableRequest_closure.name = "TableController_updateTableRequest_closure";
  $desc = $collectedClasses.TableController_updateTableRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableController_updateTableRequest_closure.prototype = $desc;
  function TableController_deleteTable_closure(this_0, table_1, req_2) {
    this.this_0 = this_0;
    this.table_1 = table_1;
    this.req_2 = req_2;
  }
  TableController_deleteTable_closure.builtin$cls = "TableController_deleteTable_closure";
  if (!"name" in TableController_deleteTable_closure)
    TableController_deleteTable_closure.name = "TableController_deleteTable_closure";
  $desc = $collectedClasses.TableController_deleteTable_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableController_deleteTable_closure.prototype = $desc;
  function TableField(name, dataType, primaryKey, foreignKey, nulls, composite, multivalued, derived, baseSubFields, diagramId, x, y, width, height, centralBorderPoints, borderUtilization, borderConnectionPoints, id) {
    this.name = name;
    this.dataType = dataType;
    this.primaryKey = primaryKey;
    this.foreignKey = foreignKey;
    this.nulls = nulls;
    this.composite = composite;
    this.multivalued = multivalued;
    this.derived = derived;
    this.baseSubFields = baseSubFields;
    this.diagramId = diagramId;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.centralBorderPoints = centralBorderPoints;
    this.borderUtilization = borderUtilization;
    this.borderConnectionPoints = borderConnectionPoints;
    this.id = id;
  }
  TableField.builtin$cls = "TableField";
  if (!"name" in TableField)
    TableField.name = "TableField";
  $desc = $collectedClasses.TableField;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableField.prototype = $desc;
  function ConceptualTableView(coloph$ConceptualTableView$table, baseFieldGluers, canvasEllipseDrawer, borderInteractionController, physical, table, highlighted, _largestNameSize, _borderSize, tableNameGradient, toggledTableField, tableController, TOGGLE_SQUARE_SIZE, TABLE_HEADER_LINE, SPACE_BETWEEN_FIELDS, TABLE_HEADER_CONSIDERATION, TABLE_HEADER_SIZE, SPACE_AFTER_SEPARATION_LINE, ctx, toggled) {
    this.coloph$ConceptualTableView$table = coloph$ConceptualTableView$table;
    this.baseFieldGluers = baseFieldGluers;
    this.canvasEllipseDrawer = canvasEllipseDrawer;
    this.borderInteractionController = borderInteractionController;
    this.physical = physical;
    this.table = table;
    this.highlighted = highlighted;
    this._largestNameSize = _largestNameSize;
    this._borderSize = _borderSize;
    this.tableNameGradient = tableNameGradient;
    this.toggledTableField = toggledTableField;
    this.tableController = tableController;
    this.TOGGLE_SQUARE_SIZE = TOGGLE_SQUARE_SIZE;
    this.TABLE_HEADER_LINE = TABLE_HEADER_LINE;
    this.SPACE_BETWEEN_FIELDS = SPACE_BETWEEN_FIELDS;
    this.TABLE_HEADER_CONSIDERATION = TABLE_HEADER_CONSIDERATION;
    this.TABLE_HEADER_SIZE = TABLE_HEADER_SIZE;
    this.SPACE_AFTER_SEPARATION_LINE = SPACE_AFTER_SEPARATION_LINE;
    this.ctx = ctx;
    this.toggled = toggled;
  }
  ConceptualTableView.builtin$cls = "ConceptualTableView";
  if (!"name" in ConceptualTableView)
    ConceptualTableView.name = "ConceptualTableView";
  $desc = $collectedClasses.ConceptualTableView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConceptualTableView.prototype = $desc;
  ConceptualTableView.prototype.get$table = function(receiver) {
    return this.coloph$ConceptualTableView$table;
  };
  ConceptualTableView.prototype.set$table = function(receiver, v) {
    return this.coloph$ConceptualTableView$table = v;
  };
  function LogicalTableView(onlyPrimaryKeys, noPrimaryKeys, _tableFieldShifter, blankPrimaryKeyTableField, blankNormalTableField, borderInteractionController, physical, table, highlighted, _largestNameSize, _borderSize, tableNameGradient, toggledTableField, tableController, TOGGLE_SQUARE_SIZE, TABLE_HEADER_LINE, SPACE_BETWEEN_FIELDS, TABLE_HEADER_CONSIDERATION, TABLE_HEADER_SIZE, SPACE_AFTER_SEPARATION_LINE, ctx, toggled) {
    this.onlyPrimaryKeys = onlyPrimaryKeys;
    this.noPrimaryKeys = noPrimaryKeys;
    this._tableFieldShifter = _tableFieldShifter;
    this.blankPrimaryKeyTableField = blankPrimaryKeyTableField;
    this.blankNormalTableField = blankNormalTableField;
    this.borderInteractionController = borderInteractionController;
    this.physical = physical;
    this.table = table;
    this.highlighted = highlighted;
    this._largestNameSize = _largestNameSize;
    this._borderSize = _borderSize;
    this.tableNameGradient = tableNameGradient;
    this.toggledTableField = toggledTableField;
    this.tableController = tableController;
    this.TOGGLE_SQUARE_SIZE = TOGGLE_SQUARE_SIZE;
    this.TABLE_HEADER_LINE = TABLE_HEADER_LINE;
    this.SPACE_BETWEEN_FIELDS = SPACE_BETWEEN_FIELDS;
    this.TABLE_HEADER_CONSIDERATION = TABLE_HEADER_CONSIDERATION;
    this.TABLE_HEADER_SIZE = TABLE_HEADER_SIZE;
    this.SPACE_AFTER_SEPARATION_LINE = SPACE_AFTER_SEPARATION_LINE;
    this.ctx = ctx;
    this.toggled = toggled;
  }
  LogicalTableView.builtin$cls = "LogicalTableView";
  if (!"name" in LogicalTableView)
    LogicalTableView.name = "LogicalTableView";
  $desc = $collectedClasses.LogicalTableView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogicalTableView.prototype = $desc;
  function TableView(borderInteractionController, table, highlighted, toggledTableField, tableController) {
    this.borderInteractionController = borderInteractionController;
    this.table = table;
    this.highlighted = highlighted;
    this.toggledTableField = toggledTableField;
    this.tableController = tableController;
  }
  TableView.builtin$cls = "TableView";
  if (!"name" in TableView)
    TableView.name = "TableView";
  $desc = $collectedClasses.TableView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableView.prototype = $desc;
  TableView.prototype.get$borderInteractionController = function() {
    return this.borderInteractionController;
  };
  TableView.prototype.get$table = function(receiver) {
    return this.table;
  };
  TableView.prototype.set$table = function(receiver, v) {
    return this.table = v;
  };
  TableView.prototype.set$highlighted = function(v) {
    return this.highlighted = v;
  };
  TableView.prototype.set$toggledTableField = function(v) {
    return this.toggledTableField = v;
  };
  TableView.prototype.get$tableController = function() {
    return this.tableController;
  };
  function TableViewFactory(tableViews, ctx, logicalViews, conceptualViews) {
    this.tableViews = tableViews;
    this.ctx = ctx;
    this.logicalViews = logicalViews;
    this.conceptualViews = conceptualViews;
  }
  TableViewFactory.builtin$cls = "TableViewFactory";
  if (!"name" in TableViewFactory)
    TableViewFactory.name = "TableViewFactory";
  $desc = $collectedClasses.TableViewFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableViewFactory.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  SkipIterable.builtin$cls = "SkipIterable";
  if (!"name" in SkipIterable)
    SkipIterable.name = "SkipIterable";
  $desc = $collectedClasses.SkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterable.prototype = $desc;
  function EfficientLengthSkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
  if (!"name" in EfficientLengthSkipIterable)
    EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
  $desc = $collectedClasses.EfficientLengthSkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthSkipIterable.prototype = $desc;
  function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  }
  SkipIterator.builtin$cls = "SkipIterator";
  if (!"name" in SkipIterator)
    SkipIterator.name = "SkipIterator";
  $desc = $collectedClasses.SkipIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function Symbol0(_name) {
    this._name = _name;
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol0.prototype = $desc;
  Symbol0.prototype.get$_name = function() {
    return this._name;
  };
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_controller) {
    this._controller = _controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_eventState = function() {
    return this._eventState;
  };
  _BroadcastSubscription.prototype.set$_eventState = function(v) {
    return this._eventState = v;
  };
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _BroadcastStreamController(_async$_next, _async$_previous) {
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  function _Future__asyncComplete_closure0(this_0, coreFuture_1) {
    this.this_0 = this_0;
    this.coreFuture_1 = coreFuture_1;
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__propagateToListeners_handleValueCallback(box_1, listener_3, sourceValue_4, zone_5) {
    this.box_1 = box_1;
    this.listener_3 = listener_3;
    this.sourceValue_4 = sourceValue_4;
    this.zone_5 = zone_5;
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  function _Future__propagateToListeners_handleError(box_2, box_1, listener_6, zone_7) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.listener_6 = listener_6;
    this.zone_7 = zone_7;
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback(box_2, box_1, hasError_8, listener_9, zone_10) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_8 = hasError_8;
    this.listener_9 = listener_9;
    this.zone_10 = zone_10;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(box_2, listener_11) {
    this.box_2 = box_2;
    this.listener_11 = listener_11;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(box_0, listener_12) {
    this.box_0 = box_0;
    this.listener_12 = listener_12;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.prototype.get$next = function() {
    return this.next;
  };
  _AsyncCallbackEntry.prototype.set$next = function(v) {
    return this.next = v;
  };
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function StreamController() {
  }
  StreamController.builtin$cls = "StreamController";
  if (!"name" in StreamController)
    StreamController.name = "StreamController";
  $desc = $collectedClasses.StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamController.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbacks() {
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbacks.prototype = $desc;
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _ControllerStream(_controller) {
    this._controller = _controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_controller = function() {
    return this._controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _EventDispatch() {
  }
  _EventDispatch.builtin$cls = "_EventDispatch";
  if (!"name" in _EventDispatch)
    _EventDispatch.name = "_EventDispatch";
  $desc = $collectedClasses._EventDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventDispatch.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _SkipStream(_remaining, _async$_source) {
    this._remaining = _remaining;
    this._async$_source = _async$_source;
  }
  _SkipStream.builtin$cls = "_SkipStream";
  if (!"name" in _SkipStream)
    _SkipStream.name = "_SkipStream";
  $desc = $collectedClasses._SkipStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SkipStream.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function ZoneDelegate() {
  }
  ZoneDelegate.builtin$cls = "ZoneDelegate";
  if (!"name" in ZoneDelegate)
    ZoneDelegate.name = "ZoneDelegate";
  $desc = $collectedClasses.ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneDelegate.prototype = $desc;
  function Zone() {
  }
  Zone.builtin$cls = "Zone";
  if (!"name" in Zone)
    Zone.name = "Zone";
  $desc = $collectedClasses.Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Zone.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function _IdentityHashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _IdentityHashMap.builtin$cls = "_IdentityHashMap";
  if (!"name" in _IdentityHashMap)
    _IdentityHashMap.name = "_IdentityHashMap";
  $desc = $collectedClasses._IdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashMap.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function HashMap() {
  }
  HashMap.builtin$cls = "HashMap";
  if (!"name" in HashMap)
    HashMap.name = "HashMap";
  $desc = $collectedClasses.HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMap.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function HashSet() {
  }
  HashSet.builtin$cls = "HashSet";
  if (!"name" in HashSet)
    HashSet.name = "HashSet";
  $desc = $collectedClasses.HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSet.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function LinkedHashMap() {
  }
  LinkedHashMap.builtin$cls = "LinkedHashMap";
  if (!"name" in LinkedHashMap)
    LinkedHashMap.name = "LinkedHashMap";
  $desc = $collectedClasses.LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMap.prototype = $desc;
  function LinkedHashSet() {
  }
  LinkedHashSet.builtin$cls = "LinkedHashSet";
  if (!"name" in LinkedHashSet)
    LinkedHashSet.name = "LinkedHashSet";
  $desc = $collectedClasses.LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSet.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function _convertJsonToDart_closure() {
  }
  _convertJsonToDart_closure.builtin$cls = "_convertJsonToDart_closure";
  if (!"name" in _convertJsonToDart_closure)
    _convertJsonToDart_closure.name = "_convertJsonToDart_closure";
  $desc = $collectedClasses._convertJsonToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_closure.prototype = $desc;
  function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  }
  _convertJsonToDart_walk.builtin$cls = "_convertJsonToDart_walk";
  if (!"name" in _convertJsonToDart_walk)
    _convertJsonToDart_walk.name = "_convertJsonToDart_walk";
  $desc = $collectedClasses._convertJsonToDart_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_walk.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  }
  JsonUnsupportedObjectError.builtin$cls = "JsonUnsupportedObjectError";
  if (!"name" in JsonUnsupportedObjectError)
    JsonUnsupportedObjectError.name = "JsonUnsupportedObjectError";
  $desc = $collectedClasses.JsonUnsupportedObjectError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonUnsupportedObjectError.prototype = $desc;
  function JsonCyclicError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  }
  JsonCyclicError.builtin$cls = "JsonCyclicError";
  if (!"name" in JsonCyclicError)
    JsonCyclicError.name = "JsonCyclicError";
  $desc = $collectedClasses.JsonCyclicError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCyclicError.prototype = $desc;
  function JsonCodec(_reviver, _toEncodable) {
    this._reviver = _reviver;
    this._toEncodable = _toEncodable;
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonEncoder(_toEncodableFunction) {
    this._toEncodableFunction = _toEncodableFunction;
  }
  JsonEncoder.builtin$cls = "JsonEncoder";
  if (!"name" in JsonEncoder)
    JsonEncoder.name = "JsonEncoder";
  $desc = $collectedClasses.JsonEncoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonEncoder.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function _JsonStringifier(_toEncodable, _sink, _seen) {
    this._toEncodable = _toEncodable;
    this._sink = _sink;
    this._seen = _seen;
  }
  _JsonStringifier.builtin$cls = "_JsonStringifier";
  if (!"name" in _JsonStringifier)
    _JsonStringifier.name = "_JsonStringifier";
  $desc = $collectedClasses._JsonStringifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonStringifier.prototype = $desc;
  function Function__toMangledNames_closure(result_0) {
    this.result_0 = result_0;
  }
  Function__toMangledNames_closure.builtin$cls = "Function__toMangledNames_closure";
  if (!"name" in Function__toMangledNames_closure)
    Function__toMangledNames_closure.name = "Function__toMangledNames_closure";
  $desc = $collectedClasses.Function__toMangledNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function__toMangledNames_closure.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function OutOfMemoryError() {
  }
  OutOfMemoryError.builtin$cls = "OutOfMemoryError";
  if (!"name" in OutOfMemoryError)
    OutOfMemoryError.name = "OutOfMemoryError";
  $desc = $collectedClasses.OutOfMemoryError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutOfMemoryError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function Exception() {
  }
  Exception.builtin$cls = "Exception";
  if (!"name" in Exception)
    Exception.name = "Exception";
  $desc = $collectedClasses.Exception;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Exception.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  function IntegerDivisionByZeroException() {
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IntegerDivisionByZeroException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Invocation() {
  }
  Invocation.builtin$cls = "Invocation";
  if (!"name" in Invocation)
    Invocation.name = "Invocation";
  $desc = $collectedClasses.Invocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Invocation.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Pattern() {
  }
  Pattern.builtin$cls = "Pattern";
  if (!"name" in Pattern)
    Pattern.name = "Pattern";
  $desc = $collectedClasses.Pattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pattern.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function Set() {
  }
  Set.builtin$cls = "Set";
  if (!"name" in Set)
    Set.name = "Set";
  $desc = $collectedClasses.Set;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Set.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Type() {
  }
  Type.builtin$cls = "Type";
  if (!"name" in Type)
    Type.name = "Type";
  $desc = $collectedClasses.Type;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Type.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function _FrozenElementList_classes_closure(value_0) {
    this.value_0 = value_0;
  }
  _FrozenElementList_classes_closure.builtin$cls = "_FrozenElementList_classes_closure";
  if (!"name" in _FrozenElementList_classes_closure)
    _FrozenElementList_classes_closure.name = "_FrozenElementList_classes_closure";
  $desc = $collectedClasses._FrozenElementList_classes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList_classes_closure.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function WindowBase() {
  }
  WindowBase.builtin$cls = "WindowBase";
  if (!"name" in WindowBase)
    WindowBase.name = "WindowBase";
  $desc = $collectedClasses.WindowBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WindowBase.prototype = $desc;
  function CssClassSet() {
  }
  CssClassSet.builtin$cls = "CssClassSet";
  if (!"name" in CssClassSet)
    CssClassSet.name = "CssClassSet";
  $desc = $collectedClasses.CssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSet.prototype = $desc;
  function _ElementCssClassSet(_element) {
    this._element = _element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function ElementStream() {
  }
  ElementStream.builtin$cls = "ElementStream";
  if (!"name" in ElementStream)
    ElementStream.name = "ElementStream";
  $desc = $collectedClasses.ElementStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElementStream.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_html$_controller, _subscriptions) {
    this._html$_controller = _html$_controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function _WrappedList(_list) {
    this._list = _list;
  }
  _WrappedList.builtin$cls = "_WrappedList";
  if (!"name" in _WrappedList)
    _WrappedList.name = "_WrappedList";
  $desc = $collectedClasses._WrappedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WrappedList.prototype = $desc;
  function _WrappedIterator(_html$_iterator) {
    this._html$_iterator = _html$_iterator;
  }
  _WrappedIterator.builtin$cls = "_WrappedIterator";
  if (!"name" in _WrappedIterator)
    _WrappedIterator.name = "_WrappedIterator";
  $desc = $collectedClasses._WrappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WrappedIterator.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function Capability() {
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Capability.prototype = $desc;
  function SendPort() {
  }
  SendPort.builtin$cls = "SendPort";
  if (!"name" in SendPort)
    SendPort.name = "SendPort";
  $desc = $collectedClasses.SendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SendPort.prototype = $desc;
  function JsObject(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsObject.builtin$cls = "JsObject";
  if (!"name" in JsObject)
    JsObject.name = "JsObject";
  $desc = $collectedClasses.JsObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject.prototype = $desc;
  function JsObject__convertDataTree__convert(_convertedObjects_0) {
    this._convertedObjects_0 = _convertedObjects_0;
  }
  JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
  if (!"name" in JsObject__convertDataTree__convert)
    JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
  $desc = $collectedClasses.JsObject__convertDataTree__convert;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject__convertDataTree__convert.prototype = $desc;
  function JsFunction(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsFunction.builtin$cls = "JsFunction";
  if (!"name" in JsFunction)
    JsFunction.name = "JsFunction";
  $desc = $collectedClasses.JsFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunction.prototype = $desc;
  function JsArray(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsArray.builtin$cls = "JsArray";
  if (!"name" in JsArray)
    JsArray.name = "JsArray";
  $desc = $collectedClasses.JsArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsArray.prototype = $desc;
  function JsObject_ListMixin() {
  }
  JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
  if (!"name" in JsObject_ListMixin)
    JsObject_ListMixin.name = "JsObject_ListMixin";
  $desc = $collectedClasses.JsObject_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject_ListMixin.prototype = $desc;
  function _convertToJS_closure() {
  }
  _convertToJS_closure.builtin$cls = "_convertToJS_closure";
  if (!"name" in _convertToJS_closure)
    _convertToJS_closure.name = "_convertToJS_closure";
  $desc = $collectedClasses._convertToJS_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure.prototype = $desc;
  function _convertToJS_closure0(ctor_0) {
    this.ctor_0 = ctor_0;
  }
  _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
  if (!"name" in _convertToJS_closure0)
    _convertToJS_closure0.name = "_convertToJS_closure0";
  $desc = $collectedClasses._convertToJS_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure0.prototype = $desc;
  function _wrapToDart_closure() {
  }
  _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
  if (!"name" in _wrapToDart_closure)
    _wrapToDart_closure.name = "_wrapToDart_closure";
  $desc = $collectedClasses._wrapToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure.prototype = $desc;
  function _wrapToDart_closure0() {
  }
  _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
  if (!"name" in _wrapToDart_closure0)
    _wrapToDart_closure0.name = "_wrapToDart_closure0";
  $desc = $collectedClasses._wrapToDart_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure0.prototype = $desc;
  function _wrapToDart_closure1() {
  }
  _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
  if (!"name" in _wrapToDart_closure1)
    _wrapToDart_closure1.name = "_wrapToDart_closure1";
  $desc = $collectedClasses._wrapToDart_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure1.prototype = $desc;
  function _JSRandom() {
  }
  _JSRandom.builtin$cls = "_JSRandom";
  if (!"name" in _JSRandom)
    _JSRandom.name = "_JSRandom";
  $desc = $collectedClasses._JSRandom;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JSRandom.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfDouble() {
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function NativeTypedArrayOfInt() {
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfInt.prototype = $desc;
  function NativeTypedArray_ListMixin0() {
  }
  NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
  if (!"name" in NativeTypedArray_ListMixin0)
    NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin0.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin0)
    NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function CssClassSetImpl_addAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  }
  CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
  if (!"name" in CssClassSetImpl_addAll_closure)
    CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
  $desc = $collectedClasses.CssClassSetImpl_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_addAll_closure.prototype = $desc;
  function CssClassSetImpl_clear_closure() {
  }
  CssClassSetImpl_clear_closure.builtin$cls = "CssClassSetImpl_clear_closure";
  if (!"name" in CssClassSetImpl_clear_closure)
    CssClassSetImpl_clear_closure.name = "CssClassSetImpl_clear_closure";
  $desc = $collectedClasses.CssClassSetImpl_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_clear_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function Proxy(_jsObject) {
    this._jsObject = _jsObject;
  }
  Proxy.builtin$cls = "Proxy";
  if (!"name" in Proxy)
    Proxy.name = "Proxy";
  $desc = $collectedClasses.Proxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Proxy.prototype = $desc;
  function _CallbackFunction(f, withThis) {
    this.f = f;
    this.withThis = withThis;
  }
  _CallbackFunction.builtin$cls = "_CallbackFunction";
  if (!"name" in _CallbackFunction)
    _CallbackFunction.name = "_CallbackFunction";
  $desc = $collectedClasses._CallbackFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CallbackFunction.prototype = $desc;
  function _CallbackFunction_noSuchMethod_closure() {
  }
  _CallbackFunction_noSuchMethod_closure.builtin$cls = "_CallbackFunction_noSuchMethod_closure";
  if (!"name" in _CallbackFunction_noSuchMethod_closure)
    _CallbackFunction_noSuchMethod_closure.name = "_CallbackFunction_noSuchMethod_closure";
  $desc = $collectedClasses._CallbackFunction_noSuchMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CallbackFunction_noSuchMethod_closure.prototype = $desc;
  function FunctionProxy(_jsFunction, _thisArg, _jsObject) {
    this._jsFunction = _jsFunction;
    this._thisArg = _thisArg;
    this._jsObject = _jsObject;
  }
  FunctionProxy.builtin$cls = "FunctionProxy";
  if (!"name" in FunctionProxy)
    FunctionProxy.name = "FunctionProxy";
  $desc = $collectedClasses.FunctionProxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FunctionProxy.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, Css, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DomError, DomException, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiMessageEvent, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TextMetrics, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, XmlDocument, _Attr, _ClientRect, _DocumentType, _HTMLAppletElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, KeyRange, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, DiscardElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GeometryElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, RenderingContext, SqlError, NativeByteBuffer, NativeTypedData, NativeByteData, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_closure, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, CapabilityImpl, JSInvocationMirror, ReflectionInfo, ReflectionInfo_sortedIndex_closure, Primitives_functionNoSuchMethod_closure, Primitives_applyFunction_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, StringMatch, BaseCanvasModel, BaseCanvasModelController, BaseController, BaseField, BaseModal, BaseModel, BaseView, BorderConnection, BorderInteractionController, BorderPoint, BaseFieldGluer, BaseFieldGluer__registerPointsUpdated_closure, TableFieldGlue, CanvasActionsController, CanvasActionsController_closure, CanvasActionsController_closure0, CanvasActionsController_closure1, CanvasActionsController_closure2, CanvasActionsController_closure3, CanvasActionsController__registerRelationshipCreation_closure, CanvasActionsController__registerRelationshipCreation__closure, CanvasActionsController__registerRelationshipCreation_closure0, CanvasActionsController__registerRelationshipCreation_closure1, CanvasActionsController__registerRelationshipCreation_closure2, CanvasActionsController__registerRelationshipCreation_closure3, CanvasActionsController__registerRelationshipCreation_closure4, CanvasActionsController__registerRelationshipCreation_closure5, CanvasActionsController__registerTableButton_closure, CanvasEllipseDrawer, CanvasScroller, CanvasInteractionStrategy, CanvasModelSelectAndDragStrategy, DefaultStrategy, RelationCanvasMenuStrategy, RelationCanvasMenuStrategy__handleDeleteModelButton_closure, RelationCanvasMenuStrategy__handleEditModelButton_closure, RelationshipDefinitionStrategy, RelationshipCreationStatus, RelationshipTernaryDefinitionStrategy, SpecializationCanvasMenuStrategy, SpecializationCanvasMenuStrategy__handleDeleteModelButton_closure, SpecializationCanvasMenuStrategy__handleEditModelButton_closure, SpecializationNewConnectionStrategy, SpecializationStrategy, CreationStatus, TableCanvasMenuStrategy, TableCanvasMenuStrategy__handleDeleteModelButton_closure, TableCanvasMenuStrategy__handleEditModelButton_closure, TableCreationStrategy, Command, CommandController, Connector, ConnectorMany, ConnectorOne, ConnectorOneOrMany, ConnectorZeroOrMany, ConnectorZeroOrOne, Diagram, DiagramController, DiagramController__handleLogicalPhysicalConversion_closure, ControllerFactory, ModalFactory, ViewFactory, BaseCanvasModelHTTPRequest, CreateRelationshipRequest, DeleteRelationshipRequest, UpdateRelationshipRequest, ValidateRelationshipRequest, CreateSpecializationRequest, DeleteSpecializationRequest, UpdateSpecializationRequest, CreateTableRequest, DeleteTableRequest, UpdateTableRequest, ValidateTableRequest, HTTPRequestController, Line, MainController, MainController_closure, MainController_closure0, ModalBaseFieldBuilder, ModalBaseFieldBuilder__addRemoveButton_closure, ModalBaseFieldBuilder__registerMoreFieldButton_closure, ModalBaseFieldBuilder__registerMoreSubFieldButton_closure, Preferences, PreferencesController, PreferencesController__createCanvasToImageHandler_closure, PreferencesModal, PreferencesModal__handleSubmit_closure, ConceptualModalRelationshipFieldBuilder, ConceptualModalRelationshipFieldBuilder_buildBaseFieldRow_closure, ConceptualRelationshipModal, ConceptualRelationshipModal__linkParentTableToTernaryParentCardinalities_closure, LogicalRelationshipModal, RelationshipModal, RelationshipModal__handleSubmit_closure, RelationshipModalFactory, Relationship, RelationshipController, RelationshipController_validate_closure, RelationshipController_createRelationship_closure, RelationshipController_updateRelationship_closure, RelationshipController_deleteRelationship_closure, RelationshipField, ConceptualRelationshipView, LogicalRelationshipView, RelationshipDefinitionView, RelationshipView, RelationshipViewFactory, Specialization, SpecializationController, SpecializationController_createSpecializationRequest_closure, SpecializationController_updateSpecialization_closure, SpecializationController_deleteSpecialization_closure, ConceptualSpecializationView, LogicalSpecializationView, SpecializationView, SpecializationViewFactory, ForeignKey, ConceptualModalTableFieldBuilder, ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure, ConceptualModalTableFieldBuilder_buildBaseFieldRow_closure0, ConceptualTableModal, LogicalModalTableFieldBuilder, LogicalModalTableFieldBuilder_buildBaseFieldRow_closure, LogicalModalTableFieldBuilder_buildBaseFieldRow_closure0, LogicalTableModal, TableModal, TableModal__handleSubmit_closure, TableModalFactory, Table, TableController, TableController_validate_closure, TableController_createTableRequest_closure, TableController_updateTableRequest_closure, TableController_deleteTable_closure, TableField, ConceptualTableView, LogicalTableView, TableView, TableViewFactory, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, FixedLengthListMixin, Symbol0, _AsyncError, _BroadcastStream, _BroadcastSubscription, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, Future, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__asyncComplete_closure0, _Future__asyncComplete_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, StreamSubscription, StreamController, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch, _ControllerStream, _ControllerSubscription, _EventSink, _EventDispatch, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _MapStream, _SkipStream, Timer, ZoneDelegate, Zone, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, _IdentityHashMap, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, HashMap, _HashSetBase, HashSet, IterableBase, LinkedHashMap, LinkedHashSet, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, _convertJsonToDart_closure, _convertJsonToDart_walk, Codec, Converter, JsonUnsupportedObjectError, JsonCyclicError, JsonCodec, JsonEncoder, JsonDecoder, _JsonStringifier, Function__toMangledNames_closure, NoSuchMethodError_toString_closure, Comparable, DateTime, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, Exception, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, Invocation, Iterable, Iterator, Map, Null, Object, Pattern, Match, Set, StackTrace, StringBuffer, Symbol, Type, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, _FrozenElementList_classes_closure, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, WindowBase, CssClassSet, _ElementCssClassSet, EventStreamProvider, ElementStream, _EventStream, _ElementEventStreamImpl, _ElementListEventStreamImpl, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, ImmutableListMixin, _WrappedList, _WrappedIterator, FixedSizeListIterator, _DOMWindowCrossFrame, _AttributeClassSet, Capability, SendPort, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, _JSRandom, Point, _RectangleBase, Rectangle, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, CssClassSetImpl_clear_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, Proxy, _CallbackFunction, _CallbackFunction_noSuchMethod_closure, FunctionProxy];
}
